//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by StorageClassGenerator
//
//     Do not change code in this file, it will get lost when the file gets 
//     auto generated again. Write your code into DC.cs.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
using System;
using System.Collections.Generic;
using System.Threading;
using StorageLib;


namespace DataModelSamples  {

  /// <summary>
  /// A part of DC is static, which gives easy access to all stored data (=context) through DC.Data. But most functionality is in the
  /// instantiatable part of DC. Since it is instantiatable, is possible to use different contexts over the lifetime of a program. This 
  /// is helpful for unit testing. Use DC.Init() to create a new context and dispose it with DisposeData() before creating a new one.
  /// </summary>
  public partial class DC: DataContextBase {

    #region static Part
    //      -----------

    /// <summary>
    /// Provides static root access to the data context
    /// </summary>
    public static DC Data {
      get { return data!; }
    }
    private static DC? data; //data is needed for Interlocked.Exchange(ref data, null) in DisposeData()


    /// <summary>
    /// Flushes all data to permanent storage location if permanent data storage is active. Compacts data storage
    /// by applying all updates and removing all instances marked as deleted.
    /// </summary>
    public static void DisposeData() {
      var dataLocal = Interlocked.Exchange(ref data, null);
      dataLocal?.Dispose();
    }
    #endregion


    #region Properties
    //      ----------

    /// <summary>
    /// Configuration parameters if data gets stored in .csv files
    /// </summary>
    public CsvConfig? CsvConfig { get; }

    /// <summary>
    /// Is all data initialised
    /// </summary>
    public bool IsInitialised { get; private set; }

    /// <summary>
    /// Directory of all ClassWithEnumPropertys
    /// </summary>
    public IReadonlyDataStore<ClassWithEnumProperty> ClassWithEnumPropertys => _ClassWithEnumPropertys;
    internal DataStore<ClassWithEnumProperty> _ClassWithEnumPropertys { get; private set; }

    /// <summary>
    /// Directory of all ConditionalUnconditionalPropertyClasss
    /// </summary>
    public IReadonlyDataStore<ConditionalUnconditionalPropertyClass> ConditionalUnconditionalPropertyClasss => _ConditionalUnconditionalPropertyClasss;
    internal DataStore<ConditionalUnconditionalPropertyClass> _ConditionalUnconditionalPropertyClasss { get; private set; }

    /// <summary>
    /// Directory of all DataModelDataTypess
    /// </summary>
    public IReadonlyDataStore<DataModelDataTypes> DataModelDataTypess => _DataModelDataTypess;
    internal DataStore<DataModelDataTypes> _DataModelDataTypess { get; private set; }

    /// <summary>
    /// Directory of all DefaultValuePropertyClasss
    /// </summary>
    public IReadonlyDataStore<DefaultValuePropertyClass> DefaultValuePropertyClasss => _DefaultValuePropertyClasss;
    internal DataStore<DefaultValuePropertyClass> _DefaultValuePropertyClasss { get; private set; }

    /// <summary>
    /// Directory of all Dictionary_1_MC_Childs
    /// </summary>
    public IReadonlyDataStore<Dictionary_1_MC_Child> Dictionary_1_MC_Childs => _Dictionary_1_MC_Childs;
    internal DataStore<Dictionary_1_MC_Child> _Dictionary_1_MC_Childs { get; private set; }

    /// <summary>
    /// Directory of all Dictionary_1_MC_Parents
    /// </summary>
    public IReadonlyDataStore<Dictionary_1_MC_Parent> Dictionary_1_MC_Parents => _Dictionary_1_MC_Parents;
    internal DataStore<Dictionary_1_MC_Parent> _Dictionary_1_MC_Parents { get; private set; }

    /// <summary>
    /// Directory of all Dictionary_C_MC_Childs
    /// </summary>
    public IReadonlyDataStore<Dictionary_C_MC_Child> Dictionary_C_MC_Childs => _Dictionary_C_MC_Childs;
    internal DataStore<Dictionary_C_MC_Child> _Dictionary_C_MC_Childs { get; private set; }

    /// <summary>
    /// Directory of all Dictionary_C_MC_Parents
    /// </summary>
    public IReadonlyDataStore<Dictionary_C_MC_Parent> Dictionary_C_MC_Parents => _Dictionary_C_MC_Parents;
    internal DataStore<Dictionary_C_MC_Parent> _Dictionary_C_MC_Parents { get; private set; }

    /// <summary>
    /// Directory of all DictionaryWithPropertyNameChilds
    /// </summary>
    public IReadonlyDataStore<DictionaryWithPropertyNameChild> DictionaryWithPropertyNameChilds => _DictionaryWithPropertyNameChilds;
    internal DataStore<DictionaryWithPropertyNameChild> _DictionaryWithPropertyNameChilds { get; private set; }

    /// <summary>
    /// Directory of all DictionaryWithPropertyNameParents
    /// </summary>
    public IReadonlyDataStore<DictionaryWithPropertyNameParent> DictionaryWithPropertyNameParents => _DictionaryWithPropertyNameParents;
    internal DataStore<DictionaryWithPropertyNameParent> _DictionaryWithPropertyNameParents { get; private set; }

    /// <summary>
    /// Directory of all List_1_MC_Childs
    /// </summary>
    public IReadonlyDataStore<List_1_MC_Child> List_1_MC_Childs => _List_1_MC_Childs;
    internal DataStore<List_1_MC_Child> _List_1_MC_Childs { get; private set; }

    /// <summary>
    /// Directory of all List_1_MC_Parents
    /// </summary>
    public IReadonlyDataStore<List_1_MC_Parent> List_1_MC_Parents => _List_1_MC_Parents;
    internal DataStore<List_1_MC_Parent> _List_1_MC_Parents { get; private set; }

    /// <summary>
    /// Directory of all List_C_MC_Childs
    /// </summary>
    public IReadonlyDataStore<List_C_MC_Child> List_C_MC_Childs => _List_C_MC_Childs;
    internal DataStore<List_C_MC_Child> _List_C_MC_Childs { get; private set; }

    /// <summary>
    /// Directory of all List_C_MC_Parents
    /// </summary>
    public IReadonlyDataStore<List_C_MC_Parent> List_C_MC_Parents => _List_C_MC_Parents;
    internal DataStore<List_C_MC_Parent> _List_C_MC_Parents { get; private set; }

    /// <summary>
    /// Directory of all ListWithPropertyNameChilds
    /// </summary>
    public IReadonlyDataStore<ListWithPropertyNameChild> ListWithPropertyNameChilds => _ListWithPropertyNameChilds;
    internal DataStore<ListWithPropertyNameChild> _ListWithPropertyNameChilds { get; private set; }

    /// <summary>
    /// Directory of all ListWithPropertyNameParents
    /// </summary>
    public IReadonlyDataStore<ListWithPropertyNameParent> ListWithPropertyNameParents => _ListWithPropertyNameParents;
    internal DataStore<ListWithPropertyNameParent> _ListWithPropertyNameParents { get; private set; }

    /// <summary>
    /// Directory of all Lookup_1_0_Childs
    /// </summary>
    public IReadonlyDataStore<Lookup_1_0_Child> Lookup_1_0_Childs => _Lookup_1_0_Childs;
    internal DataStore<Lookup_1_0_Child> _Lookup_1_0_Childs { get; private set; }

    /// <summary>
    /// Directory of all Lookup_1_0_Parents
    /// </summary>
    public IReadonlyDataStore<Lookup_1_0_Parent> Lookup_1_0_Parents => _Lookup_1_0_Parents;
    internal DataStore<Lookup_1_0_Parent> _Lookup_1_0_Parents { get; private set; }

    /// <summary>
    /// Directory of all Lookup_C_0_Childs
    /// </summary>
    public IReadonlyDataStore<Lookup_C_0_Child> Lookup_C_0_Childs => _Lookup_C_0_Childs;
    internal DataStore<Lookup_C_0_Child> _Lookup_C_0_Childs { get; private set; }

    /// <summary>
    /// Directory of all Lookup_C_0_Parents
    /// </summary>
    public IReadonlyDataStore<Lookup_C_0_Parent> Lookup_C_0_Parents => _Lookup_C_0_Parents;
    internal DataStore<Lookup_C_0_Parent> _Lookup_C_0_Parents { get; private set; }

    /// <summary>
    /// Directory of all NeedsDictionaryClasss
    /// </summary>
    public IReadonlyDataStore<NeedsDictionaryClass> NeedsDictionaryClasss => _NeedsDictionaryClasss;
    internal DataStore<NeedsDictionaryClass> _NeedsDictionaryClasss { get; private set; }

    /// <summary>
    /// Directory of all NeedsDictionaryClasss by Name
    /// </summary>
    public IReadOnlyDictionary<string, NeedsDictionaryClass> NeedsDictionaryClasssByName => _NeedsDictionaryClasssByName;
    internal Dictionary<string, NeedsDictionaryClass> _NeedsDictionaryClasssByName { get; private set; }

    /// <summary>
    /// Directory of all NeedsDictionaryLowerCaseClasss
    /// </summary>
    public IReadonlyDataStore<NeedsDictionaryLowerCaseClass> NeedsDictionaryLowerCaseClasss => _NeedsDictionaryLowerCaseClasss;
    internal DataStore<NeedsDictionaryLowerCaseClass> _NeedsDictionaryLowerCaseClasss { get; private set; }

    /// <summary>
    /// Directory of all NeedsDictionaryLowerCaseClasss by NameLower
    /// </summary>
    public IReadOnlyDictionary<string, NeedsDictionaryLowerCaseClass> NeedsDictionaryLowerCaseClasssByNameLower => _NeedsDictionaryLowerCaseClasssByNameLower;
    internal Dictionary<string, NeedsDictionaryLowerCaseClass> _NeedsDictionaryLowerCaseClasssByNameLower { get; private set; }

    /// <summary>
    /// Directory of all NoneUpdateableNoneReleasableClasss
    /// </summary>
    public IReadonlyDataStore<NoneUpdateableNoneReleasableClass> NoneUpdateableNoneReleasableClasss => _NoneUpdateableNoneReleasableClasss;
    internal DataStore<NoneUpdateableNoneReleasableClass> _NoneUpdateableNoneReleasableClasss { get; private set; }

    /// <summary>
    /// Directory of all NoneUpdateableReleasableClasss
    /// </summary>
    public IReadonlyDataStore<NoneUpdateableReleasableClass> NoneUpdateableReleasableClasss => _NoneUpdateableReleasableClasss;
    internal DataStore<NoneUpdateableReleasableClass> _NoneUpdateableReleasableClasss { get; private set; }

    /// <summary>
    /// Directory of all PluralNameNoneStandardClasses
    /// </summary>
    public IReadonlyDataStore<PluralNameNoneStandardClass> PluralNameNoneStandardClasses => _PluralNameNoneStandardClasses;
    internal DataStore<PluralNameNoneStandardClass> _PluralNameNoneStandardClasses { get; private set; }

    /// <summary>
    /// Directory of all ReadonlyPropertyClasss
    /// </summary>
    public IReadonlyDataStore<ReadonlyPropertyClass> ReadonlyPropertyClasss => _ReadonlyPropertyClasss;
    internal DataStore<ReadonlyPropertyClass> _ReadonlyPropertyClasss { get; private set; }

    /// <summary>
    /// Directory of all SingleChild_1_C_Childs
    /// </summary>
    public IReadonlyDataStore<SingleChild_1_C_Child> SingleChild_1_C_Childs => _SingleChild_1_C_Childs;
    internal DataStore<SingleChild_1_C_Child> _SingleChild_1_C_Childs { get; private set; }

    /// <summary>
    /// Directory of all SingleChild_1_C_Parents
    /// </summary>
    public IReadonlyDataStore<SingleChild_1_C_Parent> SingleChild_1_C_Parents => _SingleChild_1_C_Parents;
    internal DataStore<SingleChild_1_C_Parent> _SingleChild_1_C_Parents { get; private set; }

    /// <summary>
    /// Directory of all SingleChild_C_C_Childs
    /// </summary>
    public IReadonlyDataStore<SingleChild_C_C_Child> SingleChild_C_C_Childs => _SingleChild_C_C_Childs;
    internal DataStore<SingleChild_C_C_Child> _SingleChild_C_C_Childs { get; private set; }

    /// <summary>
    /// Directory of all SingleChild_C_C_Parents
    /// </summary>
    public IReadonlyDataStore<SingleChild_C_C_Parent> SingleChild_C_C_Parents => _SingleChild_C_C_Parents;
    internal DataStore<SingleChild_C_C_Parent> _SingleChild_C_C_Parents { get; private set; }

    /// <summary>
    /// Directory of all SortedList_1_MC_Childs
    /// </summary>
    public IReadonlyDataStore<SortedList_1_MC_Child> SortedList_1_MC_Childs => _SortedList_1_MC_Childs;
    internal DataStore<SortedList_1_MC_Child> _SortedList_1_MC_Childs { get; private set; }

    /// <summary>
    /// Directory of all SortedList_1_MC_Parents
    /// </summary>
    public IReadonlyDataStore<SortedList_1_MC_Parent> SortedList_1_MC_Parents => _SortedList_1_MC_Parents;
    internal DataStore<SortedList_1_MC_Parent> _SortedList_1_MC_Parents { get; private set; }

    /// <summary>
    /// Directory of all SortedList_C_MC_Childs
    /// </summary>
    public IReadonlyDataStore<SortedList_C_MC_Child> SortedList_C_MC_Childs => _SortedList_C_MC_Childs;
    internal DataStore<SortedList_C_MC_Child> _SortedList_C_MC_Childs { get; private set; }

    /// <summary>
    /// Directory of all SortedList_C_MC_Parents
    /// </summary>
    public IReadonlyDataStore<SortedList_C_MC_Parent> SortedList_C_MC_Parents => _SortedList_C_MC_Parents;
    internal DataStore<SortedList_C_MC_Parent> _SortedList_C_MC_Parents { get; private set; }

    /// <summary>
    /// Directory of all SortedListWithPropertyNameChilds
    /// </summary>
    public IReadonlyDataStore<SortedListWithPropertyNameChild> SortedListWithPropertyNameChilds => _SortedListWithPropertyNameChilds;
    internal DataStore<SortedListWithPropertyNameChild> _SortedListWithPropertyNameChilds { get; private set; }

    /// <summary>
    /// Directory of all SortedListWithPropertyNameParents
    /// </summary>
    public IReadonlyDataStore<SortedListWithPropertyNameParent> SortedListWithPropertyNameParents => _SortedListWithPropertyNameParents;
    internal DataStore<SortedListWithPropertyNameParent> _SortedListWithPropertyNameParents { get; private set; }

    /// <summary>
    /// Directory of all ToLowerCasePropertyClasss
    /// </summary>
    public IReadonlyDataStore<ToLowerCasePropertyClass> ToLowerCasePropertyClasss => _ToLowerCasePropertyClasss;
    internal DataStore<ToLowerCasePropertyClass> _ToLowerCasePropertyClasss { get; private set; }

    /// <summary>
    /// Directory of all UpdateableNoneReleasableClasss
    /// </summary>
    public IReadonlyDataStore<UpdateableNoneReleasableClass> UpdateableNoneReleasableClasss => _UpdateableNoneReleasableClasss;
    internal DataStore<UpdateableNoneReleasableClass> _UpdateableNoneReleasableClasss { get; private set; }

    /// <summary>
    /// Directory of all UpdateableReleasableClasss
    /// </summary>
    public IReadonlyDataStore<UpdateableReleasableClass> UpdateableReleasableClasss => _UpdateableReleasableClasss;
    internal DataStore<UpdateableReleasableClass> _UpdateableReleasableClasss { get; private set; }
    #endregion


    #region Events
    //      ------

    #endregion


    #region Constructors
    //      ------------

    /// <summary>
    /// Creates a new DataContext. If csvConfig is null, the data is only stored in RAM and gets lost once the 
    /// program terminates. With csvConfig defined, existing data gets read at startup, changes get immediately
    /// written and Dispose() ensures by flushing that all data is permanently stored.
    /// </summary>
    public DC(CsvConfig? csvConfig): base(DataStoresCount: 39) {
      data = this;
      IsInitialised = false;

      string? backupResult = null;
      if (csvConfig!=null) {
        backupResult = Csv.Backup(csvConfig, DateTime.Now);
      }

      CsvConfig = csvConfig;
      onConstructing(backupResult);

      _NeedsDictionaryClasssByName = new Dictionary<string, NeedsDictionaryClass>();
      _NeedsDictionaryLowerCaseClasssByNameLower = new Dictionary<string, NeedsDictionaryLowerCaseClass>();
      if (csvConfig==null) {
        _UpdateableReleasableClasss = new DataStore<UpdateableReleasableClass>(
          this,
          0,
          UpdateableReleasableClass.SetKey,
          UpdateableReleasableClass.RollbackItemNew,
          UpdateableReleasableClass.RollbackItemStore,
          UpdateableReleasableClass.RollbackItemUpdate,
          UpdateableReleasableClass.RollbackItemRelease,
          areInstancesUpdatable: true,
          areInstancesReleasable: true);
        DataStores[0] = _UpdateableReleasableClasss;
        onUpdateableReleasableClasssFilled();

        _UpdateableNoneReleasableClasss = new DataStore<UpdateableNoneReleasableClass>(
          this,
          1,
          UpdateableNoneReleasableClass.SetKey,
          UpdateableNoneReleasableClass.RollbackItemNew,
          UpdateableNoneReleasableClass.RollbackItemStore,
          UpdateableNoneReleasableClass.RollbackItemUpdate,
          null,
          areInstancesUpdatable: true,
          areInstancesReleasable: false);
        DataStores[1] = _UpdateableNoneReleasableClasss;
        onUpdateableNoneReleasableClasssFilled();

        _NoneUpdateableReleasableClasss = new DataStore<NoneUpdateableReleasableClass>(
          this,
          2,
          NoneUpdateableReleasableClass.SetKey,
          NoneUpdateableReleasableClass.RollbackItemNew,
          NoneUpdateableReleasableClass.RollbackItemStore,
          null,
          NoneUpdateableReleasableClass.RollbackItemRelease,
          areInstancesUpdatable: false,
          areInstancesReleasable: true);
        DataStores[2] = _NoneUpdateableReleasableClasss;
        onNoneUpdateableReleasableClasssFilled();

        _NoneUpdateableNoneReleasableClasss = new DataStore<NoneUpdateableNoneReleasableClass>(
          this,
          3,
          NoneUpdateableNoneReleasableClass.SetKey,
          NoneUpdateableNoneReleasableClass.RollbackItemNew,
          NoneUpdateableNoneReleasableClass.RollbackItemStore,
          null,
          null,
          areInstancesUpdatable: false,
          areInstancesReleasable: false);
        DataStores[3] = _NoneUpdateableNoneReleasableClasss;
        onNoneUpdateableNoneReleasableClasssFilled();

        _PluralNameNoneStandardClasses = new DataStore<PluralNameNoneStandardClass>(
          this,
          4,
          PluralNameNoneStandardClass.SetKey,
          PluralNameNoneStandardClass.RollbackItemNew,
          PluralNameNoneStandardClass.RollbackItemStore,
          PluralNameNoneStandardClass.RollbackItemUpdate,
          PluralNameNoneStandardClass.RollbackItemRelease,
          areInstancesUpdatable: true,
          areInstancesReleasable: true);
        DataStores[4] = _PluralNameNoneStandardClasses;
        onPluralNameNoneStandardClassesFilled();

        _ReadonlyPropertyClasss = new DataStore<ReadonlyPropertyClass>(
          this,
          5,
          ReadonlyPropertyClass.SetKey,
          ReadonlyPropertyClass.RollbackItemNew,
          ReadonlyPropertyClass.RollbackItemStore,
          ReadonlyPropertyClass.RollbackItemUpdate,
          ReadonlyPropertyClass.RollbackItemRelease,
          areInstancesUpdatable: true,
          areInstancesReleasable: true);
        DataStores[5] = _ReadonlyPropertyClasss;
        onReadonlyPropertyClasssFilled();

        _ConditionalUnconditionalPropertyClasss = new DataStore<ConditionalUnconditionalPropertyClass>(
          this,
          6,
          ConditionalUnconditionalPropertyClass.SetKey,
          ConditionalUnconditionalPropertyClass.RollbackItemNew,
          ConditionalUnconditionalPropertyClass.RollbackItemStore,
          ConditionalUnconditionalPropertyClass.RollbackItemUpdate,
          ConditionalUnconditionalPropertyClass.RollbackItemRelease,
          areInstancesUpdatable: true,
          areInstancesReleasable: true);
        DataStores[6] = _ConditionalUnconditionalPropertyClasss;
        onConditionalUnconditionalPropertyClasssFilled();

        _DefaultValuePropertyClasss = new DataStore<DefaultValuePropertyClass>(
          this,
          7,
          DefaultValuePropertyClass.SetKey,
          DefaultValuePropertyClass.RollbackItemNew,
          DefaultValuePropertyClass.RollbackItemStore,
          DefaultValuePropertyClass.RollbackItemUpdate,
          DefaultValuePropertyClass.RollbackItemRelease,
          areInstancesUpdatable: true,
          areInstancesReleasable: true);
        DataStores[7] = _DefaultValuePropertyClasss;
        onDefaultValuePropertyClasssFilled();

        _ToLowerCasePropertyClasss = new DataStore<ToLowerCasePropertyClass>(
          this,
          8,
          ToLowerCasePropertyClass.SetKey,
          ToLowerCasePropertyClass.RollbackItemNew,
          ToLowerCasePropertyClass.RollbackItemStore,
          ToLowerCasePropertyClass.RollbackItemUpdate,
          ToLowerCasePropertyClass.RollbackItemRelease,
          areInstancesUpdatable: true,
          areInstancesReleasable: true);
        DataStores[8] = _ToLowerCasePropertyClasss;
        onToLowerCasePropertyClasssFilled();

        _DataModelDataTypess = new DataStore<DataModelDataTypes>(
          this,
          9,
          DataModelDataTypes.SetKey,
          DataModelDataTypes.RollbackItemNew,
          DataModelDataTypes.RollbackItemStore,
          DataModelDataTypes.RollbackItemUpdate,
          DataModelDataTypes.RollbackItemRelease,
          areInstancesUpdatable: true,
          areInstancesReleasable: true);
        DataStores[9] = _DataModelDataTypess;
        onDataModelDataTypessFilled();

        _ClassWithEnumPropertys = new DataStore<ClassWithEnumProperty>(
          this,
          10,
          ClassWithEnumProperty.SetKey,
          ClassWithEnumProperty.RollbackItemNew,
          ClassWithEnumProperty.RollbackItemStore,
          ClassWithEnumProperty.RollbackItemUpdate,
          ClassWithEnumProperty.RollbackItemRelease,
          areInstancesUpdatable: true,
          areInstancesReleasable: true);
        DataStores[10] = _ClassWithEnumPropertys;
        onClassWithEnumPropertysFilled();

        _Lookup_1_0_Parents = new DataStore<Lookup_1_0_Parent>(
          this,
          11,
          Lookup_1_0_Parent.SetKey,
          Lookup_1_0_Parent.RollbackItemNew,
          Lookup_1_0_Parent.RollbackItemStore,
          Lookup_1_0_Parent.RollbackItemUpdate,
          null,
          areInstancesUpdatable: true,
          areInstancesReleasable: false);
        DataStores[11] = _Lookup_1_0_Parents;
        onLookup_1_0_ParentsFilled();

        _Lookup_1_0_Childs = new DataStore<Lookup_1_0_Child>(
          this,
          12,
          Lookup_1_0_Child.SetKey,
          Lookup_1_0_Child.RollbackItemNew,
          Lookup_1_0_Child.RollbackItemStore,
          Lookup_1_0_Child.RollbackItemUpdate,
          Lookup_1_0_Child.RollbackItemRelease,
          areInstancesUpdatable: true,
          areInstancesReleasable: true);
        DataStores[12] = _Lookup_1_0_Childs;
        onLookup_1_0_ChildsFilled();

        _Lookup_C_0_Childs = new DataStore<Lookup_C_0_Child>(
          this,
          13,
          Lookup_C_0_Child.SetKey,
          Lookup_C_0_Child.RollbackItemNew,
          Lookup_C_0_Child.RollbackItemStore,
          Lookup_C_0_Child.RollbackItemUpdate,
          Lookup_C_0_Child.RollbackItemRelease,
          areInstancesUpdatable: true,
          areInstancesReleasable: true);
        DataStores[13] = _Lookup_C_0_Childs;
        onLookup_C_0_ChildsFilled();

        _Lookup_C_0_Parents = new DataStore<Lookup_C_0_Parent>(
          this,
          14,
          Lookup_C_0_Parent.SetKey,
          Lookup_C_0_Parent.RollbackItemNew,
          Lookup_C_0_Parent.RollbackItemStore,
          Lookup_C_0_Parent.RollbackItemUpdate,
          null,
          areInstancesUpdatable: true,
          areInstancesReleasable: false);
        DataStores[14] = _Lookup_C_0_Parents;
        onLookup_C_0_ParentsFilled();

        _SingleChild_1_C_Parents = new DataStore<SingleChild_1_C_Parent>(
          this,
          15,
          SingleChild_1_C_Parent.SetKey,
          SingleChild_1_C_Parent.RollbackItemNew,
          SingleChild_1_C_Parent.RollbackItemStore,
          SingleChild_1_C_Parent.RollbackItemUpdate,
          SingleChild_1_C_Parent.RollbackItemRelease,
          areInstancesUpdatable: true,
          areInstancesReleasable: true);
        DataStores[15] = _SingleChild_1_C_Parents;
        onSingleChild_1_C_ParentsFilled();

        _SingleChild_1_C_Childs = new DataStore<SingleChild_1_C_Child>(
          this,
          16,
          SingleChild_1_C_Child.SetKey,
          SingleChild_1_C_Child.RollbackItemNew,
          SingleChild_1_C_Child.RollbackItemStore,
          SingleChild_1_C_Child.RollbackItemUpdate,
          SingleChild_1_C_Child.RollbackItemRelease,
          areInstancesUpdatable: true,
          areInstancesReleasable: true);
        DataStores[16] = _SingleChild_1_C_Childs;
        onSingleChild_1_C_ChildsFilled();

        _SingleChild_C_C_Parents = new DataStore<SingleChild_C_C_Parent>(
          this,
          17,
          SingleChild_C_C_Parent.SetKey,
          SingleChild_C_C_Parent.RollbackItemNew,
          SingleChild_C_C_Parent.RollbackItemStore,
          SingleChild_C_C_Parent.RollbackItemUpdate,
          SingleChild_C_C_Parent.RollbackItemRelease,
          areInstancesUpdatable: true,
          areInstancesReleasable: true);
        DataStores[17] = _SingleChild_C_C_Parents;
        onSingleChild_C_C_ParentsFilled();

        _SingleChild_C_C_Childs = new DataStore<SingleChild_C_C_Child>(
          this,
          18,
          SingleChild_C_C_Child.SetKey,
          SingleChild_C_C_Child.RollbackItemNew,
          SingleChild_C_C_Child.RollbackItemStore,
          SingleChild_C_C_Child.RollbackItemUpdate,
          SingleChild_C_C_Child.RollbackItemRelease,
          areInstancesUpdatable: true,
          areInstancesReleasable: true);
        DataStores[18] = _SingleChild_C_C_Childs;
        onSingleChild_C_C_ChildsFilled();

        _List_1_MC_Parents = new DataStore<List_1_MC_Parent>(
          this,
          19,
          List_1_MC_Parent.SetKey,
          List_1_MC_Parent.RollbackItemNew,
          List_1_MC_Parent.RollbackItemStore,
          List_1_MC_Parent.RollbackItemUpdate,
          List_1_MC_Parent.RollbackItemRelease,
          areInstancesUpdatable: true,
          areInstancesReleasable: true);
        DataStores[19] = _List_1_MC_Parents;
        onList_1_MC_ParentsFilled();

        _List_1_MC_Childs = new DataStore<List_1_MC_Child>(
          this,
          20,
          List_1_MC_Child.SetKey,
          List_1_MC_Child.RollbackItemNew,
          List_1_MC_Child.RollbackItemStore,
          List_1_MC_Child.RollbackItemUpdate,
          List_1_MC_Child.RollbackItemRelease,
          areInstancesUpdatable: true,
          areInstancesReleasable: true);
        DataStores[20] = _List_1_MC_Childs;
        onList_1_MC_ChildsFilled();

        _List_C_MC_Parents = new DataStore<List_C_MC_Parent>(
          this,
          21,
          List_C_MC_Parent.SetKey,
          List_C_MC_Parent.RollbackItemNew,
          List_C_MC_Parent.RollbackItemStore,
          List_C_MC_Parent.RollbackItemUpdate,
          List_C_MC_Parent.RollbackItemRelease,
          areInstancesUpdatable: true,
          areInstancesReleasable: true);
        DataStores[21] = _List_C_MC_Parents;
        onList_C_MC_ParentsFilled();

        _List_C_MC_Childs = new DataStore<List_C_MC_Child>(
          this,
          22,
          List_C_MC_Child.SetKey,
          List_C_MC_Child.RollbackItemNew,
          List_C_MC_Child.RollbackItemStore,
          List_C_MC_Child.RollbackItemUpdate,
          List_C_MC_Child.RollbackItemRelease,
          areInstancesUpdatable: true,
          areInstancesReleasable: true);
        DataStores[22] = _List_C_MC_Childs;
        onList_C_MC_ChildsFilled();

        _ListWithPropertyNameParents = new DataStore<ListWithPropertyNameParent>(
          this,
          23,
          ListWithPropertyNameParent.SetKey,
          ListWithPropertyNameParent.RollbackItemNew,
          ListWithPropertyNameParent.RollbackItemStore,
          ListWithPropertyNameParent.RollbackItemUpdate,
          ListWithPropertyNameParent.RollbackItemRelease,
          areInstancesUpdatable: true,
          areInstancesReleasable: true);
        DataStores[23] = _ListWithPropertyNameParents;
        onListWithPropertyNameParentsFilled();

        _ListWithPropertyNameChilds = new DataStore<ListWithPropertyNameChild>(
          this,
          24,
          ListWithPropertyNameChild.SetKey,
          ListWithPropertyNameChild.RollbackItemNew,
          ListWithPropertyNameChild.RollbackItemStore,
          ListWithPropertyNameChild.RollbackItemUpdate,
          ListWithPropertyNameChild.RollbackItemRelease,
          areInstancesUpdatable: true,
          areInstancesReleasable: true);
        DataStores[24] = _ListWithPropertyNameChilds;
        onListWithPropertyNameChildsFilled();

        _Dictionary_1_MC_Parents = new DataStore<Dictionary_1_MC_Parent>(
          this,
          25,
          Dictionary_1_MC_Parent.SetKey,
          Dictionary_1_MC_Parent.RollbackItemNew,
          Dictionary_1_MC_Parent.RollbackItemStore,
          Dictionary_1_MC_Parent.RollbackItemUpdate,
          Dictionary_1_MC_Parent.RollbackItemRelease,
          areInstancesUpdatable: true,
          areInstancesReleasable: true);
        DataStores[25] = _Dictionary_1_MC_Parents;
        onDictionary_1_MC_ParentsFilled();

        _Dictionary_1_MC_Childs = new DataStore<Dictionary_1_MC_Child>(
          this,
          26,
          Dictionary_1_MC_Child.SetKey,
          Dictionary_1_MC_Child.RollbackItemNew,
          Dictionary_1_MC_Child.RollbackItemStore,
          Dictionary_1_MC_Child.RollbackItemUpdate,
          Dictionary_1_MC_Child.RollbackItemRelease,
          areInstancesUpdatable: true,
          areInstancesReleasable: true);
        DataStores[26] = _Dictionary_1_MC_Childs;
        onDictionary_1_MC_ChildsFilled();

        _Dictionary_C_MC_Parents = new DataStore<Dictionary_C_MC_Parent>(
          this,
          27,
          Dictionary_C_MC_Parent.SetKey,
          Dictionary_C_MC_Parent.RollbackItemNew,
          Dictionary_C_MC_Parent.RollbackItemStore,
          Dictionary_C_MC_Parent.RollbackItemUpdate,
          Dictionary_C_MC_Parent.RollbackItemRelease,
          areInstancesUpdatable: true,
          areInstancesReleasable: true);
        DataStores[27] = _Dictionary_C_MC_Parents;
        onDictionary_C_MC_ParentsFilled();

        _Dictionary_C_MC_Childs = new DataStore<Dictionary_C_MC_Child>(
          this,
          28,
          Dictionary_C_MC_Child.SetKey,
          Dictionary_C_MC_Child.RollbackItemNew,
          Dictionary_C_MC_Child.RollbackItemStore,
          Dictionary_C_MC_Child.RollbackItemUpdate,
          Dictionary_C_MC_Child.RollbackItemRelease,
          areInstancesUpdatable: true,
          areInstancesReleasable: true);
        DataStores[28] = _Dictionary_C_MC_Childs;
        onDictionary_C_MC_ChildsFilled();

        _DictionaryWithPropertyNameParents = new DataStore<DictionaryWithPropertyNameParent>(
          this,
          29,
          DictionaryWithPropertyNameParent.SetKey,
          DictionaryWithPropertyNameParent.RollbackItemNew,
          DictionaryWithPropertyNameParent.RollbackItemStore,
          DictionaryWithPropertyNameParent.RollbackItemUpdate,
          DictionaryWithPropertyNameParent.RollbackItemRelease,
          areInstancesUpdatable: true,
          areInstancesReleasable: true);
        DataStores[29] = _DictionaryWithPropertyNameParents;
        onDictionaryWithPropertyNameParentsFilled();

        _DictionaryWithPropertyNameChilds = new DataStore<DictionaryWithPropertyNameChild>(
          this,
          30,
          DictionaryWithPropertyNameChild.SetKey,
          DictionaryWithPropertyNameChild.RollbackItemNew,
          DictionaryWithPropertyNameChild.RollbackItemStore,
          DictionaryWithPropertyNameChild.RollbackItemUpdate,
          DictionaryWithPropertyNameChild.RollbackItemRelease,
          areInstancesUpdatable: true,
          areInstancesReleasable: true);
        DataStores[30] = _DictionaryWithPropertyNameChilds;
        onDictionaryWithPropertyNameChildsFilled();

        _SortedList_1_MC_Parents = new DataStore<SortedList_1_MC_Parent>(
          this,
          31,
          SortedList_1_MC_Parent.SetKey,
          SortedList_1_MC_Parent.RollbackItemNew,
          SortedList_1_MC_Parent.RollbackItemStore,
          SortedList_1_MC_Parent.RollbackItemUpdate,
          SortedList_1_MC_Parent.RollbackItemRelease,
          areInstancesUpdatable: true,
          areInstancesReleasable: true);
        DataStores[31] = _SortedList_1_MC_Parents;
        onSortedList_1_MC_ParentsFilled();

        _SortedList_1_MC_Childs = new DataStore<SortedList_1_MC_Child>(
          this,
          32,
          SortedList_1_MC_Child.SetKey,
          SortedList_1_MC_Child.RollbackItemNew,
          SortedList_1_MC_Child.RollbackItemStore,
          SortedList_1_MC_Child.RollbackItemUpdate,
          SortedList_1_MC_Child.RollbackItemRelease,
          areInstancesUpdatable: true,
          areInstancesReleasable: true);
        DataStores[32] = _SortedList_1_MC_Childs;
        onSortedList_1_MC_ChildsFilled();

        _SortedList_C_MC_Parents = new DataStore<SortedList_C_MC_Parent>(
          this,
          33,
          SortedList_C_MC_Parent.SetKey,
          SortedList_C_MC_Parent.RollbackItemNew,
          SortedList_C_MC_Parent.RollbackItemStore,
          SortedList_C_MC_Parent.RollbackItemUpdate,
          SortedList_C_MC_Parent.RollbackItemRelease,
          areInstancesUpdatable: true,
          areInstancesReleasable: true);
        DataStores[33] = _SortedList_C_MC_Parents;
        onSortedList_C_MC_ParentsFilled();

        _SortedList_C_MC_Childs = new DataStore<SortedList_C_MC_Child>(
          this,
          34,
          SortedList_C_MC_Child.SetKey,
          SortedList_C_MC_Child.RollbackItemNew,
          SortedList_C_MC_Child.RollbackItemStore,
          SortedList_C_MC_Child.RollbackItemUpdate,
          SortedList_C_MC_Child.RollbackItemRelease,
          areInstancesUpdatable: true,
          areInstancesReleasable: true);
        DataStores[34] = _SortedList_C_MC_Childs;
        onSortedList_C_MC_ChildsFilled();

        _SortedListWithPropertyNameParents = new DataStore<SortedListWithPropertyNameParent>(
          this,
          35,
          SortedListWithPropertyNameParent.SetKey,
          SortedListWithPropertyNameParent.RollbackItemNew,
          SortedListWithPropertyNameParent.RollbackItemStore,
          SortedListWithPropertyNameParent.RollbackItemUpdate,
          SortedListWithPropertyNameParent.RollbackItemRelease,
          areInstancesUpdatable: true,
          areInstancesReleasable: true);
        DataStores[35] = _SortedListWithPropertyNameParents;
        onSortedListWithPropertyNameParentsFilled();

        _SortedListWithPropertyNameChilds = new DataStore<SortedListWithPropertyNameChild>(
          this,
          36,
          SortedListWithPropertyNameChild.SetKey,
          SortedListWithPropertyNameChild.RollbackItemNew,
          SortedListWithPropertyNameChild.RollbackItemStore,
          SortedListWithPropertyNameChild.RollbackItemUpdate,
          SortedListWithPropertyNameChild.RollbackItemRelease,
          areInstancesUpdatable: true,
          areInstancesReleasable: true);
        DataStores[36] = _SortedListWithPropertyNameChilds;
        onSortedListWithPropertyNameChildsFilled();

        _NeedsDictionaryClasss = new DataStore<NeedsDictionaryClass>(
          this,
          37,
          NeedsDictionaryClass.SetKey,
          NeedsDictionaryClass.RollbackItemNew,
          NeedsDictionaryClass.RollbackItemStore,
          NeedsDictionaryClass.RollbackItemUpdate,
          NeedsDictionaryClass.RollbackItemRelease,
          areInstancesUpdatable: true,
          areInstancesReleasable: true);
        DataStores[37] = _NeedsDictionaryClasss;
        onNeedsDictionaryClasssFilled();

        _NeedsDictionaryLowerCaseClasss = new DataStore<NeedsDictionaryLowerCaseClass>(
          this,
          38,
          NeedsDictionaryLowerCaseClass.SetKey,
          NeedsDictionaryLowerCaseClass.RollbackItemNew,
          NeedsDictionaryLowerCaseClass.RollbackItemStore,
          NeedsDictionaryLowerCaseClass.RollbackItemUpdate,
          NeedsDictionaryLowerCaseClass.RollbackItemRelease,
          areInstancesUpdatable: true,
          areInstancesReleasable: true);
        DataStores[38] = _NeedsDictionaryLowerCaseClasss;
        onNeedsDictionaryLowerCaseClasssFilled();

      } else {
        IsPartiallyNew = false;
        _UpdateableReleasableClasss = new DataStoreCSV<UpdateableReleasableClass>(
          this,
          0,
          csvConfig!,
          UpdateableReleasableClass.EstimatedLineLength,
          UpdateableReleasableClass.Headers,
          UpdateableReleasableClass.SetKey,
          UpdateableReleasableClass.Create,
          null,
          UpdateableReleasableClass.Update,
          UpdateableReleasableClass.Write,
          UpdateableReleasableClass.RollbackItemNew,
          UpdateableReleasableClass.RollbackItemStore,
          UpdateableReleasableClass.RollbackItemUpdate,
          UpdateableReleasableClass.RollbackItemRelease,
          areInstancesUpdatable: true,
          areInstancesReleasable: true);
        IsPartiallyNew |= _UpdateableReleasableClasss.IsNew;
        IsNew &= _UpdateableReleasableClasss.IsNew;
        DataStores[0] = _UpdateableReleasableClasss;
        onUpdateableReleasableClasssFilled();

        _UpdateableNoneReleasableClasss = new DataStoreCSV<UpdateableNoneReleasableClass>(
          this,
          1,
          csvConfig!,
          UpdateableNoneReleasableClass.EstimatedLineLength,
          UpdateableNoneReleasableClass.Headers,
          UpdateableNoneReleasableClass.SetKey,
          UpdateableNoneReleasableClass.Create,
          null,
          UpdateableNoneReleasableClass.Update,
          UpdateableNoneReleasableClass.Write,
          UpdateableNoneReleasableClass.RollbackItemNew,
          UpdateableNoneReleasableClass.RollbackItemStore,
          UpdateableNoneReleasableClass.RollbackItemUpdate,
          null,
          areInstancesUpdatable: true,
          areInstancesReleasable: false);
        IsPartiallyNew |= _UpdateableNoneReleasableClasss.IsNew;
        IsNew &= _UpdateableNoneReleasableClasss.IsNew;
        DataStores[1] = _UpdateableNoneReleasableClasss;
        onUpdateableNoneReleasableClasssFilled();

        _NoneUpdateableReleasableClasss = new DataStoreCSV<NoneUpdateableReleasableClass>(
          this,
          2,
          csvConfig!,
          NoneUpdateableReleasableClass.EstimatedLineLength,
          NoneUpdateableReleasableClass.Headers,
          NoneUpdateableReleasableClass.SetKey,
          NoneUpdateableReleasableClass.Create,
          null,
          null,
          NoneUpdateableReleasableClass.Write,
          NoneUpdateableReleasableClass.RollbackItemNew,
          NoneUpdateableReleasableClass.RollbackItemStore,
          null,
          NoneUpdateableReleasableClass.RollbackItemRelease,
          areInstancesUpdatable: false,
          areInstancesReleasable: true);
        IsPartiallyNew |= _NoneUpdateableReleasableClasss.IsNew;
        IsNew &= _NoneUpdateableReleasableClasss.IsNew;
        DataStores[2] = _NoneUpdateableReleasableClasss;
        onNoneUpdateableReleasableClasssFilled();

        _NoneUpdateableNoneReleasableClasss = new DataStoreCSV<NoneUpdateableNoneReleasableClass>(
          this,
          3,
          csvConfig!,
          NoneUpdateableNoneReleasableClass.EstimatedLineLength,
          NoneUpdateableNoneReleasableClass.Headers,
          NoneUpdateableNoneReleasableClass.SetKey,
          NoneUpdateableNoneReleasableClass.Create,
          null,
          null,
          NoneUpdateableNoneReleasableClass.Write,
          NoneUpdateableNoneReleasableClass.RollbackItemNew,
          NoneUpdateableNoneReleasableClass.RollbackItemStore,
          null,
          null,
          areInstancesUpdatable: false,
          areInstancesReleasable: false);
        IsPartiallyNew |= _NoneUpdateableNoneReleasableClasss.IsNew;
        IsNew &= _NoneUpdateableNoneReleasableClasss.IsNew;
        DataStores[3] = _NoneUpdateableNoneReleasableClasss;
        onNoneUpdateableNoneReleasableClasssFilled();

        _PluralNameNoneStandardClasses = new DataStoreCSV<PluralNameNoneStandardClass>(
          this,
          4,
          csvConfig!,
          PluralNameNoneStandardClass.EstimatedLineLength,
          PluralNameNoneStandardClass.Headers,
          PluralNameNoneStandardClass.SetKey,
          PluralNameNoneStandardClass.Create,
          null,
          PluralNameNoneStandardClass.Update,
          PluralNameNoneStandardClass.Write,
          PluralNameNoneStandardClass.RollbackItemNew,
          PluralNameNoneStandardClass.RollbackItemStore,
          PluralNameNoneStandardClass.RollbackItemUpdate,
          PluralNameNoneStandardClass.RollbackItemRelease,
          areInstancesUpdatable: true,
          areInstancesReleasable: true);
        IsPartiallyNew |= _PluralNameNoneStandardClasses.IsNew;
        IsNew &= _PluralNameNoneStandardClasses.IsNew;
        DataStores[4] = _PluralNameNoneStandardClasses;
        onPluralNameNoneStandardClassesFilled();

        _ReadonlyPropertyClasss = new DataStoreCSV<ReadonlyPropertyClass>(
          this,
          5,
          csvConfig!,
          ReadonlyPropertyClass.EstimatedLineLength,
          ReadonlyPropertyClass.Headers,
          ReadonlyPropertyClass.SetKey,
          ReadonlyPropertyClass.Create,
          null,
          ReadonlyPropertyClass.Update,
          ReadonlyPropertyClass.Write,
          ReadonlyPropertyClass.RollbackItemNew,
          ReadonlyPropertyClass.RollbackItemStore,
          ReadonlyPropertyClass.RollbackItemUpdate,
          ReadonlyPropertyClass.RollbackItemRelease,
          areInstancesUpdatable: true,
          areInstancesReleasable: true);
        IsPartiallyNew |= _ReadonlyPropertyClasss.IsNew;
        IsNew &= _ReadonlyPropertyClasss.IsNew;
        DataStores[5] = _ReadonlyPropertyClasss;
        onReadonlyPropertyClasssFilled();

        _ConditionalUnconditionalPropertyClasss = new DataStoreCSV<ConditionalUnconditionalPropertyClass>(
          this,
          6,
          csvConfig!,
          ConditionalUnconditionalPropertyClass.EstimatedLineLength,
          ConditionalUnconditionalPropertyClass.Headers,
          ConditionalUnconditionalPropertyClass.SetKey,
          ConditionalUnconditionalPropertyClass.Create,
          null,
          ConditionalUnconditionalPropertyClass.Update,
          ConditionalUnconditionalPropertyClass.Write,
          ConditionalUnconditionalPropertyClass.RollbackItemNew,
          ConditionalUnconditionalPropertyClass.RollbackItemStore,
          ConditionalUnconditionalPropertyClass.RollbackItemUpdate,
          ConditionalUnconditionalPropertyClass.RollbackItemRelease,
          areInstancesUpdatable: true,
          areInstancesReleasable: true);
        IsPartiallyNew |= _ConditionalUnconditionalPropertyClasss.IsNew;
        IsNew &= _ConditionalUnconditionalPropertyClasss.IsNew;
        DataStores[6] = _ConditionalUnconditionalPropertyClasss;
        onConditionalUnconditionalPropertyClasssFilled();

        _DefaultValuePropertyClasss = new DataStoreCSV<DefaultValuePropertyClass>(
          this,
          7,
          csvConfig!,
          DefaultValuePropertyClass.EstimatedLineLength,
          DefaultValuePropertyClass.Headers,
          DefaultValuePropertyClass.SetKey,
          DefaultValuePropertyClass.Create,
          null,
          DefaultValuePropertyClass.Update,
          DefaultValuePropertyClass.Write,
          DefaultValuePropertyClass.RollbackItemNew,
          DefaultValuePropertyClass.RollbackItemStore,
          DefaultValuePropertyClass.RollbackItemUpdate,
          DefaultValuePropertyClass.RollbackItemRelease,
          areInstancesUpdatable: true,
          areInstancesReleasable: true);
        IsPartiallyNew |= _DefaultValuePropertyClasss.IsNew;
        IsNew &= _DefaultValuePropertyClasss.IsNew;
        DataStores[7] = _DefaultValuePropertyClasss;
        onDefaultValuePropertyClasssFilled();

        _ToLowerCasePropertyClasss = new DataStoreCSV<ToLowerCasePropertyClass>(
          this,
          8,
          csvConfig!,
          ToLowerCasePropertyClass.EstimatedLineLength,
          ToLowerCasePropertyClass.Headers,
          ToLowerCasePropertyClass.SetKey,
          ToLowerCasePropertyClass.Create,
          null,
          ToLowerCasePropertyClass.Update,
          ToLowerCasePropertyClass.Write,
          ToLowerCasePropertyClass.RollbackItemNew,
          ToLowerCasePropertyClass.RollbackItemStore,
          ToLowerCasePropertyClass.RollbackItemUpdate,
          ToLowerCasePropertyClass.RollbackItemRelease,
          areInstancesUpdatable: true,
          areInstancesReleasable: true);
        IsPartiallyNew |= _ToLowerCasePropertyClasss.IsNew;
        IsNew &= _ToLowerCasePropertyClasss.IsNew;
        DataStores[8] = _ToLowerCasePropertyClasss;
        onToLowerCasePropertyClasssFilled();

        _DataModelDataTypess = new DataStoreCSV<DataModelDataTypes>(
          this,
          9,
          csvConfig!,
          DataModelDataTypes.EstimatedLineLength,
          DataModelDataTypes.Headers,
          DataModelDataTypes.SetKey,
          DataModelDataTypes.Create,
          null,
          DataModelDataTypes.Update,
          DataModelDataTypes.Write,
          DataModelDataTypes.RollbackItemNew,
          DataModelDataTypes.RollbackItemStore,
          DataModelDataTypes.RollbackItemUpdate,
          DataModelDataTypes.RollbackItemRelease,
          areInstancesUpdatable: true,
          areInstancesReleasable: true);
        IsPartiallyNew |= _DataModelDataTypess.IsNew;
        IsNew &= _DataModelDataTypess.IsNew;
        DataStores[9] = _DataModelDataTypess;
        onDataModelDataTypessFilled();

        _ClassWithEnumPropertys = new DataStoreCSV<ClassWithEnumProperty>(
          this,
          10,
          csvConfig!,
          ClassWithEnumProperty.EstimatedLineLength,
          ClassWithEnumProperty.Headers,
          ClassWithEnumProperty.SetKey,
          ClassWithEnumProperty.Create,
          null,
          ClassWithEnumProperty.Update,
          ClassWithEnumProperty.Write,
          ClassWithEnumProperty.RollbackItemNew,
          ClassWithEnumProperty.RollbackItemStore,
          ClassWithEnumProperty.RollbackItemUpdate,
          ClassWithEnumProperty.RollbackItemRelease,
          areInstancesUpdatable: true,
          areInstancesReleasable: true);
        IsPartiallyNew |= _ClassWithEnumPropertys.IsNew;
        IsNew &= _ClassWithEnumPropertys.IsNew;
        DataStores[10] = _ClassWithEnumPropertys;
        onClassWithEnumPropertysFilled();

        _Lookup_1_0_Parents = new DataStoreCSV<Lookup_1_0_Parent>(
          this,
          11,
          csvConfig!,
          Lookup_1_0_Parent.EstimatedLineLength,
          Lookup_1_0_Parent.Headers,
          Lookup_1_0_Parent.SetKey,
          Lookup_1_0_Parent.Create,
          null,
          Lookup_1_0_Parent.Update,
          Lookup_1_0_Parent.Write,
          Lookup_1_0_Parent.RollbackItemNew,
          Lookup_1_0_Parent.RollbackItemStore,
          Lookup_1_0_Parent.RollbackItemUpdate,
          null,
          areInstancesUpdatable: true,
          areInstancesReleasable: false);
        IsPartiallyNew |= _Lookup_1_0_Parents.IsNew;
        IsNew &= _Lookup_1_0_Parents.IsNew;
        DataStores[11] = _Lookup_1_0_Parents;
        onLookup_1_0_ParentsFilled();

        _Lookup_1_0_Childs = new DataStoreCSV<Lookup_1_0_Child>(
          this,
          12,
          csvConfig!,
          Lookup_1_0_Child.EstimatedLineLength,
          Lookup_1_0_Child.Headers,
          Lookup_1_0_Child.SetKey,
          Lookup_1_0_Child.Create,
          null,
          Lookup_1_0_Child.Update,
          Lookup_1_0_Child.Write,
          Lookup_1_0_Child.RollbackItemNew,
          Lookup_1_0_Child.RollbackItemStore,
          Lookup_1_0_Child.RollbackItemUpdate,
          Lookup_1_0_Child.RollbackItemRelease,
          areInstancesUpdatable: true,
          areInstancesReleasable: true);
        IsPartiallyNew |= _Lookup_1_0_Childs.IsNew;
        IsNew &= _Lookup_1_0_Childs.IsNew;
        DataStores[12] = _Lookup_1_0_Childs;
        onLookup_1_0_ChildsFilled();

        _Lookup_C_0_Childs = new DataStoreCSV<Lookup_C_0_Child>(
          this,
          13,
          csvConfig!,
          Lookup_C_0_Child.EstimatedLineLength,
          Lookup_C_0_Child.Headers,
          Lookup_C_0_Child.SetKey,
          Lookup_C_0_Child.Create,
          null,
          Lookup_C_0_Child.Update,
          Lookup_C_0_Child.Write,
          Lookup_C_0_Child.RollbackItemNew,
          Lookup_C_0_Child.RollbackItemStore,
          Lookup_C_0_Child.RollbackItemUpdate,
          Lookup_C_0_Child.RollbackItemRelease,
          areInstancesUpdatable: true,
          areInstancesReleasable: true);
        IsPartiallyNew |= _Lookup_C_0_Childs.IsNew;
        IsNew &= _Lookup_C_0_Childs.IsNew;
        DataStores[13] = _Lookup_C_0_Childs;
        onLookup_C_0_ChildsFilled();

        _Lookup_C_0_Parents = new DataStoreCSV<Lookup_C_0_Parent>(
          this,
          14,
          csvConfig!,
          Lookup_C_0_Parent.EstimatedLineLength,
          Lookup_C_0_Parent.Headers,
          Lookup_C_0_Parent.SetKey,
          Lookup_C_0_Parent.Create,
          null,
          Lookup_C_0_Parent.Update,
          Lookup_C_0_Parent.Write,
          Lookup_C_0_Parent.RollbackItemNew,
          Lookup_C_0_Parent.RollbackItemStore,
          Lookup_C_0_Parent.RollbackItemUpdate,
          null,
          areInstancesUpdatable: true,
          areInstancesReleasable: false);
        IsPartiallyNew |= _Lookup_C_0_Parents.IsNew;
        IsNew &= _Lookup_C_0_Parents.IsNew;
        DataStores[14] = _Lookup_C_0_Parents;
        onLookup_C_0_ParentsFilled();

        _SingleChild_1_C_Parents = new DataStoreCSV<SingleChild_1_C_Parent>(
          this,
          15,
          csvConfig!,
          SingleChild_1_C_Parent.EstimatedLineLength,
          SingleChild_1_C_Parent.Headers,
          SingleChild_1_C_Parent.SetKey,
          SingleChild_1_C_Parent.Create,
          null,
          SingleChild_1_C_Parent.Update,
          SingleChild_1_C_Parent.Write,
          SingleChild_1_C_Parent.RollbackItemNew,
          SingleChild_1_C_Parent.RollbackItemStore,
          SingleChild_1_C_Parent.RollbackItemUpdate,
          SingleChild_1_C_Parent.RollbackItemRelease,
          areInstancesUpdatable: true,
          areInstancesReleasable: true);
        IsPartiallyNew |= _SingleChild_1_C_Parents.IsNew;
        IsNew &= _SingleChild_1_C_Parents.IsNew;
        DataStores[15] = _SingleChild_1_C_Parents;
        onSingleChild_1_C_ParentsFilled();

        _SingleChild_1_C_Childs = new DataStoreCSV<SingleChild_1_C_Child>(
          this,
          16,
          csvConfig!,
          SingleChild_1_C_Child.EstimatedLineLength,
          SingleChild_1_C_Child.Headers,
          SingleChild_1_C_Child.SetKey,
          SingleChild_1_C_Child.Create,
          SingleChild_1_C_Child.Verify,
          SingleChild_1_C_Child.Update,
          SingleChild_1_C_Child.Write,
          SingleChild_1_C_Child.RollbackItemNew,
          SingleChild_1_C_Child.RollbackItemStore,
          SingleChild_1_C_Child.RollbackItemUpdate,
          SingleChild_1_C_Child.RollbackItemRelease,
          areInstancesUpdatable: true,
          areInstancesReleasable: true);
        IsPartiallyNew |= _SingleChild_1_C_Childs.IsNew;
        IsNew &= _SingleChild_1_C_Childs.IsNew;
        DataStores[16] = _SingleChild_1_C_Childs;
        onSingleChild_1_C_ChildsFilled();

        _SingleChild_C_C_Parents = new DataStoreCSV<SingleChild_C_C_Parent>(
          this,
          17,
          csvConfig!,
          SingleChild_C_C_Parent.EstimatedLineLength,
          SingleChild_C_C_Parent.Headers,
          SingleChild_C_C_Parent.SetKey,
          SingleChild_C_C_Parent.Create,
          null,
          SingleChild_C_C_Parent.Update,
          SingleChild_C_C_Parent.Write,
          SingleChild_C_C_Parent.RollbackItemNew,
          SingleChild_C_C_Parent.RollbackItemStore,
          SingleChild_C_C_Parent.RollbackItemUpdate,
          SingleChild_C_C_Parent.RollbackItemRelease,
          areInstancesUpdatable: true,
          areInstancesReleasable: true);
        IsPartiallyNew |= _SingleChild_C_C_Parents.IsNew;
        IsNew &= _SingleChild_C_C_Parents.IsNew;
        DataStores[17] = _SingleChild_C_C_Parents;
        onSingleChild_C_C_ParentsFilled();

        _SingleChild_C_C_Childs = new DataStoreCSV<SingleChild_C_C_Child>(
          this,
          18,
          csvConfig!,
          SingleChild_C_C_Child.EstimatedLineLength,
          SingleChild_C_C_Child.Headers,
          SingleChild_C_C_Child.SetKey,
          SingleChild_C_C_Child.Create,
          SingleChild_C_C_Child.Verify,
          SingleChild_C_C_Child.Update,
          SingleChild_C_C_Child.Write,
          SingleChild_C_C_Child.RollbackItemNew,
          SingleChild_C_C_Child.RollbackItemStore,
          SingleChild_C_C_Child.RollbackItemUpdate,
          SingleChild_C_C_Child.RollbackItemRelease,
          areInstancesUpdatable: true,
          areInstancesReleasable: true);
        IsPartiallyNew |= _SingleChild_C_C_Childs.IsNew;
        IsNew &= _SingleChild_C_C_Childs.IsNew;
        DataStores[18] = _SingleChild_C_C_Childs;
        onSingleChild_C_C_ChildsFilled();

        _List_1_MC_Parents = new DataStoreCSV<List_1_MC_Parent>(
          this,
          19,
          csvConfig!,
          List_1_MC_Parent.EstimatedLineLength,
          List_1_MC_Parent.Headers,
          List_1_MC_Parent.SetKey,
          List_1_MC_Parent.Create,
          null,
          List_1_MC_Parent.Update,
          List_1_MC_Parent.Write,
          List_1_MC_Parent.RollbackItemNew,
          List_1_MC_Parent.RollbackItemStore,
          List_1_MC_Parent.RollbackItemUpdate,
          List_1_MC_Parent.RollbackItemRelease,
          areInstancesUpdatable: true,
          areInstancesReleasable: true);
        IsPartiallyNew |= _List_1_MC_Parents.IsNew;
        IsNew &= _List_1_MC_Parents.IsNew;
        DataStores[19] = _List_1_MC_Parents;
        onList_1_MC_ParentsFilled();

        _List_1_MC_Childs = new DataStoreCSV<List_1_MC_Child>(
          this,
          20,
          csvConfig!,
          List_1_MC_Child.EstimatedLineLength,
          List_1_MC_Child.Headers,
          List_1_MC_Child.SetKey,
          List_1_MC_Child.Create,
          List_1_MC_Child.Verify,
          List_1_MC_Child.Update,
          List_1_MC_Child.Write,
          List_1_MC_Child.RollbackItemNew,
          List_1_MC_Child.RollbackItemStore,
          List_1_MC_Child.RollbackItemUpdate,
          List_1_MC_Child.RollbackItemRelease,
          areInstancesUpdatable: true,
          areInstancesReleasable: true);
        IsPartiallyNew |= _List_1_MC_Childs.IsNew;
        IsNew &= _List_1_MC_Childs.IsNew;
        DataStores[20] = _List_1_MC_Childs;
        onList_1_MC_ChildsFilled();

        _List_C_MC_Parents = new DataStoreCSV<List_C_MC_Parent>(
          this,
          21,
          csvConfig!,
          List_C_MC_Parent.EstimatedLineLength,
          List_C_MC_Parent.Headers,
          List_C_MC_Parent.SetKey,
          List_C_MC_Parent.Create,
          null,
          List_C_MC_Parent.Update,
          List_C_MC_Parent.Write,
          List_C_MC_Parent.RollbackItemNew,
          List_C_MC_Parent.RollbackItemStore,
          List_C_MC_Parent.RollbackItemUpdate,
          List_C_MC_Parent.RollbackItemRelease,
          areInstancesUpdatable: true,
          areInstancesReleasable: true);
        IsPartiallyNew |= _List_C_MC_Parents.IsNew;
        IsNew &= _List_C_MC_Parents.IsNew;
        DataStores[21] = _List_C_MC_Parents;
        onList_C_MC_ParentsFilled();

        _List_C_MC_Childs = new DataStoreCSV<List_C_MC_Child>(
          this,
          22,
          csvConfig!,
          List_C_MC_Child.EstimatedLineLength,
          List_C_MC_Child.Headers,
          List_C_MC_Child.SetKey,
          List_C_MC_Child.Create,
          List_C_MC_Child.Verify,
          List_C_MC_Child.Update,
          List_C_MC_Child.Write,
          List_C_MC_Child.RollbackItemNew,
          List_C_MC_Child.RollbackItemStore,
          List_C_MC_Child.RollbackItemUpdate,
          List_C_MC_Child.RollbackItemRelease,
          areInstancesUpdatable: true,
          areInstancesReleasable: true);
        IsPartiallyNew |= _List_C_MC_Childs.IsNew;
        IsNew &= _List_C_MC_Childs.IsNew;
        DataStores[22] = _List_C_MC_Childs;
        onList_C_MC_ChildsFilled();

        _ListWithPropertyNameParents = new DataStoreCSV<ListWithPropertyNameParent>(
          this,
          23,
          csvConfig!,
          ListWithPropertyNameParent.EstimatedLineLength,
          ListWithPropertyNameParent.Headers,
          ListWithPropertyNameParent.SetKey,
          ListWithPropertyNameParent.Create,
          null,
          ListWithPropertyNameParent.Update,
          ListWithPropertyNameParent.Write,
          ListWithPropertyNameParent.RollbackItemNew,
          ListWithPropertyNameParent.RollbackItemStore,
          ListWithPropertyNameParent.RollbackItemUpdate,
          ListWithPropertyNameParent.RollbackItemRelease,
          areInstancesUpdatable: true,
          areInstancesReleasable: true);
        IsPartiallyNew |= _ListWithPropertyNameParents.IsNew;
        IsNew &= _ListWithPropertyNameParents.IsNew;
        DataStores[23] = _ListWithPropertyNameParents;
        onListWithPropertyNameParentsFilled();

        _ListWithPropertyNameChilds = new DataStoreCSV<ListWithPropertyNameChild>(
          this,
          24,
          csvConfig!,
          ListWithPropertyNameChild.EstimatedLineLength,
          ListWithPropertyNameChild.Headers,
          ListWithPropertyNameChild.SetKey,
          ListWithPropertyNameChild.Create,
          ListWithPropertyNameChild.Verify,
          ListWithPropertyNameChild.Update,
          ListWithPropertyNameChild.Write,
          ListWithPropertyNameChild.RollbackItemNew,
          ListWithPropertyNameChild.RollbackItemStore,
          ListWithPropertyNameChild.RollbackItemUpdate,
          ListWithPropertyNameChild.RollbackItemRelease,
          areInstancesUpdatable: true,
          areInstancesReleasable: true);
        IsPartiallyNew |= _ListWithPropertyNameChilds.IsNew;
        IsNew &= _ListWithPropertyNameChilds.IsNew;
        DataStores[24] = _ListWithPropertyNameChilds;
        onListWithPropertyNameChildsFilled();

        _Dictionary_1_MC_Parents = new DataStoreCSV<Dictionary_1_MC_Parent>(
          this,
          25,
          csvConfig!,
          Dictionary_1_MC_Parent.EstimatedLineLength,
          Dictionary_1_MC_Parent.Headers,
          Dictionary_1_MC_Parent.SetKey,
          Dictionary_1_MC_Parent.Create,
          null,
          Dictionary_1_MC_Parent.Update,
          Dictionary_1_MC_Parent.Write,
          Dictionary_1_MC_Parent.RollbackItemNew,
          Dictionary_1_MC_Parent.RollbackItemStore,
          Dictionary_1_MC_Parent.RollbackItemUpdate,
          Dictionary_1_MC_Parent.RollbackItemRelease,
          areInstancesUpdatable: true,
          areInstancesReleasable: true);
        IsPartiallyNew |= _Dictionary_1_MC_Parents.IsNew;
        IsNew &= _Dictionary_1_MC_Parents.IsNew;
        DataStores[25] = _Dictionary_1_MC_Parents;
        onDictionary_1_MC_ParentsFilled();

        _Dictionary_1_MC_Childs = new DataStoreCSV<Dictionary_1_MC_Child>(
          this,
          26,
          csvConfig!,
          Dictionary_1_MC_Child.EstimatedLineLength,
          Dictionary_1_MC_Child.Headers,
          Dictionary_1_MC_Child.SetKey,
          Dictionary_1_MC_Child.Create,
          Dictionary_1_MC_Child.Verify,
          Dictionary_1_MC_Child.Update,
          Dictionary_1_MC_Child.Write,
          Dictionary_1_MC_Child.RollbackItemNew,
          Dictionary_1_MC_Child.RollbackItemStore,
          Dictionary_1_MC_Child.RollbackItemUpdate,
          Dictionary_1_MC_Child.RollbackItemRelease,
          areInstancesUpdatable: true,
          areInstancesReleasable: true);
        IsPartiallyNew |= _Dictionary_1_MC_Childs.IsNew;
        IsNew &= _Dictionary_1_MC_Childs.IsNew;
        DataStores[26] = _Dictionary_1_MC_Childs;
        onDictionary_1_MC_ChildsFilled();

        _Dictionary_C_MC_Parents = new DataStoreCSV<Dictionary_C_MC_Parent>(
          this,
          27,
          csvConfig!,
          Dictionary_C_MC_Parent.EstimatedLineLength,
          Dictionary_C_MC_Parent.Headers,
          Dictionary_C_MC_Parent.SetKey,
          Dictionary_C_MC_Parent.Create,
          null,
          Dictionary_C_MC_Parent.Update,
          Dictionary_C_MC_Parent.Write,
          Dictionary_C_MC_Parent.RollbackItemNew,
          Dictionary_C_MC_Parent.RollbackItemStore,
          Dictionary_C_MC_Parent.RollbackItemUpdate,
          Dictionary_C_MC_Parent.RollbackItemRelease,
          areInstancesUpdatable: true,
          areInstancesReleasable: true);
        IsPartiallyNew |= _Dictionary_C_MC_Parents.IsNew;
        IsNew &= _Dictionary_C_MC_Parents.IsNew;
        DataStores[27] = _Dictionary_C_MC_Parents;
        onDictionary_C_MC_ParentsFilled();

        _Dictionary_C_MC_Childs = new DataStoreCSV<Dictionary_C_MC_Child>(
          this,
          28,
          csvConfig!,
          Dictionary_C_MC_Child.EstimatedLineLength,
          Dictionary_C_MC_Child.Headers,
          Dictionary_C_MC_Child.SetKey,
          Dictionary_C_MC_Child.Create,
          Dictionary_C_MC_Child.Verify,
          Dictionary_C_MC_Child.Update,
          Dictionary_C_MC_Child.Write,
          Dictionary_C_MC_Child.RollbackItemNew,
          Dictionary_C_MC_Child.RollbackItemStore,
          Dictionary_C_MC_Child.RollbackItemUpdate,
          Dictionary_C_MC_Child.RollbackItemRelease,
          areInstancesUpdatable: true,
          areInstancesReleasable: true);
        IsPartiallyNew |= _Dictionary_C_MC_Childs.IsNew;
        IsNew &= _Dictionary_C_MC_Childs.IsNew;
        DataStores[28] = _Dictionary_C_MC_Childs;
        onDictionary_C_MC_ChildsFilled();

        _DictionaryWithPropertyNameParents = new DataStoreCSV<DictionaryWithPropertyNameParent>(
          this,
          29,
          csvConfig!,
          DictionaryWithPropertyNameParent.EstimatedLineLength,
          DictionaryWithPropertyNameParent.Headers,
          DictionaryWithPropertyNameParent.SetKey,
          DictionaryWithPropertyNameParent.Create,
          null,
          DictionaryWithPropertyNameParent.Update,
          DictionaryWithPropertyNameParent.Write,
          DictionaryWithPropertyNameParent.RollbackItemNew,
          DictionaryWithPropertyNameParent.RollbackItemStore,
          DictionaryWithPropertyNameParent.RollbackItemUpdate,
          DictionaryWithPropertyNameParent.RollbackItemRelease,
          areInstancesUpdatable: true,
          areInstancesReleasable: true);
        IsPartiallyNew |= _DictionaryWithPropertyNameParents.IsNew;
        IsNew &= _DictionaryWithPropertyNameParents.IsNew;
        DataStores[29] = _DictionaryWithPropertyNameParents;
        onDictionaryWithPropertyNameParentsFilled();

        _DictionaryWithPropertyNameChilds = new DataStoreCSV<DictionaryWithPropertyNameChild>(
          this,
          30,
          csvConfig!,
          DictionaryWithPropertyNameChild.EstimatedLineLength,
          DictionaryWithPropertyNameChild.Headers,
          DictionaryWithPropertyNameChild.SetKey,
          DictionaryWithPropertyNameChild.Create,
          DictionaryWithPropertyNameChild.Verify,
          DictionaryWithPropertyNameChild.Update,
          DictionaryWithPropertyNameChild.Write,
          DictionaryWithPropertyNameChild.RollbackItemNew,
          DictionaryWithPropertyNameChild.RollbackItemStore,
          DictionaryWithPropertyNameChild.RollbackItemUpdate,
          DictionaryWithPropertyNameChild.RollbackItemRelease,
          areInstancesUpdatable: true,
          areInstancesReleasable: true);
        IsPartiallyNew |= _DictionaryWithPropertyNameChilds.IsNew;
        IsNew &= _DictionaryWithPropertyNameChilds.IsNew;
        DataStores[30] = _DictionaryWithPropertyNameChilds;
        onDictionaryWithPropertyNameChildsFilled();

        _SortedList_1_MC_Parents = new DataStoreCSV<SortedList_1_MC_Parent>(
          this,
          31,
          csvConfig!,
          SortedList_1_MC_Parent.EstimatedLineLength,
          SortedList_1_MC_Parent.Headers,
          SortedList_1_MC_Parent.SetKey,
          SortedList_1_MC_Parent.Create,
          null,
          SortedList_1_MC_Parent.Update,
          SortedList_1_MC_Parent.Write,
          SortedList_1_MC_Parent.RollbackItemNew,
          SortedList_1_MC_Parent.RollbackItemStore,
          SortedList_1_MC_Parent.RollbackItemUpdate,
          SortedList_1_MC_Parent.RollbackItemRelease,
          areInstancesUpdatable: true,
          areInstancesReleasable: true);
        IsPartiallyNew |= _SortedList_1_MC_Parents.IsNew;
        IsNew &= _SortedList_1_MC_Parents.IsNew;
        DataStores[31] = _SortedList_1_MC_Parents;
        onSortedList_1_MC_ParentsFilled();

        _SortedList_1_MC_Childs = new DataStoreCSV<SortedList_1_MC_Child>(
          this,
          32,
          csvConfig!,
          SortedList_1_MC_Child.EstimatedLineLength,
          SortedList_1_MC_Child.Headers,
          SortedList_1_MC_Child.SetKey,
          SortedList_1_MC_Child.Create,
          SortedList_1_MC_Child.Verify,
          SortedList_1_MC_Child.Update,
          SortedList_1_MC_Child.Write,
          SortedList_1_MC_Child.RollbackItemNew,
          SortedList_1_MC_Child.RollbackItemStore,
          SortedList_1_MC_Child.RollbackItemUpdate,
          SortedList_1_MC_Child.RollbackItemRelease,
          areInstancesUpdatable: true,
          areInstancesReleasable: true);
        IsPartiallyNew |= _SortedList_1_MC_Childs.IsNew;
        IsNew &= _SortedList_1_MC_Childs.IsNew;
        DataStores[32] = _SortedList_1_MC_Childs;
        onSortedList_1_MC_ChildsFilled();

        _SortedList_C_MC_Parents = new DataStoreCSV<SortedList_C_MC_Parent>(
          this,
          33,
          csvConfig!,
          SortedList_C_MC_Parent.EstimatedLineLength,
          SortedList_C_MC_Parent.Headers,
          SortedList_C_MC_Parent.SetKey,
          SortedList_C_MC_Parent.Create,
          null,
          SortedList_C_MC_Parent.Update,
          SortedList_C_MC_Parent.Write,
          SortedList_C_MC_Parent.RollbackItemNew,
          SortedList_C_MC_Parent.RollbackItemStore,
          SortedList_C_MC_Parent.RollbackItemUpdate,
          SortedList_C_MC_Parent.RollbackItemRelease,
          areInstancesUpdatable: true,
          areInstancesReleasable: true);
        IsPartiallyNew |= _SortedList_C_MC_Parents.IsNew;
        IsNew &= _SortedList_C_MC_Parents.IsNew;
        DataStores[33] = _SortedList_C_MC_Parents;
        onSortedList_C_MC_ParentsFilled();

        _SortedList_C_MC_Childs = new DataStoreCSV<SortedList_C_MC_Child>(
          this,
          34,
          csvConfig!,
          SortedList_C_MC_Child.EstimatedLineLength,
          SortedList_C_MC_Child.Headers,
          SortedList_C_MC_Child.SetKey,
          SortedList_C_MC_Child.Create,
          SortedList_C_MC_Child.Verify,
          SortedList_C_MC_Child.Update,
          SortedList_C_MC_Child.Write,
          SortedList_C_MC_Child.RollbackItemNew,
          SortedList_C_MC_Child.RollbackItemStore,
          SortedList_C_MC_Child.RollbackItemUpdate,
          SortedList_C_MC_Child.RollbackItemRelease,
          areInstancesUpdatable: true,
          areInstancesReleasable: true);
        IsPartiallyNew |= _SortedList_C_MC_Childs.IsNew;
        IsNew &= _SortedList_C_MC_Childs.IsNew;
        DataStores[34] = _SortedList_C_MC_Childs;
        onSortedList_C_MC_ChildsFilled();

        _SortedListWithPropertyNameParents = new DataStoreCSV<SortedListWithPropertyNameParent>(
          this,
          35,
          csvConfig!,
          SortedListWithPropertyNameParent.EstimatedLineLength,
          SortedListWithPropertyNameParent.Headers,
          SortedListWithPropertyNameParent.SetKey,
          SortedListWithPropertyNameParent.Create,
          null,
          SortedListWithPropertyNameParent.Update,
          SortedListWithPropertyNameParent.Write,
          SortedListWithPropertyNameParent.RollbackItemNew,
          SortedListWithPropertyNameParent.RollbackItemStore,
          SortedListWithPropertyNameParent.RollbackItemUpdate,
          SortedListWithPropertyNameParent.RollbackItemRelease,
          areInstancesUpdatable: true,
          areInstancesReleasable: true);
        IsPartiallyNew |= _SortedListWithPropertyNameParents.IsNew;
        IsNew &= _SortedListWithPropertyNameParents.IsNew;
        DataStores[35] = _SortedListWithPropertyNameParents;
        onSortedListWithPropertyNameParentsFilled();

        _SortedListWithPropertyNameChilds = new DataStoreCSV<SortedListWithPropertyNameChild>(
          this,
          36,
          csvConfig!,
          SortedListWithPropertyNameChild.EstimatedLineLength,
          SortedListWithPropertyNameChild.Headers,
          SortedListWithPropertyNameChild.SetKey,
          SortedListWithPropertyNameChild.Create,
          SortedListWithPropertyNameChild.Verify,
          SortedListWithPropertyNameChild.Update,
          SortedListWithPropertyNameChild.Write,
          SortedListWithPropertyNameChild.RollbackItemNew,
          SortedListWithPropertyNameChild.RollbackItemStore,
          SortedListWithPropertyNameChild.RollbackItemUpdate,
          SortedListWithPropertyNameChild.RollbackItemRelease,
          areInstancesUpdatable: true,
          areInstancesReleasable: true);
        IsPartiallyNew |= _SortedListWithPropertyNameChilds.IsNew;
        IsNew &= _SortedListWithPropertyNameChilds.IsNew;
        DataStores[36] = _SortedListWithPropertyNameChilds;
        onSortedListWithPropertyNameChildsFilled();

        _NeedsDictionaryClasss = new DataStoreCSV<NeedsDictionaryClass>(
          this,
          37,
          csvConfig!,
          NeedsDictionaryClass.EstimatedLineLength,
          NeedsDictionaryClass.Headers,
          NeedsDictionaryClass.SetKey,
          NeedsDictionaryClass.Create,
          null,
          NeedsDictionaryClass.Update,
          NeedsDictionaryClass.Write,
          NeedsDictionaryClass.RollbackItemNew,
          NeedsDictionaryClass.RollbackItemStore,
          NeedsDictionaryClass.RollbackItemUpdate,
          NeedsDictionaryClass.RollbackItemRelease,
          areInstancesUpdatable: true,
          areInstancesReleasable: true);
        IsPartiallyNew |= _NeedsDictionaryClasss.IsNew;
        IsNew &= _NeedsDictionaryClasss.IsNew;
        DataStores[37] = _NeedsDictionaryClasss;
        onNeedsDictionaryClasssFilled();

        _NeedsDictionaryLowerCaseClasss = new DataStoreCSV<NeedsDictionaryLowerCaseClass>(
          this,
          38,
          csvConfig!,
          NeedsDictionaryLowerCaseClass.EstimatedLineLength,
          NeedsDictionaryLowerCaseClass.Headers,
          NeedsDictionaryLowerCaseClass.SetKey,
          NeedsDictionaryLowerCaseClass.Create,
          null,
          NeedsDictionaryLowerCaseClass.Update,
          NeedsDictionaryLowerCaseClass.Write,
          NeedsDictionaryLowerCaseClass.RollbackItemNew,
          NeedsDictionaryLowerCaseClass.RollbackItemStore,
          NeedsDictionaryLowerCaseClass.RollbackItemUpdate,
          NeedsDictionaryLowerCaseClass.RollbackItemRelease,
          areInstancesUpdatable: true,
          areInstancesReleasable: true);
        IsPartiallyNew |= _NeedsDictionaryLowerCaseClasss.IsNew;
        IsNew &= _NeedsDictionaryLowerCaseClasss.IsNew;
        DataStores[38] = _NeedsDictionaryLowerCaseClasss;
        onNeedsDictionaryLowerCaseClasssFilled();

      }
      onConstructed();
      IsInitialised = true;
    }

    /// <summary>}
    /// Called at beginning of constructor
    /// </summary>}
    partial void onConstructing(string? backupResult);

    /// <summary>}
    /// Called at end of constructor
    /// </summary>}
    partial void onConstructed();

    /// <summary>}
    /// Called once the data for UpdateableReleasableClasss is read.
    /// </summary>}
    partial void onUpdateableReleasableClasssFilled();

    /// <summary>}
    /// Called once the data for UpdateableNoneReleasableClasss is read.
    /// </summary>}
    partial void onUpdateableNoneReleasableClasssFilled();

    /// <summary>}
    /// Called once the data for NoneUpdateableReleasableClasss is read.
    /// </summary>}
    partial void onNoneUpdateableReleasableClasssFilled();

    /// <summary>}
    /// Called once the data for NoneUpdateableNoneReleasableClasss is read.
    /// </summary>}
    partial void onNoneUpdateableNoneReleasableClasssFilled();

    /// <summary>}
    /// Called once the data for PluralNameNoneStandardClasses is read.
    /// </summary>}
    partial void onPluralNameNoneStandardClassesFilled();

    /// <summary>}
    /// Called once the data for ReadonlyPropertyClasss is read.
    /// </summary>}
    partial void onReadonlyPropertyClasssFilled();

    /// <summary>}
    /// Called once the data for ConditionalUnconditionalPropertyClasss is read.
    /// </summary>}
    partial void onConditionalUnconditionalPropertyClasssFilled();

    /// <summary>}
    /// Called once the data for DefaultValuePropertyClasss is read.
    /// </summary>}
    partial void onDefaultValuePropertyClasssFilled();

    /// <summary>}
    /// Called once the data for ToLowerCasePropertyClasss is read.
    /// </summary>}
    partial void onToLowerCasePropertyClasssFilled();

    /// <summary>}
    /// Called once the data for DataModelDataTypess is read.
    /// </summary>}
    partial void onDataModelDataTypessFilled();

    /// <summary>}
    /// Called once the data for ClassWithEnumPropertys is read.
    /// </summary>}
    partial void onClassWithEnumPropertysFilled();

    /// <summary>}
    /// Called once the data for Lookup_1_0_Parents is read.
    /// </summary>}
    partial void onLookup_1_0_ParentsFilled();

    /// <summary>}
    /// Called once the data for Lookup_1_0_Childs is read.
    /// </summary>}
    partial void onLookup_1_0_ChildsFilled();

    /// <summary>}
    /// Called once the data for Lookup_C_0_Childs is read.
    /// </summary>}
    partial void onLookup_C_0_ChildsFilled();

    /// <summary>}
    /// Called once the data for Lookup_C_0_Parents is read.
    /// </summary>}
    partial void onLookup_C_0_ParentsFilled();

    /// <summary>}
    /// Called once the data for SingleChild_1_C_Parents is read.
    /// </summary>}
    partial void onSingleChild_1_C_ParentsFilled();

    /// <summary>}
    /// Called once the data for SingleChild_1_C_Childs is read.
    /// </summary>}
    partial void onSingleChild_1_C_ChildsFilled();

    /// <summary>}
    /// Called once the data for SingleChild_C_C_Parents is read.
    /// </summary>}
    partial void onSingleChild_C_C_ParentsFilled();

    /// <summary>}
    /// Called once the data for SingleChild_C_C_Childs is read.
    /// </summary>}
    partial void onSingleChild_C_C_ChildsFilled();

    /// <summary>}
    /// Called once the data for List_1_MC_Parents is read.
    /// </summary>}
    partial void onList_1_MC_ParentsFilled();

    /// <summary>}
    /// Called once the data for List_1_MC_Childs is read.
    /// </summary>}
    partial void onList_1_MC_ChildsFilled();

    /// <summary>}
    /// Called once the data for List_C_MC_Parents is read.
    /// </summary>}
    partial void onList_C_MC_ParentsFilled();

    /// <summary>}
    /// Called once the data for List_C_MC_Childs is read.
    /// </summary>}
    partial void onList_C_MC_ChildsFilled();

    /// <summary>}
    /// Called once the data for ListWithPropertyNameParents is read.
    /// </summary>}
    partial void onListWithPropertyNameParentsFilled();

    /// <summary>}
    /// Called once the data for ListWithPropertyNameChilds is read.
    /// </summary>}
    partial void onListWithPropertyNameChildsFilled();

    /// <summary>}
    /// Called once the data for Dictionary_1_MC_Parents is read.
    /// </summary>}
    partial void onDictionary_1_MC_ParentsFilled();

    /// <summary>}
    /// Called once the data for Dictionary_1_MC_Childs is read.
    /// </summary>}
    partial void onDictionary_1_MC_ChildsFilled();

    /// <summary>}
    /// Called once the data for Dictionary_C_MC_Parents is read.
    /// </summary>}
    partial void onDictionary_C_MC_ParentsFilled();

    /// <summary>}
    /// Called once the data for Dictionary_C_MC_Childs is read.
    /// </summary>}
    partial void onDictionary_C_MC_ChildsFilled();

    /// <summary>}
    /// Called once the data for DictionaryWithPropertyNameParents is read.
    /// </summary>}
    partial void onDictionaryWithPropertyNameParentsFilled();

    /// <summary>}
    /// Called once the data for DictionaryWithPropertyNameChilds is read.
    /// </summary>}
    partial void onDictionaryWithPropertyNameChildsFilled();

    /// <summary>}
    /// Called once the data for SortedList_1_MC_Parents is read.
    /// </summary>}
    partial void onSortedList_1_MC_ParentsFilled();

    /// <summary>}
    /// Called once the data for SortedList_1_MC_Childs is read.
    /// </summary>}
    partial void onSortedList_1_MC_ChildsFilled();

    /// <summary>}
    /// Called once the data for SortedList_C_MC_Parents is read.
    /// </summary>}
    partial void onSortedList_C_MC_ParentsFilled();

    /// <summary>}
    /// Called once the data for SortedList_C_MC_Childs is read.
    /// </summary>}
    partial void onSortedList_C_MC_ChildsFilled();

    /// <summary>}
    /// Called once the data for SortedListWithPropertyNameParents is read.
    /// </summary>}
    partial void onSortedListWithPropertyNameParentsFilled();

    /// <summary>}
    /// Called once the data for SortedListWithPropertyNameChilds is read.
    /// </summary>}
    partial void onSortedListWithPropertyNameChildsFilled();

    /// <summary>}
    /// Called once the data for NeedsDictionaryClasss is read.
    /// </summary>}
    partial void onNeedsDictionaryClasssFilled();

    /// <summary>}
    /// Called once the data for NeedsDictionaryLowerCaseClasss is read.
    /// </summary>}
    partial void onNeedsDictionaryLowerCaseClasssFilled();
    #endregion


    #region Overrides
    //      ---------

    internal new void AddTransaction(TransactionItem transactionItem) {
      base.AddTransaction(transactionItem);
    }


    protected override void Dispose(bool disposing) {
      if (disposing) {
        onDispose();
        _NeedsDictionaryLowerCaseClasss?.Dispose();
        _NeedsDictionaryLowerCaseClasss = null!;
        _NeedsDictionaryLowerCaseClasssByNameLower = null!;
        _NeedsDictionaryClasss?.Dispose();
        _NeedsDictionaryClasss = null!;
        _NeedsDictionaryClasssByName = null!;
        _SortedListWithPropertyNameChilds?.Dispose();
        _SortedListWithPropertyNameChilds = null!;
        _SortedListWithPropertyNameParents?.Dispose();
        _SortedListWithPropertyNameParents = null!;
        _SortedList_C_MC_Childs?.Dispose();
        _SortedList_C_MC_Childs = null!;
        _SortedList_C_MC_Parents?.Dispose();
        _SortedList_C_MC_Parents = null!;
        _SortedList_1_MC_Childs?.Dispose();
        _SortedList_1_MC_Childs = null!;
        _SortedList_1_MC_Parents?.Dispose();
        _SortedList_1_MC_Parents = null!;
        _DictionaryWithPropertyNameChilds?.Dispose();
        _DictionaryWithPropertyNameChilds = null!;
        _DictionaryWithPropertyNameParents?.Dispose();
        _DictionaryWithPropertyNameParents = null!;
        _Dictionary_C_MC_Childs?.Dispose();
        _Dictionary_C_MC_Childs = null!;
        _Dictionary_C_MC_Parents?.Dispose();
        _Dictionary_C_MC_Parents = null!;
        _Dictionary_1_MC_Childs?.Dispose();
        _Dictionary_1_MC_Childs = null!;
        _Dictionary_1_MC_Parents?.Dispose();
        _Dictionary_1_MC_Parents = null!;
        _ListWithPropertyNameChilds?.Dispose();
        _ListWithPropertyNameChilds = null!;
        _ListWithPropertyNameParents?.Dispose();
        _ListWithPropertyNameParents = null!;
        _List_C_MC_Childs?.Dispose();
        _List_C_MC_Childs = null!;
        _List_C_MC_Parents?.Dispose();
        _List_C_MC_Parents = null!;
        _List_1_MC_Childs?.Dispose();
        _List_1_MC_Childs = null!;
        _List_1_MC_Parents?.Dispose();
        _List_1_MC_Parents = null!;
        _SingleChild_C_C_Childs?.Dispose();
        _SingleChild_C_C_Childs = null!;
        _SingleChild_C_C_Parents?.Dispose();
        _SingleChild_C_C_Parents = null!;
        _SingleChild_1_C_Childs?.Dispose();
        _SingleChild_1_C_Childs = null!;
        _SingleChild_1_C_Parents?.Dispose();
        _SingleChild_1_C_Parents = null!;
        _Lookup_C_0_Parents?.Dispose();
        _Lookup_C_0_Parents = null!;
        _Lookup_C_0_Childs?.Dispose();
        _Lookup_C_0_Childs = null!;
        _Lookup_1_0_Childs?.Dispose();
        _Lookup_1_0_Childs = null!;
        _Lookup_1_0_Parents?.Dispose();
        _Lookup_1_0_Parents = null!;
        _ClassWithEnumPropertys?.Dispose();
        _ClassWithEnumPropertys = null!;
        _DataModelDataTypess?.Dispose();
        _DataModelDataTypess = null!;
        _ToLowerCasePropertyClasss?.Dispose();
        _ToLowerCasePropertyClasss = null!;
        _DefaultValuePropertyClasss?.Dispose();
        _DefaultValuePropertyClasss = null!;
        _ConditionalUnconditionalPropertyClasss?.Dispose();
        _ConditionalUnconditionalPropertyClasss = null!;
        _ReadonlyPropertyClasss?.Dispose();
        _ReadonlyPropertyClasss = null!;
        _PluralNameNoneStandardClasses?.Dispose();
        _PluralNameNoneStandardClasses = null!;
        _NoneUpdateableNoneReleasableClasss?.Dispose();
        _NoneUpdateableNoneReleasableClasss = null!;
        _NoneUpdateableReleasableClasss?.Dispose();
        _NoneUpdateableReleasableClasss = null!;
        _UpdateableNoneReleasableClasss?.Dispose();
        _UpdateableNoneReleasableClasss = null!;
        _UpdateableReleasableClasss?.Dispose();
        _UpdateableReleasableClasss = null!;
        data = null;
      }
      base.Dispose(disposing);
    }

    /// <summary>}
    /// Called before storageDirectories get disposed.
    /// </summary>}
    partial void onDispose();
    #endregion


    #region Methods
    //      -------

    #endregion

  }
}

