//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by StorageClassGenerator
//
//     Do not change code in this file, it will get lost when the file gets 
//     auto generated again. Write your code into List1_MCParent.cs.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
using System;
using System.Collections.Generic;
using System.Threading;
using StorageLib;


namespace DataModelSamples  {


  public partial class List1_MCParent: IStorageItemGeneric<List1_MCParent> {

    #region Properties
    //      ----------

    /// <summary>
    /// Unique identifier for List1_MCParent. Gets set once List1_MCParent gets added to DC.Data.
    /// </summary>
    public int Key { get; private set; }
    internal static void SetKey(IStorageItem list1_MCParent, int key, bool _) {
      ((List1_MCParent)list1_MCParent).Key = key;
    }


    public string Name { get; private set; }


    public IReadOnlyList<List1_MCChild> Children => children;
    readonly List<List1_MCChild> children;


    /// <summary>
    /// Headers written to first line in CSV file
    /// </summary>
    internal static readonly string[] Headers = {"Key", "Name"};


    /// <summary>
    /// None existing List1_MCParent
    /// </summary>
    internal static List1_MCParent NoList1_MCParent = new List1_MCParent("NoName", isStoring: false);
    #endregion


    #region Events
    //      ------

    /// <summary>
    /// Content of List1_MCParent has changed. Gets only raised for changes occurring after loading DC.Data with previously stored data.
    /// </summary>
    public event Action</*old*/List1_MCParent, /*new*/List1_MCParent>? HasChanged;
    #endregion


    #region Constructors
    //      ------------

    /// <summary>
    /// List1_MCParent Constructor. If isStoring is true, adds List1_MCParent to DC.Data.List1_MCParents.
    /// </summary>
    public List1_MCParent(string name, bool isStoring = true) {
      Key = StorageExtensions.NoKey;
      Name = name;
      children = new List<List1_MCChild>();
      onConstruct();
      if (DC.Data.IsTransaction) {
        DC.Data.AddTransaction(new TransactionItem(1,TransactionActivityEnum.New, Key, this));
      }

      if (isStoring) {
        Store();
      }
    }
    partial void onConstruct();


    /// <summary>
    /// Cloning constructor. It will copy all data from original except any collection (children).
    /// </summary>
    #pragma warning disable CS8618 // Children collections are uninitialized.
    public List1_MCParent(List1_MCParent original) {
    #pragma warning restore CS8618 //
      Key = StorageExtensions.NoKey;
      Name = original.Name;
      onCloned(this);
    }
    partial void onCloned(List1_MCParent clone);


    /// <summary>
    /// Constructor for List1_MCParent read from CSV file
    /// </summary>
    private List1_MCParent(int key, CsvReader csvReader){
      Key = key;
      Name = csvReader.ReadString();
      children = new List<List1_MCChild>();
      onCsvConstruct();
    }
    partial void onCsvConstruct();


    /// <summary>
    /// New List1_MCParent read from CSV file
    /// </summary>
    internal static List1_MCParent Create(int key, CsvReader csvReader) {
      return new List1_MCParent(key, csvReader);
    }
    #endregion


    #region Methods
    //      -------

    /// <summary>
    /// Adds List1_MCParent to DC.Data.List1_MCParents.<br/>
    /// Throws an Exception when List1_MCParent is already stored.
    /// </summary>
    public void Store() {
      if (Key>=0) {
        throw new Exception($"List1_MCParent cannot be stored again in DC.Data, key {Key} is greater equal 0." + Environment.NewLine + ToString());
      }

      var isCancelled = false;
      onStoring(ref isCancelled);
      if (isCancelled) return;

      DC.Data._List1_MCParents.Add(this);
      onStored();
    }
    partial void onStoring(ref bool isCancelled);
    partial void onStored();


    /// <summary>
    /// Estimated number of UTF8 characters needed to write List1_MCParent to CSV file
    /// </summary>
    public const int EstimatedLineLength = 150;


    /// <summary>
    /// Write List1_MCParent to CSV file
    /// </summary>
    internal static void Write(List1_MCParent list1_MCParent, CsvWriter csvWriter) {
      list1_MCParent.onCsvWrite();
      csvWriter.Write(list1_MCParent.Name);
    }
    partial void onCsvWrite();


    /// <summary>
    /// Updates List1_MCParent with the provided values
    /// </summary>
    public void Update(string name) {
      var clone = new List1_MCParent(this);
      var isCancelled = false;
      onUpdating(name, ref isCancelled);
      if (isCancelled) return;


      //update properties and detect if any value has changed
      var isChangeDetected = false;
      if (Name!=name) {
        Name = name;
        isChangeDetected = true;
      }
      if (isChangeDetected) {
        onUpdated(clone);
        if (Key>=0) {
          DC.Data._List1_MCParents.ItemHasChanged(clone, this);
        } else if (DC.Data.IsTransaction) {
          DC.Data.AddTransaction(new TransactionItem(1, TransactionActivityEnum.Update, Key, this, oldItem: clone));
        }
        HasChanged?.Invoke(clone, this);
      }
    }
    partial void onUpdating(string name, ref bool isCancelled);
    partial void onUpdated(List1_MCParent old);


    /// <summary>
    /// Updates this List1_MCParent with values from CSV file
    /// </summary>
    internal static void Update(List1_MCParent list1_MCParent, CsvReader csvReader){
      list1_MCParent.Name = csvReader.ReadString();
      list1_MCParent.onCsvUpdate();
    }
    partial void onCsvUpdate();


    /// <summary>
    /// Add list1_MCChild to Children.
    /// </summary>
    internal void AddToChildren(List1_MCChild list1_MCChild) {
#if DEBUG
      if (list1_MCChild==List1_MCChild.NoList1_MCChild) throw new Exception();
      if ((list1_MCChild.Key>=0)&&(Key<0)) throw new Exception();
      if (children.Contains(list1_MCChild)) throw new Exception();
#endif
      children.Add(list1_MCChild);
      onAddedToChildren(list1_MCChild);
    }
    partial void onAddedToChildren(List1_MCChild list1_MCChild);


    /// <summary>
    /// Removes list1_MCChild from List1_MCParent.
    /// </summary>
    internal void RemoveFromChildren(List1_MCChild list1_MCChild) {
#if DEBUG
      if (!children.Remove(list1_MCChild)) throw new Exception();
#else
        children.Remove(list1_MCChild);
#endif
      onRemovedFromChildren(list1_MCChild);
    }
    partial void onRemovedFromChildren(List1_MCChild list1_MCChild);


    /// <summary>
    /// Removes List1_MCParent from DC.Data.List1_MCParents.
    /// </summary>
    public void Release() {
      if (Key<0) {
        throw new Exception($"List1_MCParent.Release(): List1_MCParent '{this}' is not stored in DC.Data, key is {Key}.");
      }
      foreach (var list1_MCChild in Children) {
        if (list1_MCChild?.Key>=0) {
          throw new Exception($"Cannot release List1_MCParent '{this}' " + Environment.NewLine + 
            $"because '{list1_MCChild}' in List1_MCParent.Children is still stored.");
        }
      }
      onReleased();
      DC.Data._List1_MCParents.Remove(Key);
    }
    partial void onReleased();


    /// <summary>
    /// Undoes the new() statement as part of a transaction rollback.
    /// </summary>
    internal static void RollbackItemNew(IStorageItem item) {
      var list1_MCParent = (List1_MCParent) item;
      list1_MCParent.onRollbackItemNew();
    }
    partial void onRollbackItemNew();


    /// <summary>
    /// Releases List1_MCParent from DC.Data.List1_MCParents as part of a transaction rollback of Store().
    /// </summary>
    internal static void RollbackItemStore(IStorageItem item) {
      var list1_MCParent = (List1_MCParent) item;
      list1_MCParent.onRollbackItemStored();
    }
    partial void onRollbackItemStored();


    /// <summary>
    /// Restores the List1_MCParent item data as it was before the last update as part of a transaction rollback.
    /// </summary>
    internal static void RollbackItemUpdate(IStorageItem oldStorageItem, IStorageItem newStorageItem) {
      var oldItem = (List1_MCParent) oldStorageItem;//an item clone with the values before item was updated
      var item = (List1_MCParent) newStorageItem;//is the instance whose values should be restored

      // updated item: restore old values
      item.Name = oldItem.Name;
      item.onRollbackItemUpdated(oldItem);
    }
    partial void onRollbackItemUpdated(List1_MCParent oldList1_MCParent);


    /// <summary>
    /// Adds List1_MCParent to DC.Data.List1_MCParents as part of a transaction rollback of Release().
    /// </summary>
    internal static void RollbackItemRelease(IStorageItem item) {
      var list1_MCParent = (List1_MCParent) item;
      list1_MCParent.onRollbackItemRelease();
    }
    partial void onRollbackItemRelease();


    /// <summary>
    /// Returns property values for tracing. Parents are shown with their key instead their content.
    /// </summary>
    public string ToTraceString() {
      var returnString =
        $"{this.GetKeyOrHash()}|" +
        $" {Name}";
      onToTraceString(ref returnString);
      return returnString;
    }
    partial void onToTraceString(ref string returnString);


    /// <summary>
    /// Returns property values
    /// </summary>
    public string ToShortString() {
      var returnString =
        $"{Key.ToKeyString()}," +
        $" {Name}";
      onToShortString(ref returnString);
      return returnString;
    }
    partial void onToShortString(ref string returnString);


    /// <summary>
    /// Returns all property names and values
    /// </summary>
    public override string ToString() {
      var returnString =
        $"Key: {Key.ToKeyString()}," +
        $" Name: {Name}," +
        $" Children: {Children.Count};";
      onToString(ref returnString);
      return returnString;
    }
    partial void onToString(ref string returnString);
    #endregion
  }
}
