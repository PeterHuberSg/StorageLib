//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by StorageClassGenerator
//
//     Do not change code in this file, it will get lost when the file gets 
//     auto generated again. Write your code into NeedsDictionaryLowerCaseClass.cs.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
using System;
using System.Collections.Generic;
using System.Threading;
using StorageLib;


namespace DataModelSamples  {


    /// <summary>
    /// Directory of all NeedsDictionaryClasss by Name
    /// </summary>
  public partial class NeedsDictionaryLowerCaseClass: IStorageItemGeneric<NeedsDictionaryLowerCaseClass> {

    #region Properties
    //      ----------

    /// <summary>
    /// Unique identifier for NeedsDictionaryLowerCaseClass. Gets set once NeedsDictionaryLowerCaseClass gets added to DC.Data.
    /// </summary>
    public int Key { get; private set; }
    internal static void SetKey(IStorageItem needsDictionaryLowerCaseClass, int key, bool _) {
      ((NeedsDictionaryLowerCaseClass)needsDictionaryLowerCaseClass).Key = key;
    }


    public string Name { get; private set; }


    public string NameLower { get; private set; }


    public string Address { get; private set; }


    /// <summary>
    /// Headers written to first line in CSV file
    /// </summary>
    internal static readonly string[] Headers = {"Key", "Name", "NameLower", "Address"};


    /// <summary>
    /// None existing NeedsDictionaryLowerCaseClass
    /// </summary>
    internal static NeedsDictionaryLowerCaseClass NoNeedsDictionaryLowerCaseClass = new NeedsDictionaryLowerCaseClass("NoName", "NoAddress", isStoring: false);
    #endregion


    #region Events
    //      ------

    /// <summary>
    /// Content of NeedsDictionaryLowerCaseClass has changed. Gets only raised for changes occurring after loading DC.Data with previously stored data.
    /// </summary>
    public event Action</*old*/NeedsDictionaryLowerCaseClass, /*new*/NeedsDictionaryLowerCaseClass>? HasChanged;
    #endregion


    #region Constructors
    //      ------------

    /// <summary>
    /// NeedsDictionaryLowerCaseClass Constructor. If isStoring is true, adds NeedsDictionaryLowerCaseClass to DC.Data.NeedsDictionaryLowerCaseClasss.
    /// </summary>
    public NeedsDictionaryLowerCaseClass(string name, string address, bool isStoring = true) {
      Key = StorageExtensions.NoKey;
      Name = name;
      NameLower = Name.ToLowerInvariant();
      Address = address;
      onConstruct();
      if (DC.Data.IsTransaction) {
        DC.Data.AddTransaction(new TransactionItem(38,TransactionActivityEnum.New, Key, this));
      }

      if (isStoring) {
        Store();
      }
    }
    partial void onConstruct();


    /// <summary>
    /// Cloning constructor. It will copy all data from original except any collection (children).
    /// </summary>
    #pragma warning disable CS8618 // Children collections are uninitialized.
    public NeedsDictionaryLowerCaseClass(NeedsDictionaryLowerCaseClass original) {
    #pragma warning restore CS8618 //
      Key = StorageExtensions.NoKey;
      Name = original.Name;
      NameLower = original.NameLower;
      Address = original.Address;
      onCloned(this);
    }
    partial void onCloned(NeedsDictionaryLowerCaseClass clone);


    /// <summary>
    /// Constructor for NeedsDictionaryLowerCaseClass read from CSV file
    /// </summary>
    private NeedsDictionaryLowerCaseClass(int key, CsvReader csvReader){
      Key = key;
      Name = csvReader.ReadString();
      NameLower = Name.ToLowerInvariant();
      DC.Data._NeedsDictionaryLowerCaseClasssByNameLower.Add(NameLower, this);
      Address = csvReader.ReadString();
      onCsvConstruct();
    }
    partial void onCsvConstruct();


    /// <summary>
    /// New NeedsDictionaryLowerCaseClass read from CSV file
    /// </summary>
    internal static NeedsDictionaryLowerCaseClass Create(int key, CsvReader csvReader) {
      return new NeedsDictionaryLowerCaseClass(key, csvReader);
    }
    #endregion


    #region Methods
    //      -------

    /// <summary>
    /// Adds NeedsDictionaryLowerCaseClass to DC.Data.NeedsDictionaryLowerCaseClasss.<br/>
    /// Throws an Exception when NeedsDictionaryLowerCaseClass is already stored.
    /// </summary>
    public void Store() {
      if (Key>=0) {
        throw new Exception($"NeedsDictionaryLowerCaseClass cannot be stored again in DC.Data, key {Key} is greater equal 0." + Environment.NewLine + ToString());
      }

      var isCancelled = false;
      onStoring(ref isCancelled);
      if (isCancelled) return;

      DC.Data._NeedsDictionaryLowerCaseClasssByNameLower.Add(NameLower, this);
      DC.Data._NeedsDictionaryLowerCaseClasss.Add(this);
      onStored();
    }
    partial void onStoring(ref bool isCancelled);
    partial void onStored();


    /// <summary>
    /// Estimated number of UTF8 characters needed to write NeedsDictionaryLowerCaseClass to CSV file
    /// </summary>
    public const int EstimatedLineLength = 450;


    /// <summary>
    /// Write NeedsDictionaryLowerCaseClass to CSV file
    /// </summary>
    internal static void Write(NeedsDictionaryLowerCaseClass needsDictionaryLowerCaseClass, CsvWriter csvWriter) {
      needsDictionaryLowerCaseClass.onCsvWrite();
      csvWriter.Write(needsDictionaryLowerCaseClass.Name);
      csvWriter.Write(needsDictionaryLowerCaseClass.Address);
    }
    partial void onCsvWrite();


    /// <summary>
    /// Updates NeedsDictionaryLowerCaseClass with the provided values
    /// </summary>
    public void Update(string name, string address) {
      var clone = new NeedsDictionaryLowerCaseClass(this);
      var isCancelled = false;
      onUpdating(name, address, ref isCancelled);
      if (isCancelled) return;


      //update properties and detect if any value has changed
      var isChangeDetected = false;
      if (Name!=name) {
        if (Key>=0) {
            DC.Data._NeedsDictionaryLowerCaseClasssByNameLower.Remove(NameLower);
        }
        Name = name;
        NameLower = Name.ToLowerInvariant();
        if (Key>=0) {
            DC.Data._NeedsDictionaryLowerCaseClasssByNameLower.Add(NameLower, this);
        }
        isChangeDetected = true;
      }
      if (Address!=address) {
        Address = address;
        isChangeDetected = true;
      }
      if (isChangeDetected) {
        onUpdated(clone);
        if (Key>=0) {
          DC.Data._NeedsDictionaryLowerCaseClasss.ItemHasChanged(clone, this);
        } else if (DC.Data.IsTransaction) {
          DC.Data.AddTransaction(new TransactionItem(38, TransactionActivityEnum.Update, Key, this, oldItem: clone));
        }
        HasChanged?.Invoke(clone, this);
      }
    }
    partial void onUpdating(string name, string address, ref bool isCancelled);
    partial void onUpdated(NeedsDictionaryLowerCaseClass old);


    /// <summary>
    /// Updates this NeedsDictionaryLowerCaseClass with values from CSV file
    /// </summary>
    internal static void Update(NeedsDictionaryLowerCaseClass needsDictionaryLowerCaseClass, CsvReader csvReader){
      DC.Data._NeedsDictionaryLowerCaseClasssByNameLower.Remove(needsDictionaryLowerCaseClass.NameLower);
      needsDictionaryLowerCaseClass.Name = csvReader.ReadString();
      needsDictionaryLowerCaseClass.NameLower = needsDictionaryLowerCaseClass.Name.ToLowerInvariant();
      DC.Data._NeedsDictionaryLowerCaseClasssByNameLower.Add(needsDictionaryLowerCaseClass.NameLower, needsDictionaryLowerCaseClass);
      needsDictionaryLowerCaseClass.Address = csvReader.ReadString();
      needsDictionaryLowerCaseClass.onCsvUpdate();
    }
    partial void onCsvUpdate();


    /// <summary>
    /// Removes NeedsDictionaryLowerCaseClass from DC.Data.NeedsDictionaryLowerCaseClasss.
    /// </summary>
    public void Release() {
      if (Key<0) {
        throw new Exception($"NeedsDictionaryLowerCaseClass.Release(): NeedsDictionaryLowerCaseClass '{this}' is not stored in DC.Data, key is {Key}.");
      }
      DC.Data._NeedsDictionaryLowerCaseClasssByNameLower.Remove(NameLower);
      DC.Data._NeedsDictionaryLowerCaseClasssByNameLower.Remove(NameLower);
      onReleased();
      DC.Data._NeedsDictionaryLowerCaseClasss.Remove(Key);
    }
    partial void onReleased();


    /// <summary>
    /// Undoes the new() statement as part of a transaction rollback.
    /// </summary>
    internal static void RollbackItemNew(IStorageItem item) {
      var needsDictionaryLowerCaseClass = (NeedsDictionaryLowerCaseClass) item;
      needsDictionaryLowerCaseClass.onRollbackItemNew();
    }
    partial void onRollbackItemNew();


    /// <summary>
    /// Releases NeedsDictionaryLowerCaseClass from DC.Data.NeedsDictionaryLowerCaseClasss as part of a transaction rollback of Store().
    /// </summary>
    internal static void RollbackItemStore(IStorageItem item) {
      var needsDictionaryLowerCaseClass = (NeedsDictionaryLowerCaseClass) item;
      DC.Data._NeedsDictionaryLowerCaseClasssByNameLower.Remove(needsDictionaryLowerCaseClass.NameLower);
      DC.Data._NeedsDictionaryLowerCaseClasssByNameLower.Remove(needsDictionaryLowerCaseClass.NameLower);
      needsDictionaryLowerCaseClass.onRollbackItemStored();
    }
    partial void onRollbackItemStored();


    /// <summary>
    /// Restores the NeedsDictionaryLowerCaseClass item data as it was before the last update as part of a transaction rollback.
    /// </summary>
    internal static void RollbackItemUpdate(IStorageItem oldStorageItem, IStorageItem newStorageItem) {
      var oldItem = (NeedsDictionaryLowerCaseClass) oldStorageItem;//an item clone with the values before item was updated
      var item = (NeedsDictionaryLowerCaseClass) newStorageItem;//is the instance whose values should be restored

      // remove updated item from dictionaries
      DC.Data._NeedsDictionaryLowerCaseClasssByNameLower.Remove(item.NameLower);

      // updated item: restore old values
      item.Name = oldItem.Name;
      item.NameLower = item.Name.ToLowerInvariant();
      item.Address = oldItem.Address;

      // add item with previous values to dictionaries
      DC.Data._NeedsDictionaryLowerCaseClasssByNameLower.Add(item.NameLower, item);
      item.onRollbackItemUpdated(oldItem);
    }
    partial void onRollbackItemUpdated(NeedsDictionaryLowerCaseClass oldNeedsDictionaryLowerCaseClass);


    /// <summary>
    /// Adds NeedsDictionaryLowerCaseClass to DC.Data.NeedsDictionaryLowerCaseClasss as part of a transaction rollback of Release().
    /// </summary>
    internal static void RollbackItemRelease(IStorageItem item) {
      var needsDictionaryLowerCaseClass = (NeedsDictionaryLowerCaseClass) item;
      DC.Data._NeedsDictionaryLowerCaseClasssByNameLower.Add(needsDictionaryLowerCaseClass.NameLower, needsDictionaryLowerCaseClass);
      needsDictionaryLowerCaseClass.onRollbackItemRelease();
    }
    partial void onRollbackItemRelease();


    /// <summary>
    /// Returns property values for tracing. Parents are shown with their key instead their content.
    /// </summary>
    public string ToTraceString() {
      var returnString =
        $"{this.GetKeyOrHash()}|" +
        $" {Name}|" +
        $" {NameLower}|" +
        $" {Address}";
      onToTraceString(ref returnString);
      return returnString;
    }
    partial void onToTraceString(ref string returnString);


    /// <summary>
    /// Returns property values
    /// </summary>
    public string ToShortString() {
      var returnString =
        $"{Key.ToKeyString()}," +
        $" {Name}," +
        $" {NameLower}," +
        $" {Address}";
      onToShortString(ref returnString);
      return returnString;
    }
    partial void onToShortString(ref string returnString);


    /// <summary>
    /// Returns all property names and values
    /// </summary>
    public override string ToString() {
      var returnString =
        $"Key: {Key.ToKeyString()}," +
        $" Name: {Name}," +
        $" NameLower: {NameLower}," +
        $" Address: {Address};";
      onToString(ref returnString);
      return returnString;
    }
    partial void onToString(ref string returnString);
    #endregion
  }
}
