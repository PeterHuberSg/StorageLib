//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by StorageClassGenerator
//
//     Do not change code in this file, it will get lost when the file gets 
//     auto generated again. Write your code into ClassWithEnumProperty.cs.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
using System;
using System.Collections.Generic;
using System.Threading;
using StorageLib;


namespace DataModelSamples  {


  public partial class ClassWithEnumProperty: IStorageItem<ClassWithEnumProperty> {

    #region Properties
    //      ----------

    /// <summary>
    /// Unique identifier for ClassWithEnumProperty. Gets set once ClassWithEnumProperty gets added to DC.Data.
    /// </summary>
    public int Key { get; private set; }
    internal static void SetKey(IStorageItem classWithEnumProperty, int key, bool _) {
      ((ClassWithEnumProperty)classWithEnumProperty).Key = key;
    }


    public Weekdays Weekday { get; private set; }


    public Weekdays? ConditionalWeekDay { get; private set; }


    public Weekdays ReadonlyWeekdays { get; }


    /// <summary>
    /// Headers written to first line in CSV file
    /// </summary>
    internal static readonly string[] Headers = {"Key", "Weekday", "ConditionalWeekDay", "ReadonlyWeekdays"};


    /// <summary>
    /// None existing ClassWithEnumProperty, used as a temporary place holder when reading a CSV file
    /// which was not compacted. It might create first a later deleted item linking to a 
    /// deleted parent. In this case, the parent property gets set to NoClassWithEnumProperty. Once the CSV
    /// file is completely read, that child will actually be deleted (released) and Verify()
    /// ensures that there are no stored children with links to NoClassWithEnumProperty.
    /// </summary>
    internal static ClassWithEnumProperty NoClassWithEnumProperty = new ClassWithEnumProperty(0, null, 0, isStoring: false);
    #endregion


    #region Events
    //      ------

    /// <summary>
    /// Content of ClassWithEnumProperty has changed. Gets only raised for changes occurring after loading DC.Data with previously stored data.
    /// </summary>
    public event Action</*old*/ClassWithEnumProperty, /*new*/ClassWithEnumProperty>? HasChanged;
    #endregion


    #region Constructors
    //      ------------

    /// <summary>
    /// ClassWithEnumProperty Constructor. If isStoring is true, adds ClassWithEnumProperty to DC.Data.ClassWithEnumPropertys.
    /// </summary>
    public ClassWithEnumProperty(Weekdays weekday, Weekdays? conditionalWeekDay, Weekdays readonlyWeekdays, bool isStoring = true) {
      Key = StorageExtensions.NoKey;
      Weekday = weekday;
      ConditionalWeekDay = conditionalWeekDay;
      ReadonlyWeekdays = readonlyWeekdays;
      onConstruct();
      if (DC.Data.IsTransaction) {
        DC.Data.AddTransaction(new TransactionItem(10,TransactionActivityEnum.New, Key, this));
      }

      if (isStoring) {
        Store();
      }
    }
    partial void onConstruct();


    /// <summary>
    /// Cloning constructor. It will copy all data from original except any collection (children).
    /// </summary>
    #pragma warning disable CS8618 // Children collections are uninitialized.
    public ClassWithEnumProperty(ClassWithEnumProperty original) {
    #pragma warning restore CS8618 //
      Key = StorageExtensions.NoKey;
      Weekday = original.Weekday;
      ConditionalWeekDay = original.ConditionalWeekDay;
      ReadonlyWeekdays = original.ReadonlyWeekdays;
      onCloned(this);
    }
    partial void onCloned(ClassWithEnumProperty clone);


    /// <summary>
    /// Constructor for ClassWithEnumProperty read from CSV file
    /// </summary>
    private ClassWithEnumProperty(int key, CsvReader csvReader){
      Key = key;
      Weekday = (Weekdays)csvReader.ReadInt();
      ConditionalWeekDay = (Weekdays?)csvReader.ReadIntNull();
      ReadonlyWeekdays = (Weekdays)csvReader.ReadInt();
      onCsvConstruct();
    }
    partial void onCsvConstruct();


    /// <summary>
    /// New ClassWithEnumProperty read from CSV file
    /// </summary>
    internal static ClassWithEnumProperty Create(int key, CsvReader csvReader) {
      return new ClassWithEnumProperty(key, csvReader);
    }
    #endregion


    #region Methods
    //      -------

    /// <summary>
    /// Adds ClassWithEnumProperty to DC.Data.ClassWithEnumPropertys.<br/>
    /// Throws an Exception when ClassWithEnumProperty is already stored.
    /// </summary>
    public void Store() {
      if (Key>=0) {
        throw new Exception($"ClassWithEnumProperty cannot be stored again in DC.Data, key {Key} is greater equal 0." + Environment.NewLine + ToString());
      }

      var isCancelled = false;
      onStoring(ref isCancelled);
      if (isCancelled) return;

      DC.Data._ClassWithEnumPropertys.Add(this);
      onStored();
    }
    partial void onStoring(ref bool isCancelled);
    partial void onStored();


    /// <summary>
    /// Estimated number of UTF8 characters needed to write ClassWithEnumProperty to CSV file
    /// </summary>
    public const int EstimatedLineLength = 48;


    /// <summary>
    /// Write ClassWithEnumProperty to CSV file
    /// </summary>
    internal static void Write(ClassWithEnumProperty classWithEnumProperty, CsvWriter csvWriter) {
      classWithEnumProperty.onCsvWrite();
      csvWriter.Write((int)classWithEnumProperty.Weekday);
      csvWriter.Write((int?)classWithEnumProperty.ConditionalWeekDay);
      csvWriter.Write((int)classWithEnumProperty.ReadonlyWeekdays);
    }
    partial void onCsvWrite();


    /// <summary>
    /// Updates ClassWithEnumProperty with the provided values
    /// </summary>
    public void Update(Weekdays weekday, Weekdays? conditionalWeekDay) {
      var clone = new ClassWithEnumProperty(this);
      var isCancelled = false;
      onUpdating(weekday, conditionalWeekDay, ref isCancelled);
      if (isCancelled) return;


      //update properties and detect if any value has changed
      var isChangeDetected = false;
      if (Weekday!=weekday) {
        Weekday = weekday;
        isChangeDetected = true;
      }
      if (ConditionalWeekDay!=conditionalWeekDay) {
        ConditionalWeekDay = conditionalWeekDay;
        isChangeDetected = true;
      }
      if (isChangeDetected) {
        onUpdated(clone);
        if (Key>=0) {
          DC.Data._ClassWithEnumPropertys.ItemHasChanged(clone, this);
        } else if (DC.Data.IsTransaction) {
          DC.Data.AddTransaction(new TransactionItem(10, TransactionActivityEnum.Update, Key, this, oldItem: clone));
        }
        HasChanged?.Invoke(clone, this);
      }
    }
    partial void onUpdating(Weekdays weekday, Weekdays? conditionalWeekDay, ref bool isCancelled);
    partial void onUpdated(ClassWithEnumProperty old);


    /// <summary>
    /// Updates this ClassWithEnumProperty with values from CSV file
    /// </summary>
    internal static void Update(ClassWithEnumProperty classWithEnumProperty, CsvReader csvReader){
      classWithEnumProperty.Weekday = (Weekdays)csvReader.ReadInt();
      classWithEnumProperty.ConditionalWeekDay = (Weekdays?)csvReader.ReadIntNull();
      var readonlyWeekdays = (Weekdays)csvReader.ReadInt();
      if (classWithEnumProperty.ReadonlyWeekdays!=readonlyWeekdays) {
        throw new Exception($"ClassWithEnumProperty.Update(): Property ReadonlyWeekdays '{classWithEnumProperty.ReadonlyWeekdays}' is " +
          $"readonly, readonlyWeekdays '{readonlyWeekdays}' read from the CSV file should be the same." + Environment.NewLine + 
          classWithEnumProperty.ToString());
      }
      classWithEnumProperty.onCsvUpdate();
    }
    partial void onCsvUpdate();


    /// <summary>
    /// Removes ClassWithEnumProperty from DC.Data.ClassWithEnumPropertys.
    /// </summary>
    public void Release() {
      if (Key<0) {
        throw new Exception($"ClassWithEnumProperty.Release(): ClassWithEnumProperty '{this}' is not stored in DC.Data, key is {Key}.");
      }
      DC.Data._ClassWithEnumPropertys.Remove(Key);
      onReleased();
    }
    partial void onReleased();


    /// <summary>
    /// Undoes the new() statement as part of a transaction rollback.
    /// </summary>
    internal static void RollbackItemNew(IStorageItem item) {
      var classWithEnumProperty = (ClassWithEnumProperty) item;
      classWithEnumProperty.onRollbackItemNew();
    }
    partial void onRollbackItemNew();


    /// <summary>
    /// Releases ClassWithEnumProperty from DC.Data.ClassWithEnumPropertys as part of a transaction rollback of Store().
    /// </summary>
    internal static void RollbackItemStore(IStorageItem item) {
      var classWithEnumProperty = (ClassWithEnumProperty) item;
      classWithEnumProperty.onRollbackItemStored();
    }
    partial void onRollbackItemStored();


    /// <summary>
    /// Restores the ClassWithEnumProperty item data as it was before the last update as part of a transaction rollback.
    /// </summary>
    internal static void RollbackItemUpdate(IStorageItem oldStorageItem, IStorageItem newStorageItem) {
      var oldItem = (ClassWithEnumProperty) oldStorageItem;//an item clone with the values before item was updated
      var item = (ClassWithEnumProperty) newStorageItem;//is the instance whose values should be restored

      // if possible, throw exceptions before changing anything
      if (item.ReadonlyWeekdays!=oldItem.ReadonlyWeekdays) {
        throw new Exception($"ClassWithEnumProperty.Update(): Property ReadonlyWeekdays '{item.ReadonlyWeekdays}' is " +
          $"readonly, ReadonlyWeekdays '{oldItem.ReadonlyWeekdays}' should be the same." + Environment.NewLine + 
          item.ToString());
      }

      // updated item: restore old values
      item.Weekday = oldItem.Weekday;
      item.ConditionalWeekDay = oldItem.ConditionalWeekDay;
      item.onRollbackItemUpdated(oldItem);
    }
    partial void onRollbackItemUpdated(ClassWithEnumProperty oldClassWithEnumProperty);


    /// <summary>
    /// Adds ClassWithEnumProperty to DC.Data.ClassWithEnumPropertys as part of a transaction rollback of Release().
    /// </summary>
    internal static void RollbackItemRelease(IStorageItem item) {
      var classWithEnumProperty = (ClassWithEnumProperty) item;
      classWithEnumProperty.onRollbackItemRelease();
    }
    partial void onRollbackItemRelease();


    /// <summary>
    /// Returns property values for tracing. Parents are shown with their key instead their content.
    /// </summary>
    public string ToTraceString() {
      var returnString =
        $"{this.GetKeyOrHash()}|" +
        $" {Weekday}|" +
        $" {ConditionalWeekDay}|" +
        $" {ReadonlyWeekdays}";
      onToTraceString(ref returnString);
      return returnString;
    }
    partial void onToTraceString(ref string returnString);


    /// <summary>
    /// Returns property values
    /// </summary>
    public string ToShortString() {
      var returnString =
        $"{Key.ToKeyString()}," +
        $" {Weekday}," +
        $" {ConditionalWeekDay}," +
        $" {ReadonlyWeekdays}";
      onToShortString(ref returnString);
      return returnString;
    }
    partial void onToShortString(ref string returnString);


    /// <summary>
    /// Returns all property names and values
    /// </summary>
    public override string ToString() {
      var returnString =
        $"Key: {Key.ToKeyString()}," +
        $" Weekday: {Weekday}," +
        $" ConditionalWeekDay: {ConditionalWeekDay}," +
        $" ReadonlyWeekdays: {ReadonlyWeekdays};";
      onToString(ref returnString);
      return returnString;
    }
    partial void onToString(ref string returnString);
    #endregion
  }
}
