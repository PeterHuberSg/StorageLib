//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by StorageClassGenerator
//
//     Do not change code in this file, it will get lost when the file gets 
//     auto generated again. Write your code into List1_MCChild.cs.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
using System;
using System.Collections.Generic;
using System.Threading;
using StorageLib;


namespace DataModelSamples  {


  public partial class List1_MCChild: IStorageItemGeneric<List1_MCChild> {

    #region Properties
    //      ----------

    /// <summary>
    /// Unique identifier for List1_MCChild. Gets set once List1_MCChild gets added to DC.Data.
    /// </summary>
    public int Key { get; private set; }
    internal static void SetKey(IStorageItem list1_MCChild, int key, bool _) {
      ((List1_MCChild)list1_MCChild).Key = key;
    }


    /// <summary>
    /// Stores only dates but no times.
    ///  </summary>
    public DateTime Date { get; private set; }


    public List1_MCParent Parent { get; private set; }


    /// <summary>
    /// Headers written to first line in CSV file
    /// </summary>
    internal static readonly string[] Headers = {"Key", "Date", "Parent"};


    /// <summary>
    /// None existing List1_MCChild
    /// </summary>
    internal static List1_MCChild NoList1_MCChild = new List1_MCChild(DateTime.MinValue.Date, List1_MCParent.NoList1_MCParent, isStoring: false);
    #endregion


    #region Events
    //      ------

    /// <summary>
    /// Content of List1_MCChild has changed. Gets only raised for changes occurring after loading DC.Data with previously stored data.
    /// </summary>
    public event Action</*old*/List1_MCChild, /*new*/List1_MCChild>? HasChanged;
    #endregion


    #region Constructors
    //      ------------

    /// <summary>
    /// List1_MCChild Constructor. If isStoring is true, adds List1_MCChild to DC.Data.List1_MCChilds.
    /// </summary>
    public List1_MCChild(DateTime date, List1_MCParent parent, bool isStoring = true) {
      Key = StorageExtensions.NoKey;
      Date = date.Floor(Rounding.Days);
      Parent = parent;
      Parent.AddToChildren(this);
      onConstruct();
      if (DC.Data.IsTransaction) {
        DC.Data.AddTransaction(new TransactionItem(2,TransactionActivityEnum.New, Key, this));
      }

      if (isStoring) {
        Store();
      }
    }
    partial void onConstruct();


    /// <summary>
    /// Cloning constructor. It will copy all data from original except any collection (children).
    /// </summary>
    #pragma warning disable CS8618 // Children collections are uninitialized.
    public List1_MCChild(List1_MCChild original) {
    #pragma warning restore CS8618 //
      Key = StorageExtensions.NoKey;
      Date = original.Date;
      Parent = original.Parent;
      onCloned(this);
    }
    partial void onCloned(List1_MCChild clone);


    /// <summary>
    /// Constructor for List1_MCChild read from CSV file
    /// </summary>
    private List1_MCChild(int key, CsvReader csvReader){
      Key = key;
      Date = csvReader.ReadDate();
      var list1_MCParentKey = csvReader.ReadInt();
      Parent = DC.Data._List1_MCParents.GetItem(list1_MCParentKey)??
        throw new Exception($"Read List1_MCChild from CSV file: Cannot find Parent with key {list1_MCParentKey}." + Environment.NewLine + 
          csvReader.PresentContent);
      if (Parent!=List1_MCParent.NoList1_MCParent) {
        Parent.AddToChildren(this);
      }
      onCsvConstruct();
    }
    partial void onCsvConstruct();


    /// <summary>
    /// New List1_MCChild read from CSV file
    /// </summary>
    internal static List1_MCChild Create(int key, CsvReader csvReader) {
      return new List1_MCChild(key, csvReader);
    }


    /// <summary>
    /// Verify that list1_MCChild.Parent exists.
    /// </summary>
    internal static bool Verify(List1_MCChild list1_MCChild) {
      if (list1_MCChild.Parent==List1_MCParent.NoList1_MCParent) return false;
      return true;
    }
    #endregion


    #region Methods
    //      -------

    /// <summary>
    /// Adds List1_MCChild to DC.Data.List1_MCChilds.<br/>
    /// Throws an Exception when List1_MCChild is already stored.
    /// </summary>
    public void Store() {
      if (Key>=0) {
        throw new Exception($"List1_MCChild cannot be stored again in DC.Data, key {Key} is greater equal 0." + Environment.NewLine + ToString());
      }

      var isCancelled = false;
      onStoring(ref isCancelled);
      if (isCancelled) return;

      if (Parent.Key<0) {
        throw new Exception($"Cannot store child List1_MCChild '{this}'.Parent to List1_MCParent '{Parent}' because parent is not stored yet.");
      }
      DC.Data._List1_MCChilds.Add(this);
      onStored();
    }
    partial void onStoring(ref bool isCancelled);
    partial void onStored();


    /// <summary>
    /// Estimated number of UTF8 characters needed to write List1_MCChild to CSV file
    /// </summary>
    public const int EstimatedLineLength = 16;


    /// <summary>
    /// Write List1_MCChild to CSV file
    /// </summary>
    internal static void Write(List1_MCChild list1_MCChild, CsvWriter csvWriter) {
      list1_MCChild.onCsvWrite();
      csvWriter.WriteDate(list1_MCChild.Date);
      if (list1_MCChild.Parent.Key<0) throw new Exception($"Cannot write list1_MCChild '{list1_MCChild}' to CSV File, because Parent is not stored in DC.Data.List1_MCParents.");

      csvWriter.Write(list1_MCChild.Parent.Key.ToString());
    }
    partial void onCsvWrite();


    /// <summary>
    /// Updates List1_MCChild with the provided values
    /// </summary>
    public void Update(DateTime date, List1_MCParent parent) {
      if (Key>=0){
        if (parent.Key<0) {
          throw new Exception($"List1_MCChild.Update(): It is illegal to add stored List1_MCChild '{this}'" + Environment.NewLine + 
            $"to Parent '{parent}', which is not stored.");
        }
      }
      var clone = new List1_MCChild(this);
      var isCancelled = false;
      onUpdating(date, parent, ref isCancelled);
      if (isCancelled) return;


      //remove not yet updated item from parents which will be removed by update
      var hasParentChanged = Parent!=parent;
      if (hasParentChanged) {
        Parent.RemoveFromChildren(this);
      }

      //update properties and detect if any value has changed
      var isChangeDetected = false;
      var dateRounded = date.Floor(Rounding.Days);
      if (Date!=dateRounded) {
        Date = dateRounded;
        isChangeDetected = true;
      }
      if (Parent!=parent) {
        Parent = parent;
        isChangeDetected = true;
      }

      //add updated item to parents which have been newly added during update
      if (hasParentChanged) {
        Parent.AddToChildren(this);
      }
      if (isChangeDetected) {
        onUpdated(clone);
        if (Key>=0) {
          DC.Data._List1_MCChilds.ItemHasChanged(clone, this);
        } else if (DC.Data.IsTransaction) {
          DC.Data.AddTransaction(new TransactionItem(2, TransactionActivityEnum.Update, Key, this, oldItem: clone));
        }
        HasChanged?.Invoke(clone, this);
      }
    }
    partial void onUpdating(DateTime date, List1_MCParent parent, ref bool isCancelled);
    partial void onUpdated(List1_MCChild old);


    /// <summary>
    /// Updates this List1_MCChild with values from CSV file
    /// </summary>
    internal static void Update(List1_MCChild list1_MCChild, CsvReader csvReader){
      list1_MCChild.Date = csvReader.ReadDate();
        var parent = DC.Data._List1_MCParents.GetItem(csvReader.ReadInt())??
          List1_MCParent.NoList1_MCParent;
      if (list1_MCChild.Parent!=parent) {
        if (list1_MCChild.Parent!=List1_MCParent.NoList1_MCParent) {
          list1_MCChild.Parent.RemoveFromChildren(list1_MCChild);
        }
        list1_MCChild.Parent = parent;
        list1_MCChild.Parent.AddToChildren(list1_MCChild);
      }
      list1_MCChild.onCsvUpdate();
    }
    partial void onCsvUpdate();


    /// <summary>
    /// Removes List1_MCChild from DC.Data.List1_MCChilds.
    /// </summary>
    public void Release() {
      if (Key<0) {
        throw new Exception($"List1_MCChild.Release(): List1_MCChild '{this}' is not stored in DC.Data, key is {Key}.");
      }
      onReleased();
      DC.Data._List1_MCChilds.Remove(Key);
    }
    partial void onReleased();


    /// <summary>
    /// Removes List1_MCChild from parents as part of a transaction rollback of the new() statement.
    /// </summary>
    internal static void RollbackItemNew(IStorageItem item) {
      var list1_MCChild = (List1_MCChild) item;
      if (list1_MCChild.Parent!=List1_MCParent.NoList1_MCParent) {
        list1_MCChild.Parent.RemoveFromChildren(list1_MCChild);
      }
      list1_MCChild.onRollbackItemNew();
    }
    partial void onRollbackItemNew();


    /// <summary>
    /// Releases List1_MCChild from DC.Data.List1_MCChilds as part of a transaction rollback of Store().
    /// </summary>
    internal static void RollbackItemStore(IStorageItem item) {
      var list1_MCChild = (List1_MCChild) item;
      list1_MCChild.onRollbackItemStored();
    }
    partial void onRollbackItemStored();


    /// <summary>
    /// Restores the List1_MCChild item data as it was before the last update as part of a transaction rollback.
    /// </summary>
    internal static void RollbackItemUpdate(IStorageItem oldStorageItem, IStorageItem newStorageItem) {
      var oldItem = (List1_MCChild) oldStorageItem;//an item clone with the values before item was updated
      var item = (List1_MCChild) newStorageItem;//is the instance whose values should be restored

      // remove updated item from parents
      var hasParentChanged = oldItem.Parent!=item.Parent;
      if (hasParentChanged) {
        item.Parent.RemoveFromChildren(item);
      }

      // updated item: restore old values
      item.Date = oldItem.Date;
      item.Parent = oldItem.Parent;

      // add item with previous values to parents
      if (hasParentChanged) {
        item.Parent.AddToChildren(item);
      }
      item.onRollbackItemUpdated(oldItem);
    }
    partial void onRollbackItemUpdated(List1_MCChild oldList1_MCChild);


    /// <summary>
    /// Adds List1_MCChild to DC.Data.List1_MCChilds as part of a transaction rollback of Release().
    /// </summary>
    internal static void RollbackItemRelease(IStorageItem item) {
      var list1_MCChild = (List1_MCChild) item;
      list1_MCChild.onRollbackItemRelease();
    }
    partial void onRollbackItemRelease();


    /// <summary>
    /// Returns property values for tracing. Parents are shown with their key instead their content.
    /// </summary>
    public string ToTraceString() {
      var returnString =
        $"{this.GetKeyOrHash()}|" +
        $" {Date.ToShortDateString()}|" +
        $" Parent {Parent.GetKeyOrHash()}";
      onToTraceString(ref returnString);
      return returnString;
    }
    partial void onToTraceString(ref string returnString);


    /// <summary>
    /// Returns property values
    /// </summary>
    public string ToShortString() {
      var returnString =
        $"{Key.ToKeyString()}," +
        $" {Date.ToShortDateString()}," +
        $" {Parent.ToShortString()}";
      onToShortString(ref returnString);
      return returnString;
    }
    partial void onToShortString(ref string returnString);


    /// <summary>
    /// Returns all property names and values
    /// </summary>
    public override string ToString() {
      var returnString =
        $"Key: {Key.ToKeyString()}," +
        $" Date: {Date.ToShortDateString()}," +
        $" Parent: {Parent.ToShortString()};";
      onToString(ref returnString);
      return returnString;
    }
    partial void onToString(ref string returnString);
    #endregion
  }
}
