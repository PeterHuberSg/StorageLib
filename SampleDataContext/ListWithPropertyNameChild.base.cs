//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by StorageClassGenerator
//
//     Do not change code in this file, it will get lost when the file gets 
//     auto generated again. Write your code into ListWithPropertyNameChild.cs.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
using System;
using System.Collections.Generic;
using System.Threading;
using StorageLib;


namespace DataModelSamples  {


  public partial class ListWithPropertyNameChild: IStorageItem<ListWithPropertyNameChild> {

    #region Properties
    //      ----------

    /// <summary>
    /// Unique identifier for ListWithPropertyNameChild. Gets set once ListWithPropertyNameChild gets added to DC.Data.
    /// </summary>
    public int Key { get; private set; }
    internal static void SetKey(IStorageItem listWithPropertyNameChild, int key, bool _) {
      ((ListWithPropertyNameChild)listWithPropertyNameChild).Key = key;
    }


    /// <summary>
    /// Stores only dates but no times.
    ///  </summary>
    public DateTime Date1 { get; private set; }


    /// <summary>
    /// Stores only dates but no times.
    ///  </summary>
    public DateTime Date2 { get; private set; }


    public ListWithPropertyNameParent Parent { get; private set; }


    /// <summary>
    /// Headers written to first line in CSV file
    /// </summary>
    internal static readonly string[] Headers = {"Key", "Date1", "Date2", "Parent"};


    /// <summary>
    /// None existing ListWithPropertyNameChild, used as a temporary place holder when reading a CSV file
    /// which was not compacted. It might create first a later deleted item linking to a 
    /// deleted parent. In this case, the parent property gets set to NoListWithPropertyNameChild. Once the CSV
    /// file is completely read, that child will actually be deleted (released) and Verify()
    /// ensures that there are no stored children with links to NoListWithPropertyNameChild.
    /// </summary>
    internal static ListWithPropertyNameChild NoListWithPropertyNameChild = new ListWithPropertyNameChild(DateTime.MinValue.Date, DateTime.MinValue.Date, ListWithPropertyNameParent.NoListWithPropertyNameParent, isStoring: false);
    #endregion


    #region Events
    //      ------

    /// <summary>
    /// Content of ListWithPropertyNameChild has changed. Gets only raised for changes occurring after loading DC.Data with previously stored data.
    /// </summary>
    public event Action</*old*/ListWithPropertyNameChild, /*new*/ListWithPropertyNameChild>? HasChanged;
    #endregion


    #region Constructors
    //      ------------

    /// <summary>
    /// ListWithPropertyNameChild Constructor. If isStoring is true, adds ListWithPropertyNameChild to DC.Data.ListWithPropertyNameChilds.
    /// </summary>
    public ListWithPropertyNameChild(DateTime date1, DateTime date2, ListWithPropertyNameParent parent, bool isStoring = true) {
      Key = StorageExtensions.NoKey;
      Date1 = date1.Floor(Rounding.Days);
      Date2 = date2.Floor(Rounding.Days);
      Parent = parent;
      Parent.AddToChildren(this);
      onConstruct();
      if (DC.Data.IsTransaction) {
        DC.Data.AddTransaction(new TransactionItem(24,TransactionActivityEnum.New, Key, this));
      }

      if (isStoring) {
        Store();
      }
    }
    partial void onConstruct();


    /// <summary>
    /// Cloning constructor. It will copy all data from original except any collection (children).
    /// </summary>
    #pragma warning disable CS8618 // Children collections are uninitialized.
    public ListWithPropertyNameChild(ListWithPropertyNameChild original) {
    #pragma warning restore CS8618 //
      Key = StorageExtensions.NoKey;
      Date1 = original.Date1;
      Date2 = original.Date2;
      Parent = original.Parent;
      onCloned(this);
    }
    partial void onCloned(ListWithPropertyNameChild clone);


    /// <summary>
    /// Constructor for ListWithPropertyNameChild read from CSV file
    /// </summary>
    private ListWithPropertyNameChild(int key, CsvReader csvReader){
      Key = key;
      Date1 = csvReader.ReadDate();
      Date2 = csvReader.ReadDate();
      var listWithPropertyNameParentKey = csvReader.ReadInt();
      Parent = DC.Data._ListWithPropertyNameParents.GetItem(listWithPropertyNameParentKey)?? ListWithPropertyNameParent.NoListWithPropertyNameParent;
      if (Parent!=ListWithPropertyNameParent.NoListWithPropertyNameParent) {
        Parent.AddToChildren(this);
      }
      onCsvConstruct();
    }
    partial void onCsvConstruct();


    /// <summary>
    /// New ListWithPropertyNameChild read from CSV file
    /// </summary>
    internal static ListWithPropertyNameChild Create(int key, CsvReader csvReader) {
      return new ListWithPropertyNameChild(key, csvReader);
    }


    /// <summary>
    /// Verify that listWithPropertyNameChild.Parent exists.
    /// </summary>
    internal static bool Verify(ListWithPropertyNameChild listWithPropertyNameChild) {
      if (listWithPropertyNameChild.Parent==ListWithPropertyNameParent.NoListWithPropertyNameParent) return false;
      return true;
    }
    #endregion


    #region Methods
    //      -------

    /// <summary>
    /// Adds ListWithPropertyNameChild to DC.Data.ListWithPropertyNameChilds.<br/>
    /// Throws an Exception when ListWithPropertyNameChild is already stored.
    /// </summary>
    public void Store() {
      if (Key>=0) {
        throw new Exception($"ListWithPropertyNameChild cannot be stored again in DC.Data, key {Key} is greater equal 0." + Environment.NewLine + ToString());
      }

      var isCancelled = false;
      onStoring(ref isCancelled);
      if (isCancelled) return;

      if (Parent.Key<0) {
        throw new Exception($"Cannot store child ListWithPropertyNameChild '{this}'.Parent to ListWithPropertyNameParent '{Parent}' because parent is not stored yet.");
      }
      DC.Data._ListWithPropertyNameChilds.Add(this);
      onStored();
    }
    partial void onStoring(ref bool isCancelled);
    partial void onStored();


    /// <summary>
    /// Estimated number of UTF8 characters needed to write ListWithPropertyNameChild to CSV file
    /// </summary>
    public const int EstimatedLineLength = 23;


    /// <summary>
    /// Write ListWithPropertyNameChild to CSV file
    /// </summary>
    internal static void Write(ListWithPropertyNameChild listWithPropertyNameChild, CsvWriter csvWriter) {
      listWithPropertyNameChild.onCsvWrite();
      csvWriter.WriteDate(listWithPropertyNameChild.Date1);
      csvWriter.WriteDate(listWithPropertyNameChild.Date2);
      if (listWithPropertyNameChild.Parent.Key<0) throw new Exception($"Cannot write listWithPropertyNameChild '{listWithPropertyNameChild}' to CSV File, because Parent is not stored in DC.Data.ListWithPropertyNameParents.");

      csvWriter.Write(listWithPropertyNameChild.Parent.Key.ToString());
    }
    partial void onCsvWrite();


    /// <summary>
    /// Updates ListWithPropertyNameChild with the provided values
    /// </summary>
    public void Update(DateTime date1, DateTime date2, ListWithPropertyNameParent parent) {
      if (Key>=0){
        if (parent.Key<0) {
          throw new Exception($"ListWithPropertyNameChild.Update(): It is illegal to add stored ListWithPropertyNameChild '{this}'" + Environment.NewLine + 
            $"to Parent '{parent}', which is not stored.");
        }
      }
      var clone = new ListWithPropertyNameChild(this);
      var isCancelled = false;
      onUpdating(date1, date2, parent, ref isCancelled);
      if (isCancelled) return;


      //remove not yet updated item from parents which will be removed by update
      var hasParentChanged = Parent!=parent;
      if (hasParentChanged) {
        Parent.RemoveFromChildren(this);
      }

      //update properties and detect if any value has changed
      var isChangeDetected = false;
      var date1Rounded = date1.Floor(Rounding.Days);
      if (Date1!=date1Rounded) {
        Date1 = date1Rounded;
        isChangeDetected = true;
      }
      var date2Rounded = date2.Floor(Rounding.Days);
      if (Date2!=date2Rounded) {
        Date2 = date2Rounded;
        isChangeDetected = true;
      }
      if (Parent!=parent) {
        Parent = parent;
        isChangeDetected = true;
      }

      //add updated item to parents which have been newly added during update
      if (hasParentChanged) {
        Parent.AddToChildren(this);
      }
      if (isChangeDetected) {
        onUpdated(clone);
        if (Key>=0) {
          DC.Data._ListWithPropertyNameChilds.ItemHasChanged(clone, this);
        } else if (DC.Data.IsTransaction) {
          DC.Data.AddTransaction(new TransactionItem(24, TransactionActivityEnum.Update, Key, this, oldItem: clone));
        }
        HasChanged?.Invoke(clone, this);
      }
    }
    partial void onUpdating(DateTime date1, DateTime date2, ListWithPropertyNameParent parent, ref bool isCancelled);
    partial void onUpdated(ListWithPropertyNameChild old);


    /// <summary>
    /// Updates this ListWithPropertyNameChild with values from CSV file
    /// </summary>
    internal static void Update(ListWithPropertyNameChild listWithPropertyNameChild, CsvReader csvReader){
      listWithPropertyNameChild.Date1 = csvReader.ReadDate();
      listWithPropertyNameChild.Date2 = csvReader.ReadDate();
        var parent = DC.Data._ListWithPropertyNameParents.GetItem(csvReader.ReadInt())??
          ListWithPropertyNameParent.NoListWithPropertyNameParent;
      if (listWithPropertyNameChild.Parent!=parent) {
        if (listWithPropertyNameChild.Parent!=ListWithPropertyNameParent.NoListWithPropertyNameParent) {
          listWithPropertyNameChild.Parent.RemoveFromChildren(listWithPropertyNameChild);
        }
        listWithPropertyNameChild.Parent = parent;
        listWithPropertyNameChild.Parent.AddToChildren(listWithPropertyNameChild);
      }
      listWithPropertyNameChild.onCsvUpdate();
    }
    partial void onCsvUpdate();


    /// <summary>
    /// Removes ListWithPropertyNameChild from DC.Data.ListWithPropertyNameChilds.
    /// </summary>
    public void Release() {
      if (Key<0) {
        throw new Exception($"ListWithPropertyNameChild.Release(): ListWithPropertyNameChild '{this}' is not stored in DC.Data, key is {Key}.");
      }
      DC.Data._ListWithPropertyNameChilds.Remove(Key);
      onReleased();
    }
    partial void onReleased();


    /// <summary>
    /// Removes ListWithPropertyNameChild from parents as part of a transaction rollback of the new() statement.
    /// </summary>
    internal static void RollbackItemNew(IStorageItem item) {
      var listWithPropertyNameChild = (ListWithPropertyNameChild) item;
      if (listWithPropertyNameChild.Parent!=ListWithPropertyNameParent.NoListWithPropertyNameParent) {
        listWithPropertyNameChild.Parent.RemoveFromChildren(listWithPropertyNameChild);
      }
      listWithPropertyNameChild.onRollbackItemNew();
    }
    partial void onRollbackItemNew();


    /// <summary>
    /// Releases ListWithPropertyNameChild from DC.Data.ListWithPropertyNameChilds as part of a transaction rollback of Store().
    /// </summary>
    internal static void RollbackItemStore(IStorageItem item) {
      var listWithPropertyNameChild = (ListWithPropertyNameChild) item;
      listWithPropertyNameChild.onRollbackItemStored();
    }
    partial void onRollbackItemStored();


    /// <summary>
    /// Restores the ListWithPropertyNameChild item data as it was before the last update as part of a transaction rollback.
    /// </summary>
    internal static void RollbackItemUpdate(IStorageItem oldStorageItem, IStorageItem newStorageItem) {
      var oldItem = (ListWithPropertyNameChild) oldStorageItem;//an item clone with the values before item was updated
      var item = (ListWithPropertyNameChild) newStorageItem;//is the instance whose values should be restored

      // remove updated item from parents
      var hasParentChanged = oldItem.Parent!=item.Parent;
      if (hasParentChanged) {
        item.Parent.RemoveFromChildren(item);
      }

      // updated item: restore old values
      item.Date1 = oldItem.Date1;
      item.Date2 = oldItem.Date2;
      item.Parent = oldItem.Parent;

      // add item with previous values to parents
      if (hasParentChanged) {
        item.Parent.AddToChildren(item);
      }
      item.onRollbackItemUpdated(oldItem);
    }
    partial void onRollbackItemUpdated(ListWithPropertyNameChild oldListWithPropertyNameChild);


    /// <summary>
    /// Adds ListWithPropertyNameChild to DC.Data.ListWithPropertyNameChilds as part of a transaction rollback of Release().
    /// </summary>
    internal static void RollbackItemRelease(IStorageItem item) {
      var listWithPropertyNameChild = (ListWithPropertyNameChild) item;
      listWithPropertyNameChild.onRollbackItemRelease();
    }
    partial void onRollbackItemRelease();


    /// <summary>
    /// Returns property values for tracing. Parents are shown with their key instead their content.
    /// </summary>
    public string ToTraceString() {
      var returnString =
        $"{this.GetKeyOrHash()}|" +
        $" {Date1.ToShortDateString()}|" +
        $" {Date2.ToShortDateString()}|" +
        $" Parent {Parent.GetKeyOrHash()}";
      onToTraceString(ref returnString);
      return returnString;
    }
    partial void onToTraceString(ref string returnString);


    /// <summary>
    /// Returns property values
    /// </summary>
    public string ToShortString() {
      var returnString =
        $"{Key.ToKeyString()}," +
        $" {Date1.ToShortDateString()}," +
        $" {Date2.ToShortDateString()}," +
        $" {Parent.ToShortString()}";
      onToShortString(ref returnString);
      return returnString;
    }
    partial void onToShortString(ref string returnString);


    /// <summary>
    /// Returns all property names and values
    /// </summary>
    public override string ToString() {
      var returnString =
        $"Key: {Key.ToKeyString()}," +
        $" Date1: {Date1.ToShortDateString()}," +
        $" Date2: {Date2.ToShortDateString()}," +
        $" Parent: {Parent.ToShortString()};";
      onToString(ref returnString);
      return returnString;
    }
    partial void onToString(ref string returnString);
    #endregion
  }
}
