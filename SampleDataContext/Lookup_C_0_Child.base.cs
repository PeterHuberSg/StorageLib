//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by StorageClassGenerator
//
//     Do not change code in this file, it will get lost when the file gets 
//     auto generated again. Write your code into Lookup_C_0_Child.cs.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
using System;
using System.Collections.Generic;
using System.Threading;
using StorageLib;


namespace DataModelSamples  {


  public partial class Lookup_C_0_Child: IStorageItem<Lookup_C_0_Child> {

    #region Properties
    //      ----------

    /// <summary>
    /// Unique identifier for Lookup_C_0_Child. Gets set once Lookup_C_0_Child gets added to DC.Data.
    /// </summary>
    public int Key { get; private set; }
    internal static void SetKey(IStorageItem lookup_C_0_Child, int key, bool _) {
      ((Lookup_C_0_Child)lookup_C_0_Child).Key = key;
    }


    public string Name { get; private set; }


    public Lookup_1_0_Parent? Parent { get; private set; }


    /// <summary>
    /// Headers written to first line in CSV file
    /// </summary>
    internal static readonly string[] Headers = {"Key", "Name", "Parent"};


    /// <summary>
    /// None existing Lookup_C_0_Child, used as a temporary place holder when reading a CSV file
    /// which was not compacted. It might create first a later deleted item linking to a 
    /// deleted parent. In this case, the parent property gets set to NoLookup_C_0_Child. Once the CSV
    /// file is completely read, that child will actually be deleted (released) and Verify()
    /// ensures that there are no stored children with links to NoLookup_C_0_Child.
    /// </summary>
    internal static Lookup_C_0_Child NoLookup_C_0_Child = new Lookup_C_0_Child("NoName", null, isStoring: false);
    #endregion


    #region Events
    //      ------

    /// <summary>
    /// Content of Lookup_C_0_Child has changed. Gets only raised for changes occurring after loading DC.Data with previously stored data.
    /// </summary>
    public event Action</*old*/Lookup_C_0_Child, /*new*/Lookup_C_0_Child>? HasChanged;
    #endregion


    #region Constructors
    //      ------------

    /// <summary>
    /// Lookup_C_0_Child Constructor. If isStoring is true, adds Lookup_C_0_Child to DC.Data.Lookup_C_0_Childs.
    /// </summary>
    public Lookup_C_0_Child(string name, Lookup_1_0_Parent? parent, bool isStoring = true) {
      Key = StorageExtensions.NoKey;
      Name = name;
      Parent = parent;
      onConstruct();
      if (DC.Data.IsTransaction) {
        DC.Data.AddTransaction(new TransactionItem(13,TransactionActivityEnum.New, Key, this));
      }

      if (isStoring) {
        Store();
      }
    }
    partial void onConstruct();


    /// <summary>
    /// Cloning constructor. It will copy all data from original except any collection (children).
    /// </summary>
    #pragma warning disable CS8618 // Children collections are uninitialized.
    public Lookup_C_0_Child(Lookup_C_0_Child original) {
    #pragma warning restore CS8618 //
      Key = StorageExtensions.NoKey;
      Name = original.Name;
      Parent = original.Parent;
      onCloned(this);
    }
    partial void onCloned(Lookup_C_0_Child clone);


    /// <summary>
    /// Constructor for Lookup_C_0_Child read from CSV file
    /// </summary>
    private Lookup_C_0_Child(int key, CsvReader csvReader){
      Key = key;
      Name = csvReader.ReadString();
      var parentKey = csvReader.ReadIntNull();
      if (parentKey.HasValue) {
        Parent = DC.Data._Lookup_1_0_Parents.GetItem(parentKey.Value)?? Lookup_1_0_Parent.NoLookup_1_0_Parent;
      }
      onCsvConstruct();
    }
    partial void onCsvConstruct();


    /// <summary>
    /// New Lookup_C_0_Child read from CSV file
    /// </summary>
    internal static Lookup_C_0_Child Create(int key, CsvReader csvReader) {
      return new Lookup_C_0_Child(key, csvReader);
    }


    /// <summary>
    /// Verify that lookup_C_0_Child.Parent exists.
    /// </summary>
    internal static bool Verify(Lookup_C_0_Child lookup_C_0_Child) {
      if (lookup_C_0_Child.Parent==Lookup_1_0_Parent.NoLookup_1_0_Parent) return false;
      return true;
    }
    #endregion


    #region Methods
    //      -------

    /// <summary>
    /// Adds Lookup_C_0_Child to DC.Data.Lookup_C_0_Childs.<br/>
    /// Throws an Exception when Lookup_C_0_Child is already stored.
    /// </summary>
    public void Store() {
      if (Key>=0) {
        throw new Exception($"Lookup_C_0_Child cannot be stored again in DC.Data, key {Key} is greater equal 0." + Environment.NewLine + ToString());
      }

      var isCancelled = false;
      onStoring(ref isCancelled);
      if (isCancelled) return;

      if (Parent?.Key<0) {
        throw new Exception($"Cannot store child Lookup_C_0_Child '{this}'.Parent to Lookup_1_0_Parent '{Parent}' because parent is not stored yet.");
      }
      DC.Data._Lookup_C_0_Childs.Add(this);
      onStored();
    }
    partial void onStoring(ref bool isCancelled);
    partial void onStored();


    /// <summary>
    /// Estimated number of UTF8 characters needed to write Lookup_C_0_Child to CSV file
    /// </summary>
    public const int EstimatedLineLength = 150;


    /// <summary>
    /// Write Lookup_C_0_Child to CSV file
    /// </summary>
    internal static void Write(Lookup_C_0_Child lookup_C_0_Child, CsvWriter csvWriter) {
      lookup_C_0_Child.onCsvWrite();
      csvWriter.Write(lookup_C_0_Child.Name);
      if (lookup_C_0_Child.Parent is null) {
        csvWriter.WriteNull();
      } else {
        if (lookup_C_0_Child.Parent.Key<0) throw new Exception($"Cannot write lookup_C_0_Child '{lookup_C_0_Child}' to CSV File, because Parent is not stored in DC.Data.Lookup_1_0_Parents.");

        csvWriter.Write(lookup_C_0_Child.Parent.Key.ToString());
      }
    }
    partial void onCsvWrite();


    /// <summary>
    /// Updates Lookup_C_0_Child with the provided values
    /// </summary>
    public void Update(string name, Lookup_1_0_Parent? parent) {
      if (Key>=0){
        if (parent?.Key<0) {
          throw new Exception($"Lookup_C_0_Child.Update(): It is illegal to add stored Lookup_C_0_Child '{this}'" + Environment.NewLine + 
            $"to Parent '{parent}', which is not stored.");
        }
      }
      var clone = new Lookup_C_0_Child(this);
      var isCancelled = false;
      onUpdating(name, parent, ref isCancelled);
      if (isCancelled) return;


      //update properties and detect if any value has changed
      var isChangeDetected = false;
      if (Name!=name) {
        Name = name;
        isChangeDetected = true;
      }
      if (Parent!=parent) {
        Parent = parent;
        isChangeDetected = true;
      }
      if (isChangeDetected) {
        onUpdated(clone);
        if (Key>=0) {
          DC.Data._Lookup_C_0_Childs.ItemHasChanged(clone, this);
        } else if (DC.Data.IsTransaction) {
          DC.Data.AddTransaction(new TransactionItem(13, TransactionActivityEnum.Update, Key, this, oldItem: clone));
        }
        HasChanged?.Invoke(clone, this);
      }
    }
    partial void onUpdating(string name, Lookup_1_0_Parent? parent, ref bool isCancelled);
    partial void onUpdated(Lookup_C_0_Child old);


    /// <summary>
    /// Updates this Lookup_C_0_Child with values from CSV file
    /// </summary>
    internal static void Update(Lookup_C_0_Child lookup_C_0_Child, CsvReader csvReader){
      lookup_C_0_Child.Name = csvReader.ReadString();
      var parentKey = csvReader.ReadIntNull();
      Lookup_1_0_Parent? parent;
      if (parentKey is null) {
        parent = null;
      } else {
        parent = DC.Data._Lookup_1_0_Parents.GetItem(parentKey.Value)??
          Lookup_1_0_Parent.NoLookup_1_0_Parent;
      }
      if (lookup_C_0_Child.Parent is null) {
        if (parent is null) {
          //nothing to do
        } else {
          lookup_C_0_Child.Parent = parent;
        }
      } else {
        if (parent is null) {
          lookup_C_0_Child.Parent = null;
        } else {
          lookup_C_0_Child.Parent = parent;
        }
      }
      lookup_C_0_Child.onCsvUpdate();
    }
    partial void onCsvUpdate();


    /// <summary>
    /// Removes Lookup_C_0_Child from DC.Data.Lookup_C_0_Childs.
    /// </summary>
    public void Release() {
      if (Key<0) {
        throw new Exception($"Lookup_C_0_Child.Release(): Lookup_C_0_Child '{this}' is not stored in DC.Data, key is {Key}.");
      }
      DC.Data._Lookup_C_0_Childs.Remove(Key);
      onReleased();
    }
    partial void onReleased();


    /// <summary>
    /// Undoes the new() statement as part of a transaction rollback.
    /// </summary>
    internal static void RollbackItemNew(IStorageItem item) {
      var lookup_C_0_Child = (Lookup_C_0_Child) item;
      lookup_C_0_Child.onRollbackItemNew();
    }
    partial void onRollbackItemNew();


    /// <summary>
    /// Releases Lookup_C_0_Child from DC.Data.Lookup_C_0_Childs as part of a transaction rollback of Store().
    /// </summary>
    internal static void RollbackItemStore(IStorageItem item) {
      var lookup_C_0_Child = (Lookup_C_0_Child) item;
      lookup_C_0_Child.onRollbackItemStored();
    }
    partial void onRollbackItemStored();


    /// <summary>
    /// Restores the Lookup_C_0_Child item data as it was before the last update as part of a transaction rollback.
    /// </summary>
    internal static void RollbackItemUpdate(IStorageItem oldStorageItem, IStorageItem newStorageItem) {
      var oldItem = (Lookup_C_0_Child) oldStorageItem;//an item clone with the values before item was updated
      var item = (Lookup_C_0_Child) newStorageItem;//is the instance whose values should be restored

      // updated item: restore old values
      item.Name = oldItem.Name;
      item.Parent = oldItem.Parent;
      item.onRollbackItemUpdated(oldItem);
    }
    partial void onRollbackItemUpdated(Lookup_C_0_Child oldLookup_C_0_Child);


    /// <summary>
    /// Adds Lookup_C_0_Child to DC.Data.Lookup_C_0_Childs as part of a transaction rollback of Release().
    /// </summary>
    internal static void RollbackItemRelease(IStorageItem item) {
      var lookup_C_0_Child = (Lookup_C_0_Child) item;
      lookup_C_0_Child.onRollbackItemRelease();
    }
    partial void onRollbackItemRelease();


    /// <summary>
    /// Returns property values for tracing. Parents are shown with their key instead their content.
    /// </summary>
    public string ToTraceString() {
      var returnString =
        $"{this.GetKeyOrHash()}|" +
        $" {Name}|" +
        $" Parent {Parent?.GetKeyOrHash()}";
      onToTraceString(ref returnString);
      return returnString;
    }
    partial void onToTraceString(ref string returnString);


    /// <summary>
    /// Returns property values
    /// </summary>
    public string ToShortString() {
      var returnString =
        $"{Key.ToKeyString()}," +
        $" {Name}," +
        $" {Parent?.ToShortString()}";
      onToShortString(ref returnString);
      return returnString;
    }
    partial void onToShortString(ref string returnString);


    /// <summary>
    /// Returns all property names and values
    /// </summary>
    public override string ToString() {
      var returnString =
        $"Key: {Key.ToKeyString()}," +
        $" Name: {Name}," +
        $" Parent: {Parent?.ToShortString()};";
      onToString(ref returnString);
      return returnString;
    }
    partial void onToString(ref string returnString);
    #endregion
  }
}
