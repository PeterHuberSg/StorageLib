//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by StorageClassGenerator
//
//     Do not change code in this file, it will get lost when the file gets 
//     auto generated again. Write your code into SortedListWithPropertyNameParent.cs.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
using System;
using System.Collections.Generic;
using System.Threading;
using StorageLib;


namespace DataModelSamples  {


  public partial class SortedListWithPropertyNameParent: IStorageItem<SortedListWithPropertyNameParent> {

    #region Properties
    //      ----------

    /// <summary>
    /// Unique identifier for SortedListWithPropertyNameParent. Gets set once SortedListWithPropertyNameParent gets added to DC.Data.
    /// </summary>
    public int Key { get; private set; }
    internal static void SetKey(IStorageItem sortedListWithPropertyNameParent, int key, bool _) {
      ((SortedListWithPropertyNameParent)sortedListWithPropertyNameParent).Key = key;
    }


    public string Name { get; private set; }


    public IStorageReadOnlyDictionary<string, SortedListWithPropertyNameChild> Children => children;
    readonly StorageSortedList<string, SortedListWithPropertyNameChild> children;


    /// <summary>
    /// Headers written to first line in CSV file
    /// </summary>
    internal static readonly string[] Headers = {"Key", "Name"};


    /// <summary>
    /// None existing SortedListWithPropertyNameParent, used as a temporary place holder when reading a CSV file
    /// which was not compacted. It might create first a later deleted item linking to a 
    /// deleted parent. In this case, the parent property gets set to NoSortedListWithPropertyNameParent. Once the CSV
    /// file is completely read, that child will actually be deleted (released) and Verify()
    /// ensures that there are no stored children with links to NoSortedListWithPropertyNameParent.
    /// </summary>
    internal static SortedListWithPropertyNameParent NoSortedListWithPropertyNameParent = new SortedListWithPropertyNameParent("NoName", isStoring: false);
    #endregion


    #region Events
    //      ------

    /// <summary>
    /// Content of SortedListWithPropertyNameParent has changed. Gets only raised for changes occurring after loading DC.Data with previously stored data.
    /// </summary>
    public event Action</*old*/SortedListWithPropertyNameParent, /*new*/SortedListWithPropertyNameParent>? HasChanged;
    #endregion


    #region Constructors
    //      ------------

    /// <summary>
    /// SortedListWithPropertyNameParent Constructor. If isStoring is true, adds SortedListWithPropertyNameParent to DC.Data.SortedListWithPropertyNameParents.
    /// </summary>
    public SortedListWithPropertyNameParent(string name, bool isStoring = true) {
      Key = StorageExtensions.NoKey;
      Name = name;
      children = new StorageSortedList<string, SortedListWithPropertyNameChild>();
      onConstruct();
      if (DC.Data.IsTransaction) {
        DC.Data.AddTransaction(new TransactionItem(35,TransactionActivityEnum.New, Key, this));
      }

      if (isStoring) {
        Store();
      }
    }
    partial void onConstruct();


    /// <summary>
    /// Cloning constructor. It will copy all data from original except any collection (children).
    /// </summary>
    #pragma warning disable CS8618 // Children collections are uninitialized.
    public SortedListWithPropertyNameParent(SortedListWithPropertyNameParent original) {
    #pragma warning restore CS8618 //
      Key = StorageExtensions.NoKey;
      Name = original.Name;
      onCloned(this);
    }
    partial void onCloned(SortedListWithPropertyNameParent clone);


    /// <summary>
    /// Constructor for SortedListWithPropertyNameParent read from CSV file
    /// </summary>
    private SortedListWithPropertyNameParent(int key, CsvReader csvReader){
      Key = key;
      Name = csvReader.ReadString();
      children = new StorageSortedList<string, SortedListWithPropertyNameChild>();
      onCsvConstruct();
    }
    partial void onCsvConstruct();


    /// <summary>
    /// New SortedListWithPropertyNameParent read from CSV file
    /// </summary>
    internal static SortedListWithPropertyNameParent Create(int key, CsvReader csvReader) {
      return new SortedListWithPropertyNameParent(key, csvReader);
    }
    #endregion


    #region Methods
    //      -------

    /// <summary>
    /// Adds SortedListWithPropertyNameParent to DC.Data.SortedListWithPropertyNameParents.<br/>
    /// Throws an Exception when SortedListWithPropertyNameParent is already stored.
    /// </summary>
    public void Store() {
      if (Key>=0) {
        throw new Exception($"SortedListWithPropertyNameParent cannot be stored again in DC.Data, key {Key} is greater equal 0." + Environment.NewLine + ToString());
      }

      var isCancelled = false;
      onStoring(ref isCancelled);
      if (isCancelled) return;

      DC.Data._SortedListWithPropertyNameParents.Add(this);
      onStored();
    }
    partial void onStoring(ref bool isCancelled);
    partial void onStored();


    /// <summary>
    /// Estimated number of UTF8 characters needed to write SortedListWithPropertyNameParent to CSV file
    /// </summary>
    public const int EstimatedLineLength = 150;


    /// <summary>
    /// Write SortedListWithPropertyNameParent to CSV file
    /// </summary>
    internal static void Write(SortedListWithPropertyNameParent sortedListWithPropertyNameParent, CsvWriter csvWriter) {
      sortedListWithPropertyNameParent.onCsvWrite();
      csvWriter.Write(sortedListWithPropertyNameParent.Name);
    }
    partial void onCsvWrite();


    /// <summary>
    /// Updates SortedListWithPropertyNameParent with the provided values
    /// </summary>
    public void Update(string name) {
      var clone = new SortedListWithPropertyNameParent(this);
      var isCancelled = false;
      onUpdating(name, ref isCancelled);
      if (isCancelled) return;


      //update properties and detect if any value has changed
      var isChangeDetected = false;
      if (Name!=name) {
        Name = name;
        isChangeDetected = true;
      }
      if (isChangeDetected) {
        onUpdated(clone);
        if (Key>=0) {
          DC.Data._SortedListWithPropertyNameParents.ItemHasChanged(clone, this);
        } else if (DC.Data.IsTransaction) {
          DC.Data.AddTransaction(new TransactionItem(35, TransactionActivityEnum.Update, Key, this, oldItem: clone));
        }
        HasChanged?.Invoke(clone, this);
      }
    }
    partial void onUpdating(string name, ref bool isCancelled);
    partial void onUpdated(SortedListWithPropertyNameParent old);


    /// <summary>
    /// Updates this SortedListWithPropertyNameParent with values from CSV file
    /// </summary>
    internal static void Update(SortedListWithPropertyNameParent sortedListWithPropertyNameParent, CsvReader csvReader){
      sortedListWithPropertyNameParent.Name = csvReader.ReadString();
      sortedListWithPropertyNameParent.onCsvUpdate();
    }
    partial void onCsvUpdate();


    /// <summary>
    /// Add sortedListWithPropertyNameChild to Children.
    /// </summary>
    internal void AddToChildren(SortedListWithPropertyNameChild sortedListWithPropertyNameChild) {
#if DEBUG
      if (sortedListWithPropertyNameChild==SortedListWithPropertyNameChild.NoSortedListWithPropertyNameChild) throw new Exception();
      if ((sortedListWithPropertyNameChild.Key>=0)&&(Key<0)) throw new Exception();
      if (children.ContainsKey(sortedListWithPropertyNameChild.Name)) throw new Exception();
#endif
      children.Add(sortedListWithPropertyNameChild.Name, sortedListWithPropertyNameChild);
      onAddedToChildren(sortedListWithPropertyNameChild);
    }
    partial void onAddedToChildren(SortedListWithPropertyNameChild sortedListWithPropertyNameChild);


    /// <summary>
    /// Removes sortedListWithPropertyNameChild from SortedListWithPropertyNameParent.
    /// </summary>
    internal void RemoveFromChildren(SortedListWithPropertyNameChild sortedListWithPropertyNameChild) {
#if DEBUG
      if (!children.Remove(sortedListWithPropertyNameChild.Name)) throw new Exception();
#else
        children.Remove(sortedListWithPropertyNameChild.Name);
#endif
      onRemovedFromChildren(sortedListWithPropertyNameChild);
    }
    partial void onRemovedFromChildren(SortedListWithPropertyNameChild sortedListWithPropertyNameChild);


    /// <summary>
    /// Removes SortedListWithPropertyNameParent from DC.Data.SortedListWithPropertyNameParents.
    /// </summary>
    public void Release() {
      if (Key<0) {
        throw new Exception($"SortedListWithPropertyNameParent.Release(): SortedListWithPropertyNameParent '{this}' is not stored in DC.Data, key is {Key}.");
      }
      foreach (var sortedListWithPropertyNameChild in Children.Values) {
        if (sortedListWithPropertyNameChild?.Key>=0) {
          throw new Exception($"Cannot release SortedListWithPropertyNameParent '{this}' " + Environment.NewLine + 
            $"because '{sortedListWithPropertyNameChild}' in SortedListWithPropertyNameParent.Children is still stored.");
        }
      }
      DC.Data._SortedListWithPropertyNameParents.Remove(Key);
      onReleased();
    }
    partial void onReleased();


    /// <summary>
    /// Undoes the new() statement as part of a transaction rollback.
    /// </summary>
    internal static void RollbackItemNew(IStorageItem item) {
      var sortedListWithPropertyNameParent = (SortedListWithPropertyNameParent) item;
      sortedListWithPropertyNameParent.onRollbackItemNew();
    }
    partial void onRollbackItemNew();


    /// <summary>
    /// Releases SortedListWithPropertyNameParent from DC.Data.SortedListWithPropertyNameParents as part of a transaction rollback of Store().
    /// </summary>
    internal static void RollbackItemStore(IStorageItem item) {
      var sortedListWithPropertyNameParent = (SortedListWithPropertyNameParent) item;
      sortedListWithPropertyNameParent.onRollbackItemStored();
    }
    partial void onRollbackItemStored();


    /// <summary>
    /// Restores the SortedListWithPropertyNameParent item data as it was before the last update as part of a transaction rollback.
    /// </summary>
    internal static void RollbackItemUpdate(IStorageItem oldStorageItem, IStorageItem newStorageItem) {
      var oldItem = (SortedListWithPropertyNameParent) oldStorageItem;//an item clone with the values before item was updated
      var item = (SortedListWithPropertyNameParent) newStorageItem;//is the instance whose values should be restored

      // updated item: restore old values
      item.Name = oldItem.Name;
      item.onRollbackItemUpdated(oldItem);
    }
    partial void onRollbackItemUpdated(SortedListWithPropertyNameParent oldSortedListWithPropertyNameParent);


    /// <summary>
    /// Adds SortedListWithPropertyNameParent to DC.Data.SortedListWithPropertyNameParents as part of a transaction rollback of Release().
    /// </summary>
    internal static void RollbackItemRelease(IStorageItem item) {
      var sortedListWithPropertyNameParent = (SortedListWithPropertyNameParent) item;
      sortedListWithPropertyNameParent.onRollbackItemRelease();
    }
    partial void onRollbackItemRelease();


    /// <summary>
    /// Returns property values for tracing. Parents are shown with their key instead their content.
    /// </summary>
    public string ToTraceString() {
      var returnString =
        $"{this.GetKeyOrHash()}|" +
        $" {Name}";
      onToTraceString(ref returnString);
      return returnString;
    }
    partial void onToTraceString(ref string returnString);


    /// <summary>
    /// Returns property values
    /// </summary>
    public string ToShortString() {
      var returnString =
        $"{Key.ToKeyString()}," +
        $" {Name}";
      onToShortString(ref returnString);
      return returnString;
    }
    partial void onToShortString(ref string returnString);


    /// <summary>
    /// Returns all property names and values
    /// </summary>
    public override string ToString() {
      var returnString =
        $"Key: {Key.ToKeyString()}," +
        $" Name: {Name}," +
        $" Children: {Children.Count}," +
        $" ChildrenStored: {Children.CountStoredItems};";
      onToString(ref returnString);
      return returnString;
    }
    partial void onToString(ref string returnString);
    #endregion
  }
}
