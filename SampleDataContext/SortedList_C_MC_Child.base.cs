//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by StorageClassGenerator
//
//     Do not change code in this file, it will get lost when the file gets 
//     auto generated again. Write your code into SortedList_C_MC_Child.cs.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
using System;
using System.Collections.Generic;
using System.Threading;
using StorageLib;


namespace DataModelSamples  {


  public partial class SortedList_C_MC_Child: IStorageItemGeneric<SortedList_C_MC_Child> {

    #region Properties
    //      ----------

    /// <summary>
    /// Unique identifier for SortedList_C_MC_Child. Gets set once SortedList_C_MC_Child gets added to DC.Data.
    /// </summary>
    public int Key { get; private set; }
    internal static void SetKey(IStorageItem sortedList_C_MC_Child, int key, bool _) {
      ((SortedList_C_MC_Child)sortedList_C_MC_Child).Key = key;
    }


    public string Name { get; private set; }


    public SortedList_C_MC_Parent? Parent { get; private set; }


    /// <summary>
    /// Headers written to first line in CSV file
    /// </summary>
    internal static readonly string[] Headers = {"Key", "Name", "Parent"};


    /// <summary>
    /// None existing SortedList_C_MC_Child
    /// </summary>
    internal static SortedList_C_MC_Child NoSortedList_C_MC_Child = new SortedList_C_MC_Child("NoName", null, isStoring: false);
    #endregion


    #region Events
    //      ------

    /// <summary>
    /// Content of SortedList_C_MC_Child has changed. Gets only raised for changes occurring after loading DC.Data with previously stored data.
    /// </summary>
    public event Action</*old*/SortedList_C_MC_Child, /*new*/SortedList_C_MC_Child>? HasChanged;
    #endregion


    #region Constructors
    //      ------------

    /// <summary>
    /// SortedList_C_MC_Child Constructor. If isStoring is true, adds SortedList_C_MC_Child to DC.Data.SortedList_C_MC_Childs.
    /// </summary>
    public SortedList_C_MC_Child(string name, SortedList_C_MC_Parent? parent, bool isStoring = true) {
      Key = StorageExtensions.NoKey;
      Name = name;
      Parent = parent;
      if (Parent!=null) {
        Parent.AddToChildren(this);
      }
      onConstruct();
      if (DC.Data.IsTransaction) {
        DC.Data.AddTransaction(new TransactionItem(34,TransactionActivityEnum.New, Key, this));
      }

      if (isStoring) {
        Store();
      }
    }
    partial void onConstruct();


    /// <summary>
    /// Cloning constructor. It will copy all data from original except any collection (children).
    /// </summary>
    #pragma warning disable CS8618 // Children collections are uninitialized.
    public SortedList_C_MC_Child(SortedList_C_MC_Child original) {
    #pragma warning restore CS8618 //
      Key = StorageExtensions.NoKey;
      Name = original.Name;
      Parent = original.Parent;
      onCloned(this);
    }
    partial void onCloned(SortedList_C_MC_Child clone);


    /// <summary>
    /// Constructor for SortedList_C_MC_Child read from CSV file
    /// </summary>
    private SortedList_C_MC_Child(int key, CsvReader csvReader){
      Key = key;
      Name = csvReader.ReadString();
      var parentKey = csvReader.ReadIntNull();
      if (parentKey.HasValue) {
        Parent = DC.Data._SortedList_C_MC_Parents.GetItem(parentKey.Value)?? SortedList_C_MC_Parent.NoSortedList_C_MC_Parent;
      }
      if (parentKey.HasValue && Parent!=SortedList_C_MC_Parent.NoSortedList_C_MC_Parent) {
        Parent!.AddToChildren(this);
      }
      onCsvConstruct();
    }
    partial void onCsvConstruct();


    /// <summary>
    /// New SortedList_C_MC_Child read from CSV file
    /// </summary>
    internal static SortedList_C_MC_Child Create(int key, CsvReader csvReader) {
      return new SortedList_C_MC_Child(key, csvReader);
    }


    /// <summary>
    /// Verify that sortedList_C_MC_Child.Parent exists.
    /// </summary>
    internal static bool Verify(SortedList_C_MC_Child sortedList_C_MC_Child) {
      if (sortedList_C_MC_Child.Parent==SortedList_C_MC_Parent.NoSortedList_C_MC_Parent) return false;
      return true;
    }
    #endregion


    #region Methods
    //      -------

    /// <summary>
    /// Adds SortedList_C_MC_Child to DC.Data.SortedList_C_MC_Childs.<br/>
    /// Throws an Exception when SortedList_C_MC_Child is already stored.
    /// </summary>
    public void Store() {
      if (Key>=0) {
        throw new Exception($"SortedList_C_MC_Child cannot be stored again in DC.Data, key {Key} is greater equal 0." + Environment.NewLine + ToString());
      }

      var isCancelled = false;
      onStoring(ref isCancelled);
      if (isCancelled) return;

      if (Parent?.Key<0) {
        throw new Exception($"Cannot store child SortedList_C_MC_Child '{this}'.Parent to SortedList_C_MC_Parent '{Parent}' because parent is not stored yet.");
      }
      DC.Data._SortedList_C_MC_Childs.Add(this);
      onStored();
    }
    partial void onStoring(ref bool isCancelled);
    partial void onStored();


    /// <summary>
    /// Estimated number of UTF8 characters needed to write SortedList_C_MC_Child to CSV file
    /// </summary>
    public const int EstimatedLineLength = 150;


    /// <summary>
    /// Write SortedList_C_MC_Child to CSV file
    /// </summary>
    internal static void Write(SortedList_C_MC_Child sortedList_C_MC_Child, CsvWriter csvWriter) {
      sortedList_C_MC_Child.onCsvWrite();
      csvWriter.Write(sortedList_C_MC_Child.Name);
      if (sortedList_C_MC_Child.Parent is null) {
        csvWriter.WriteNull();
      } else {
        if (sortedList_C_MC_Child.Parent.Key<0) throw new Exception($"Cannot write sortedList_C_MC_Child '{sortedList_C_MC_Child}' to CSV File, because Parent is not stored in DC.Data.SortedList_C_MC_Parents.");

        csvWriter.Write(sortedList_C_MC_Child.Parent.Key.ToString());
      }
    }
    partial void onCsvWrite();


    /// <summary>
    /// Updates SortedList_C_MC_Child with the provided values
    /// </summary>
    public void Update(string name, SortedList_C_MC_Parent? parent) {
      if (Key>=0){
        if (parent?.Key<0) {
          throw new Exception($"SortedList_C_MC_Child.Update(): It is illegal to add stored SortedList_C_MC_Child '{this}'" + Environment.NewLine + 
            $"to Parent '{parent}', which is not stored.");
        }
      }
      var clone = new SortedList_C_MC_Child(this);
      var isCancelled = false;
      onUpdating(name, parent, ref isCancelled);
      if (isCancelled) return;


      //remove not yet updated item from parents which will be removed by update
      var hasParentChanged = Parent!=parent || Name!=name;
      if (Parent is not null && hasParentChanged) {
        Parent.RemoveFromChildren(this);
      }

      //update properties and detect if any value has changed
      var isChangeDetected = false;
      if (Name!=name) {
        Name = name;
        isChangeDetected = true;
      }
      if (Parent!=parent) {
        Parent = parent;
        isChangeDetected = true;
      }

      //add updated item to parents which have been newly added during update
      if (Parent is not null && hasParentChanged) {
        Parent.AddToChildren(this);
      }
      if (isChangeDetected) {
        onUpdated(clone);
        if (Key>=0) {
          DC.Data._SortedList_C_MC_Childs.ItemHasChanged(clone, this);
        } else if (DC.Data.IsTransaction) {
          DC.Data.AddTransaction(new TransactionItem(34, TransactionActivityEnum.Update, Key, this, oldItem: clone));
        }
        HasChanged?.Invoke(clone, this);
      }
    }
    partial void onUpdating(string name, SortedList_C_MC_Parent? parent, ref bool isCancelled);
    partial void onUpdated(SortedList_C_MC_Child old);


    /// <summary>
    /// Updates this SortedList_C_MC_Child with values from CSV file
    /// </summary>
    internal static void Update(SortedList_C_MC_Child sortedList_C_MC_Child, CsvReader csvReader){
      sortedList_C_MC_Child.Name = csvReader.ReadString();
      var parentKey = csvReader.ReadIntNull();
      SortedList_C_MC_Parent? parent;
      if (parentKey is null) {
        parent = null;
      } else {
        parent = DC.Data._SortedList_C_MC_Parents.GetItem(parentKey.Value)??
          SortedList_C_MC_Parent.NoSortedList_C_MC_Parent;
      }
      if (sortedList_C_MC_Child.Parent is null) {
        if (parent is null) {
          //nothing to do
        } else {
          sortedList_C_MC_Child.Parent = parent;
          sortedList_C_MC_Child.Parent.AddToChildren(sortedList_C_MC_Child);
        }
      } else {
        if (parent is null) {
          if (sortedList_C_MC_Child.Parent!=SortedList_C_MC_Parent.NoSortedList_C_MC_Parent) {
            sortedList_C_MC_Child.Parent.RemoveFromChildren(sortedList_C_MC_Child);
          }
          sortedList_C_MC_Child.Parent = null;
        } else {
          if (sortedList_C_MC_Child.Parent!=SortedList_C_MC_Parent.NoSortedList_C_MC_Parent) {
            sortedList_C_MC_Child.Parent.RemoveFromChildren(sortedList_C_MC_Child);
          }
          sortedList_C_MC_Child.Parent = parent;
          sortedList_C_MC_Child.Parent.AddToChildren(sortedList_C_MC_Child);
        }
      }
      sortedList_C_MC_Child.onCsvUpdate();
    }
    partial void onCsvUpdate();


    /// <summary>
    /// Removes SortedList_C_MC_Child from DC.Data.SortedList_C_MC_Childs.
    /// </summary>
    public void Release() {
      if (Key<0) {
        throw new Exception($"SortedList_C_MC_Child.Release(): SortedList_C_MC_Child '{this}' is not stored in DC.Data, key is {Key}.");
      }
      onReleased();
      DC.Data._SortedList_C_MC_Childs.Remove(Key);
    }
    partial void onReleased();


    /// <summary>
    /// Removes SortedList_C_MC_Child from parents as part of a transaction rollback of the new() statement.
    /// </summary>
    internal static void RollbackItemNew(IStorageItem item) {
      var sortedList_C_MC_Child = (SortedList_C_MC_Child) item;
      if (sortedList_C_MC_Child.Parent!=null && sortedList_C_MC_Child.Parent!=SortedList_C_MC_Parent.NoSortedList_C_MC_Parent) {
        sortedList_C_MC_Child.Parent.RemoveFromChildren(sortedList_C_MC_Child);
      }
      sortedList_C_MC_Child.onRollbackItemNew();
    }
    partial void onRollbackItemNew();


    /// <summary>
    /// Releases SortedList_C_MC_Child from DC.Data.SortedList_C_MC_Childs as part of a transaction rollback of Store().
    /// </summary>
    internal static void RollbackItemStore(IStorageItem item) {
      var sortedList_C_MC_Child = (SortedList_C_MC_Child) item;
      sortedList_C_MC_Child.onRollbackItemStored();
    }
    partial void onRollbackItemStored();


    /// <summary>
    /// Restores the SortedList_C_MC_Child item data as it was before the last update as part of a transaction rollback.
    /// </summary>
    internal static void RollbackItemUpdate(IStorageItem oldStorageItem, IStorageItem newStorageItem) {
      var oldItem = (SortedList_C_MC_Child) oldStorageItem;//an item clone with the values before item was updated
      var item = (SortedList_C_MC_Child) newStorageItem;//is the instance whose values should be restored

      // remove updated item from parents
      var hasParentChanged = oldItem.Parent!=item.Parent || oldItem.Name!=item.Name;
      if (hasParentChanged && item.Parent is not null) {
        item.Parent.RemoveFromChildren(item);
      }

      // updated item: restore old values
      item.Name = oldItem.Name;
      item.Parent = oldItem.Parent;

      // add item with previous values to parents
      if (hasParentChanged && item.Parent is not null) {
        item.Parent.AddToChildren(item);
      }
      item.onRollbackItemUpdated(oldItem);
    }
    partial void onRollbackItemUpdated(SortedList_C_MC_Child oldSortedList_C_MC_Child);


    /// <summary>
    /// Adds SortedList_C_MC_Child to DC.Data.SortedList_C_MC_Childs as part of a transaction rollback of Release().
    /// </summary>
    internal static void RollbackItemRelease(IStorageItem item) {
      var sortedList_C_MC_Child = (SortedList_C_MC_Child) item;
      sortedList_C_MC_Child.onRollbackItemRelease();
    }
    partial void onRollbackItemRelease();


    /// <summary>
    /// Returns property values for tracing. Parents are shown with their key instead their content.
    /// </summary>
    public string ToTraceString() {
      var returnString =
        $"{this.GetKeyOrHash()}|" +
        $" {Name}|" +
        $" Parent {Parent?.GetKeyOrHash()}";
      onToTraceString(ref returnString);
      return returnString;
    }
    partial void onToTraceString(ref string returnString);


    /// <summary>
    /// Returns property values
    /// </summary>
    public string ToShortString() {
      var returnString =
        $"{Key.ToKeyString()}," +
        $" {Name}," +
        $" {Parent?.ToShortString()}";
      onToShortString(ref returnString);
      return returnString;
    }
    partial void onToShortString(ref string returnString);


    /// <summary>
    /// Returns all property names and values
    /// </summary>
    public override string ToString() {
      var returnString =
        $"Key: {Key.ToKeyString()}," +
        $" Name: {Name}," +
        $" Parent: {Parent?.ToShortString()};";
      onToString(ref returnString);
      return returnString;
    }
    partial void onToString(ref string returnString);
    #endregion
  }
}
