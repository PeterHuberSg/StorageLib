//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by StorageClassGenerator
//
//     Do not change code in this file, it will get lost when the file gets 
//     auto generated again. Write your code into ConditionalUnconditionalPropertyChild.cs.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
using System;
using System.Collections.Generic;
using System.Threading;
using StorageLib;


namespace DataModelSamples  {


  public partial class ConditionalUnconditionalPropertyChild: IStorageItemGeneric<ConditionalUnconditionalPropertyChild> {

    #region Properties
    //      ----------

    /// <summary>
    /// Unique identifier for ConditionalUnconditionalPropertyChild. Gets set once ConditionalUnconditionalPropertyChild gets added to DC.Data.
    /// </summary>
    public int Key { get; private set; }
    internal static void SetKey(IStorageItem conditionalUnconditionalPropertyChild, int key, bool _) {
      ((ConditionalUnconditionalPropertyChild)conditionalUnconditionalPropertyChild).Key = key;
    }


    public string? ConditionalString { get; private set; }


    public string UnconditionalString { get; private set; }


    /// <summary>
    /// Headers written to first line in CSV file
    /// </summary>
    internal static readonly string[] Headers = {"Key", "ConditionalString", "UnconditionalString"};


    /// <summary>
    /// None existing ConditionalUnconditionalPropertyChild
    /// </summary>
    internal static ConditionalUnconditionalPropertyChild NoConditionalUnconditionalPropertyChild = new ConditionalUnconditionalPropertyChild(null, "NoUnconditionalString", isStoring: false);
    #endregion


    #region Events
    //      ------

    /// <summary>
    /// Content of ConditionalUnconditionalPropertyChild has changed. Gets only raised for changes occurring after loading DC.Data with previously stored data.
    /// </summary>
    public event Action</*old*/ConditionalUnconditionalPropertyChild, /*new*/ConditionalUnconditionalPropertyChild>? HasChanged;
    #endregion


    #region Constructors
    //      ------------

    /// <summary>
    /// ConditionalUnconditionalPropertyChild Constructor. If isStoring is true, adds ConditionalUnconditionalPropertyChild to DC.Data.ConditionalUnconditionalPropertyChilds.
    /// </summary>
    public ConditionalUnconditionalPropertyChild(string? conditionalString, string unconditionalString, bool isStoring = true) {
      Key = StorageExtensions.NoKey;
      ConditionalString = conditionalString;
      UnconditionalString = unconditionalString;
      onConstruct();
      if (DC.Data.IsTransaction) {
        DC.Data.AddTransaction(new TransactionItem(6,TransactionActivityEnum.New, Key, this));
      }

      if (isStoring) {
        Store();
      }
    }
    partial void onConstruct();


    /// <summary>
    /// Cloning constructor. It will copy all data from original except any collection (children).
    /// </summary>
    #pragma warning disable CS8618 // Children collections are uninitialized.
    public ConditionalUnconditionalPropertyChild(ConditionalUnconditionalPropertyChild original) {
    #pragma warning restore CS8618 //
      Key = StorageExtensions.NoKey;
      ConditionalString = original.ConditionalString;
      UnconditionalString = original.UnconditionalString;
      onCloned(this);
    }
    partial void onCloned(ConditionalUnconditionalPropertyChild clone);


    /// <summary>
    /// Constructor for ConditionalUnconditionalPropertyChild read from CSV file
    /// </summary>
    private ConditionalUnconditionalPropertyChild(int key, CsvReader csvReader){
      Key = key;
      ConditionalString = csvReader.ReadStringNull();
      UnconditionalString = csvReader.ReadString();
      onCsvConstruct();
    }
    partial void onCsvConstruct();


    /// <summary>
    /// New ConditionalUnconditionalPropertyChild read from CSV file
    /// </summary>
    internal static ConditionalUnconditionalPropertyChild Create(int key, CsvReader csvReader) {
      return new ConditionalUnconditionalPropertyChild(key, csvReader);
    }
    #endregion


    #region Methods
    //      -------

    /// <summary>
    /// Adds ConditionalUnconditionalPropertyChild to DC.Data.ConditionalUnconditionalPropertyChilds.<br/>
    /// Throws an Exception when ConditionalUnconditionalPropertyChild is already stored.
    /// </summary>
    public void Store() {
      if (Key>=0) {
        throw new Exception($"ConditionalUnconditionalPropertyChild cannot be stored again in DC.Data, key {Key} is greater equal 0." + Environment.NewLine + ToString());
      }

      var isCancelled = false;
      onStoring(ref isCancelled);
      if (isCancelled) return;

      DC.Data._ConditionalUnconditionalPropertyChilds.Add(this);
      onStored();
    }
    partial void onStoring(ref bool isCancelled);
    partial void onStored();


    /// <summary>
    /// Estimated number of UTF8 characters needed to write ConditionalUnconditionalPropertyChild to CSV file
    /// </summary>
    public const int EstimatedLineLength = 300;


    /// <summary>
    /// Write ConditionalUnconditionalPropertyChild to CSV file
    /// </summary>
    internal static void Write(ConditionalUnconditionalPropertyChild conditionalUnconditionalPropertyChild, CsvWriter csvWriter) {
      conditionalUnconditionalPropertyChild.onCsvWrite();
      csvWriter.Write(conditionalUnconditionalPropertyChild.ConditionalString);
      csvWriter.Write(conditionalUnconditionalPropertyChild.UnconditionalString);
    }
    partial void onCsvWrite();


    /// <summary>
    /// Updates ConditionalUnconditionalPropertyChild with the provided values
    /// </summary>
    public void Update(string? conditionalString, string unconditionalString) {
      var clone = new ConditionalUnconditionalPropertyChild(this);
      var isCancelled = false;
      onUpdating(conditionalString, unconditionalString, ref isCancelled);
      if (isCancelled) return;


      //update properties and detect if any value has changed
      var isChangeDetected = false;
      if (ConditionalString!=conditionalString) {
        ConditionalString = conditionalString;
        isChangeDetected = true;
      }
      if (UnconditionalString!=unconditionalString) {
        UnconditionalString = unconditionalString;
        isChangeDetected = true;
      }
      if (isChangeDetected) {
        onUpdated(clone);
        if (Key>=0) {
          DC.Data._ConditionalUnconditionalPropertyChilds.ItemHasChanged(clone, this);
        } else if (DC.Data.IsTransaction) {
          DC.Data.AddTransaction(new TransactionItem(6, TransactionActivityEnum.Update, Key, this, oldItem: clone));
        }
        HasChanged?.Invoke(clone, this);
      }
    }
    partial void onUpdating(string? conditionalString, string unconditionalString, ref bool isCancelled);
    partial void onUpdated(ConditionalUnconditionalPropertyChild old);


    /// <summary>
    /// Updates this ConditionalUnconditionalPropertyChild with values from CSV file
    /// </summary>
    internal static void Update(ConditionalUnconditionalPropertyChild conditionalUnconditionalPropertyChild, CsvReader csvReader){
      conditionalUnconditionalPropertyChild.ConditionalString = csvReader.ReadStringNull();
      conditionalUnconditionalPropertyChild.UnconditionalString = csvReader.ReadString();
      conditionalUnconditionalPropertyChild.onCsvUpdate();
    }
    partial void onCsvUpdate();


    /// <summary>
    /// Removes ConditionalUnconditionalPropertyChild from DC.Data.ConditionalUnconditionalPropertyChilds.
    /// </summary>
    public void Release() {
      if (Key<0) {
        throw new Exception($"ConditionalUnconditionalPropertyChild.Release(): ConditionalUnconditionalPropertyChild '{this}' is not stored in DC.Data, key is {Key}.");
      }
      onReleased();
      DC.Data._ConditionalUnconditionalPropertyChilds.Remove(Key);
    }
    partial void onReleased();


    /// <summary>
    /// Undoes the new() statement as part of a transaction rollback.
    /// </summary>
    internal static void RollbackItemNew(IStorageItem item) {
      var conditionalUnconditionalPropertyChild = (ConditionalUnconditionalPropertyChild) item;
      conditionalUnconditionalPropertyChild.onRollbackItemNew();
    }
    partial void onRollbackItemNew();


    /// <summary>
    /// Releases ConditionalUnconditionalPropertyChild from DC.Data.ConditionalUnconditionalPropertyChilds as part of a transaction rollback of Store().
    /// </summary>
    internal static void RollbackItemStore(IStorageItem item) {
      var conditionalUnconditionalPropertyChild = (ConditionalUnconditionalPropertyChild) item;
      conditionalUnconditionalPropertyChild.onRollbackItemStored();
    }
    partial void onRollbackItemStored();


    /// <summary>
    /// Restores the ConditionalUnconditionalPropertyChild item data as it was before the last update as part of a transaction rollback.
    /// </summary>
    internal static void RollbackItemUpdate(IStorageItem oldStorageItem, IStorageItem newStorageItem) {
      var oldItem = (ConditionalUnconditionalPropertyChild) oldStorageItem;//an item clone with the values before item was updated
      var item = (ConditionalUnconditionalPropertyChild) newStorageItem;//is the instance whose values should be restored

      // updated item: restore old values
      item.ConditionalString = oldItem.ConditionalString;
      item.UnconditionalString = oldItem.UnconditionalString;
      item.onRollbackItemUpdated(oldItem);
    }
    partial void onRollbackItemUpdated(ConditionalUnconditionalPropertyChild oldConditionalUnconditionalPropertyChild);


    /// <summary>
    /// Adds ConditionalUnconditionalPropertyChild to DC.Data.ConditionalUnconditionalPropertyChilds as part of a transaction rollback of Release().
    /// </summary>
    internal static void RollbackItemRelease(IStorageItem item) {
      var conditionalUnconditionalPropertyChild = (ConditionalUnconditionalPropertyChild) item;
      conditionalUnconditionalPropertyChild.onRollbackItemRelease();
    }
    partial void onRollbackItemRelease();


    /// <summary>
    /// Returns property values for tracing. Parents are shown with their key instead their content.
    /// </summary>
    public string ToTraceString() {
      var returnString =
        $"{this.GetKeyOrHash()}|" +
        $" {ConditionalString}|" +
        $" {UnconditionalString}";
      onToTraceString(ref returnString);
      return returnString;
    }
    partial void onToTraceString(ref string returnString);


    /// <summary>
    /// Returns property values
    /// </summary>
    public string ToShortString() {
      var returnString =
        $"{Key.ToKeyString()}," +
        $" {ConditionalString}," +
        $" {UnconditionalString}";
      onToShortString(ref returnString);
      return returnString;
    }
    partial void onToShortString(ref string returnString);


    /// <summary>
    /// Returns all property names and values
    /// </summary>
    public override string ToString() {
      var returnString =
        $"Key: {Key.ToKeyString()}," +
        $" ConditionalString: {ConditionalString}," +
        $" UnconditionalString: {UnconditionalString};";
      onToString(ref returnString);
      return returnString;
    }
    partial void onToString(ref string returnString);
    #endregion
  }
}
