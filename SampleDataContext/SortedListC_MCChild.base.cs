//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by StorageClassGenerator
//
//     Do not change code in this file, it will get lost when the file gets 
//     auto generated again. Write your code into SortedListC_MCChild.cs.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
using System;
using System.Collections.Generic;
using System.Threading;
using StorageLib;


namespace DataModelSamples  {


  public partial class SortedListC_MCChild: IStorageItemGeneric<SortedListC_MCChild> {

    #region Properties
    //      ----------

    /// <summary>
    /// Unique identifier for SortedListC_MCChild. Gets set once SortedListC_MCChild gets added to DC.Data.
    /// </summary>
    public int Key { get; private set; }
    internal static void SetKey(IStorageItem sortedListC_MCChild, int key, bool _) {
      ((SortedListC_MCChild)sortedListC_MCChild).Key = key;
    }


    public string Name { get; private set; }


    public SortedListC_MCParent? Parent { get; private set; }


    /// <summary>
    /// Headers written to first line in CSV file
    /// </summary>
    internal static readonly string[] Headers = {"Key", "Name", "Parent"};


    /// <summary>
    /// None existing SortedListC_MCChild
    /// </summary>
    internal static SortedListC_MCChild NoSortedListC_MCChild = new SortedListC_MCChild("NoName", null, isStoring: false);
    #endregion


    #region Events
    //      ------

    /// <summary>
    /// Content of SortedListC_MCChild has changed. Gets only raised for changes occurring after loading DC.Data with previously stored data.
    /// </summary>
    public event Action</*old*/SortedListC_MCChild, /*new*/SortedListC_MCChild>? HasChanged;
    #endregion


    #region Constructors
    //      ------------

    /// <summary>
    /// SortedListC_MCChild Constructor. If isStoring is true, adds SortedListC_MCChild to DC.Data.SortedListC_MCChilds.
    /// </summary>
    public SortedListC_MCChild(string name, SortedListC_MCParent? parent, bool isStoring = true) {
      Key = StorageExtensions.NoKey;
      Name = name;
      Parent = parent;
      if (Parent!=null) {
        Parent.AddToChildren(this);
      }
      onConstruct();
      if (DC.Data.IsTransaction) {
        DC.Data.AddTransaction(new TransactionItem(16,TransactionActivityEnum.New, Key, this));
      }

      if (isStoring) {
        Store();
      }
    }
    partial void onConstruct();


    /// <summary>
    /// Cloning constructor. It will copy all data from original except any collection (children).
    /// </summary>
    #pragma warning disable CS8618 // Children collections are uninitialized.
    public SortedListC_MCChild(SortedListC_MCChild original) {
    #pragma warning restore CS8618 //
      Key = StorageExtensions.NoKey;
      Name = original.Name;
      Parent = original.Parent;
      onCloned(this);
    }
    partial void onCloned(SortedListC_MCChild clone);


    /// <summary>
    /// Constructor for SortedListC_MCChild read from CSV file
    /// </summary>
    private SortedListC_MCChild(int key, CsvReader csvReader){
      Key = key;
      Name = csvReader.ReadString();
      var parentKey = csvReader.ReadIntNull();
      if (parentKey.HasValue) {
        Parent = DC.Data._SortedListC_MCParents.GetItem(parentKey.Value)?? SortedListC_MCParent.NoSortedListC_MCParent;
      }
      if (parentKey.HasValue && Parent!=SortedListC_MCParent.NoSortedListC_MCParent) {
        Parent!.AddToChildren(this);
      }
      onCsvConstruct();
    }
    partial void onCsvConstruct();


    /// <summary>
    /// New SortedListC_MCChild read from CSV file
    /// </summary>
    internal static SortedListC_MCChild Create(int key, CsvReader csvReader) {
      return new SortedListC_MCChild(key, csvReader);
    }


    /// <summary>
    /// Verify that sortedListC_MCChild.Parent exists.
    /// </summary>
    internal static bool Verify(SortedListC_MCChild sortedListC_MCChild) {
      if (sortedListC_MCChild.Parent==SortedListC_MCParent.NoSortedListC_MCParent) return false;
      return true;
    }
    #endregion


    #region Methods
    //      -------

    /// <summary>
    /// Adds SortedListC_MCChild to DC.Data.SortedListC_MCChilds.<br/>
    /// Throws an Exception when SortedListC_MCChild is already stored.
    /// </summary>
    public void Store() {
      if (Key>=0) {
        throw new Exception($"SortedListC_MCChild cannot be stored again in DC.Data, key {Key} is greater equal 0." + Environment.NewLine + ToString());
      }

      var isCancelled = false;
      onStoring(ref isCancelled);
      if (isCancelled) return;

      if (Parent?.Key<0) {
        throw new Exception($"Cannot store child SortedListC_MCChild '{this}'.Parent to SortedListC_MCParent '{Parent}' because parent is not stored yet.");
      }
      DC.Data._SortedListC_MCChilds.Add(this);
      onStored();
    }
    partial void onStoring(ref bool isCancelled);
    partial void onStored();


    /// <summary>
    /// Estimated number of UTF8 characters needed to write SortedListC_MCChild to CSV file
    /// </summary>
    public const int EstimatedLineLength = 150;


    /// <summary>
    /// Write SortedListC_MCChild to CSV file
    /// </summary>
    internal static void Write(SortedListC_MCChild sortedListC_MCChild, CsvWriter csvWriter) {
      sortedListC_MCChild.onCsvWrite();
      csvWriter.Write(sortedListC_MCChild.Name);
      if (sortedListC_MCChild.Parent is null) {
        csvWriter.WriteNull();
      } else {
        if (sortedListC_MCChild.Parent.Key<0) throw new Exception($"Cannot write sortedListC_MCChild '{sortedListC_MCChild}' to CSV File, because Parent is not stored in DC.Data.SortedListC_MCParents.");

        csvWriter.Write(sortedListC_MCChild.Parent.Key.ToString());
      }
    }
    partial void onCsvWrite();


    /// <summary>
    /// Updates SortedListC_MCChild with the provided values
    /// </summary>
    public void Update(string name, SortedListC_MCParent? parent) {
      if (Key>=0){
        if (parent?.Key<0) {
          throw new Exception($"SortedListC_MCChild.Update(): It is illegal to add stored SortedListC_MCChild '{this}'" + Environment.NewLine + 
            $"to Parent '{parent}', which is not stored.");
        }
      }
      var clone = new SortedListC_MCChild(this);
      var isCancelled = false;
      onUpdating(name, parent, ref isCancelled);
      if (isCancelled) return;


      //remove not yet updated item from parents which will be removed by update
      var hasParentChanged = Parent!=parent || Name!=name;
      if (Parent is not null && hasParentChanged) {
        Parent.RemoveFromChildren(this);
      }

      //update properties and detect if any value has changed
      var isChangeDetected = false;
      if (Name!=name) {
        Name = name;
        isChangeDetected = true;
      }
      if (Parent!=parent) {
        Parent = parent;
        isChangeDetected = true;
      }

      //add updated item to parents which have been newly added during update
      if (Parent is not null && hasParentChanged) {
        Parent.AddToChildren(this);
      }
      if (isChangeDetected) {
        onUpdated(clone);
        if (Key>=0) {
          DC.Data._SortedListC_MCChilds.ItemHasChanged(clone, this);
        } else if (DC.Data.IsTransaction) {
          DC.Data.AddTransaction(new TransactionItem(16, TransactionActivityEnum.Update, Key, this, oldItem: clone));
        }
        HasChanged?.Invoke(clone, this);
      }
    }
    partial void onUpdating(string name, SortedListC_MCParent? parent, ref bool isCancelled);
    partial void onUpdated(SortedListC_MCChild old);


    /// <summary>
    /// Updates this SortedListC_MCChild with values from CSV file
    /// </summary>
    internal static void Update(SortedListC_MCChild sortedListC_MCChild, CsvReader csvReader){
      sortedListC_MCChild.Name = csvReader.ReadString();
      var parentKey = csvReader.ReadIntNull();
      SortedListC_MCParent? parent;
      if (parentKey is null) {
        parent = null;
      } else {
        parent = DC.Data._SortedListC_MCParents.GetItem(parentKey.Value)??
          SortedListC_MCParent.NoSortedListC_MCParent;
      }
      if (sortedListC_MCChild.Parent is null) {
        if (parent is null) {
          //nothing to do
        } else {
          sortedListC_MCChild.Parent = parent;
          sortedListC_MCChild.Parent.AddToChildren(sortedListC_MCChild);
        }
      } else {
        if (parent is null) {
          if (sortedListC_MCChild.Parent!=SortedListC_MCParent.NoSortedListC_MCParent) {
            sortedListC_MCChild.Parent.RemoveFromChildren(sortedListC_MCChild);
          }
          sortedListC_MCChild.Parent = null;
        } else {
          if (sortedListC_MCChild.Parent!=SortedListC_MCParent.NoSortedListC_MCParent) {
            sortedListC_MCChild.Parent.RemoveFromChildren(sortedListC_MCChild);
          }
          sortedListC_MCChild.Parent = parent;
          sortedListC_MCChild.Parent.AddToChildren(sortedListC_MCChild);
        }
      }
      sortedListC_MCChild.onCsvUpdate();
    }
    partial void onCsvUpdate();


    /// <summary>
    /// Removes SortedListC_MCChild from DC.Data.SortedListC_MCChilds.
    /// </summary>
    public void Release() {
      if (Key<0) {
        throw new Exception($"SortedListC_MCChild.Release(): SortedListC_MCChild '{this}' is not stored in DC.Data, key is {Key}.");
      }
      onReleased();
      DC.Data._SortedListC_MCChilds.Remove(Key);
    }
    partial void onReleased();


    /// <summary>
    /// Removes SortedListC_MCChild from parents as part of a transaction rollback of the new() statement.
    /// </summary>
    internal static void RollbackItemNew(IStorageItem item) {
      var sortedListC_MCChild = (SortedListC_MCChild) item;
      if (sortedListC_MCChild.Parent!=null && sortedListC_MCChild.Parent!=SortedListC_MCParent.NoSortedListC_MCParent) {
        sortedListC_MCChild.Parent.RemoveFromChildren(sortedListC_MCChild);
      }
      sortedListC_MCChild.onRollbackItemNew();
    }
    partial void onRollbackItemNew();


    /// <summary>
    /// Releases SortedListC_MCChild from DC.Data.SortedListC_MCChilds as part of a transaction rollback of Store().
    /// </summary>
    internal static void RollbackItemStore(IStorageItem item) {
      var sortedListC_MCChild = (SortedListC_MCChild) item;
      sortedListC_MCChild.onRollbackItemStored();
    }
    partial void onRollbackItemStored();


    /// <summary>
    /// Restores the SortedListC_MCChild item data as it was before the last update as part of a transaction rollback.
    /// </summary>
    internal static void RollbackItemUpdate(IStorageItem oldStorageItem, IStorageItem newStorageItem) {
      var oldItem = (SortedListC_MCChild) oldStorageItem;//an item clone with the values before item was updated
      var item = (SortedListC_MCChild) newStorageItem;//is the instance whose values should be restored

      // remove updated item from parents
      var hasParentChanged = oldItem.Parent!=item.Parent || oldItem.Name!=item.Name;
      if (hasParentChanged && item.Parent is not null) {
        item.Parent.RemoveFromChildren(item);
      }

      // updated item: restore old values
      item.Name = oldItem.Name;
      item.Parent = oldItem.Parent;

      // add item with previous values to parents
      if (hasParentChanged && item.Parent is not null) {
        item.Parent.AddToChildren(item);
      }
      item.onRollbackItemUpdated(oldItem);
    }
    partial void onRollbackItemUpdated(SortedListC_MCChild oldSortedListC_MCChild);


    /// <summary>
    /// Adds SortedListC_MCChild to DC.Data.SortedListC_MCChilds as part of a transaction rollback of Release().
    /// </summary>
    internal static void RollbackItemRelease(IStorageItem item) {
      var sortedListC_MCChild = (SortedListC_MCChild) item;
      sortedListC_MCChild.onRollbackItemRelease();
    }
    partial void onRollbackItemRelease();


    /// <summary>
    /// Returns property values for tracing. Parents are shown with their key instead their content.
    /// </summary>
    public string ToTraceString() {
      var returnString =
        $"{this.GetKeyOrHash()}|" +
        $" {Name}|" +
        $" Parent {Parent?.GetKeyOrHash()}";
      onToTraceString(ref returnString);
      return returnString;
    }
    partial void onToTraceString(ref string returnString);


    /// <summary>
    /// Returns property values
    /// </summary>
    public string ToShortString() {
      var returnString =
        $"{Key.ToKeyString()}," +
        $" {Name}," +
        $" {Parent?.ToShortString()}";
      onToShortString(ref returnString);
      return returnString;
    }
    partial void onToShortString(ref string returnString);


    /// <summary>
    /// Returns all property names and values
    /// </summary>
    public override string ToString() {
      var returnString =
        $"Key: {Key.ToKeyString()}," +
        $" Name: {Name}," +
        $" Parent: {Parent?.ToShortString()};";
      onToString(ref returnString);
      return returnString;
    }
    partial void onToString(ref string returnString);
    #endregion
  }
}
