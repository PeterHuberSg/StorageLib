//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by StorageClassGenerator
//
//     Do not change code in this file, it will get lost when the file gets 
//     auto generated again. Write your code into SortedListChild.cs.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
using System;
using System.Collections.Generic;
using System.Threading;
using StorageLib;


namespace TestContext  {


  public partial class SortedListChild: IStorageItemGeneric<SortedListChild> {

    #region Properties
    //      ----------

    /// <summary>
    /// Unique identifier for SortedListChild. Gets set once SortedListChild gets added to DC.Data.
    /// </summary>
    public int Key { get; private set; }
    internal static void SetKey(IStorageItem sortedListChild, int key, bool isRollback) {
#if DEBUG
      if (isRollback) {
        if (key==StorageExtensions.NoKey) {
          DC.Trace?.Invoke($"Release SortedListChild key @{sortedListChild.Key} #{sortedListChild.GetHashCode()}");
        } else {
          DC.Trace?.Invoke($"Store SortedListChild key @{key} #{sortedListChild.GetHashCode()}");
        }
      }
#endif
      ((SortedListChild)sortedListChild).Key = key;
    }


    public string Text { get; private set; }


    public SortedListParent Parent { get; private set; }


    public SortedListParentN? ParentN { get; private set; }


    public SortedListParentR ParentR { get; }


    public SortedListParentNR? ParentNR { get; }


    /// <summary>
    /// Headers written to first line in CSV file
    /// </summary>
    internal static readonly string[] Headers = {
      "Key", 
      "Text", 
      "Parent", 
      "ParentN", 
      "ParentR", 
      "ParentNR"
    };


    /// <summary>
    /// None existing SortedListChild, used as a temporary place holder when reading a CSV file
    /// which was not compacted. It might create first a later deleted item linking to a 
    /// deleted parent. In this case, the parent property gets set to NoSortedListChild. Once the CSV
    /// file is completely read, that child will actually be deleted (released) and Verify()
    /// ensures that there are no stored children with links to NoSortedListChild.
    /// </summary>
    internal static SortedListChild NoSortedListChild = new SortedListChild("NoText", SortedListParent.NoSortedListParent, null, SortedListParentR.NoSortedListParentR, null, isStoring: false);
    #endregion


    #region Events
    //      ------

    /// <summary>
    /// Content of SortedListChild has changed. Gets only raised for changes occurring after loading DC.Data with previously stored data.
    /// </summary>
    public event Action</*old*/SortedListChild, /*new*/SortedListChild>? HasChanged;
    #endregion


    #region Constructors
    //      ------------

    /// <summary>
    /// SortedListChild Constructor. If isStoring is true, adds SortedListChild to DC.Data.SortedListChidren.
    /// </summary>
    public SortedListChild(
      string text, 
      SortedListParent parent, 
      SortedListParentN? parentN, 
      SortedListParentR parentR, 
      SortedListParentNR? parentNR, 
      bool isStoring = true)
    {
      Key = StorageExtensions.NoKey;
      Text = text;
      Parent = parent;
      ParentN = parentN;
      ParentR = parentR;
      ParentNR = parentNR;
#if DEBUG
      DC.Trace?.Invoke($"new SortedListChild: {ToTraceString()}");
#endif
      Parent.AddToSortedListChidren(this);
      if (ParentN!=null) {
        ParentN.AddToSortedListChidren(this);
      }
      ParentR.AddToSortedListChidren(this);
      if (ParentNR!=null) {
        ParentNR.AddToSortedListChidren(this);
      }
      onConstruct();
      if (DC.Data.IsTransaction) {
        DC.Data.AddTransaction(new TransactionItem(24,TransactionActivityEnum.New, Key, this));
      }

      if (isStoring) {
        Store();
      }
    }
    partial void onConstruct();


    /// <summary>
    /// Cloning constructor. It will copy all data from original except any collection (children).
    /// </summary>
    #pragma warning disable CS8618 // Children collections are uninitialized.
    public SortedListChild(SortedListChild original) {
    #pragma warning restore CS8618 //
      Key = StorageExtensions.NoKey;
      Text = original.Text;
      Parent = original.Parent;
      ParentN = original.ParentN;
      ParentR = original.ParentR;
      ParentNR = original.ParentNR;
      onCloned(this);
    }
    partial void onCloned(SortedListChild clone);


    /// <summary>
    /// Constructor for SortedListChild read from CSV file
    /// </summary>
    private SortedListChild(int key, CsvReader csvReader){
      Key = key;
      Text = csvReader.ReadString();
      var sortedListParentKey = csvReader.ReadInt();
      Parent = DC.Data._SortedListParents.GetItem(sortedListParentKey)?? SortedListParent.NoSortedListParent;
      var parentNKey = csvReader.ReadIntNull();
      if (parentNKey.HasValue) {
        ParentN = DC.Data._SortedListParentNs.GetItem(parentNKey.Value)?? SortedListParentN.NoSortedListParentN;
      }
      var sortedListParentRKey = csvReader.ReadInt();
      ParentR = DC.Data._SortedListParentRs.GetItem(sortedListParentRKey)?? SortedListParentR.NoSortedListParentR;
      var parentNRKey = csvReader.ReadIntNull();
      if (parentNRKey.HasValue) {
        ParentNR = DC.Data._SortedListParentNRs.GetItem(parentNRKey.Value)?? SortedListParentNR.NoSortedListParentNR;
      }
      if (Parent!=SortedListParent.NoSortedListParent) {
        Parent.AddToSortedListChidren(this);
      }
      if (parentNKey.HasValue && ParentN!=SortedListParentN.NoSortedListParentN) {
        ParentN!.AddToSortedListChidren(this);
      }
      if (ParentR!=SortedListParentR.NoSortedListParentR) {
        ParentR.AddToSortedListChidren(this);
      }
      if (parentNRKey.HasValue && ParentNR!=SortedListParentNR.NoSortedListParentNR) {
        ParentNR!.AddToSortedListChidren(this);
      }
      onCsvConstruct();
    }
    partial void onCsvConstruct();


    /// <summary>
    /// New SortedListChild read from CSV file
    /// </summary>
    internal static SortedListChild Create(int key, CsvReader csvReader) {
      return new SortedListChild(key, csvReader);
    }


    /// <summary>
    /// Verify that sortedListChild.Parent exists.
    /// Verify that sortedListChild.ParentN exists.
    /// Verify that sortedListChild.ParentR exists.
    /// Verify that sortedListChild.ParentNR exists.
    /// </summary>
    internal static bool Verify(SortedListChild sortedListChild) {
      if (sortedListChild.Parent==SortedListParent.NoSortedListParent) return false;
      if (sortedListChild.ParentN==SortedListParentN.NoSortedListParentN) return false;
      if (sortedListChild.ParentR==SortedListParentR.NoSortedListParentR) return false;
      if (sortedListChild.ParentNR==SortedListParentNR.NoSortedListParentNR) return false;
      return true;
    }
    #endregion


    #region Methods
    //      -------

    /// <summary>
    /// Adds SortedListChild to DC.Data.SortedListChidren.<br/>
    /// Throws an Exception when SortedListChild is already stored.
    /// </summary>
    public void Store() {
      if (Key>=0) {
        throw new Exception($"SortedListChild cannot be stored again in DC.Data, key {Key} is greater equal 0." + Environment.NewLine + ToString());
      }

      var isCancelled = false;
      onStoring(ref isCancelled);
      if (isCancelled) return;

      if (Parent.Key<0) {
        throw new Exception($"Cannot store child SortedListChild '{this}'.Parent to SortedListParent '{Parent}' because parent is not stored yet.");
      }
      if (ParentN?.Key<0) {
        throw new Exception($"Cannot store child SortedListChild '{this}'.ParentN to SortedListParentN '{ParentN}' because parent is not stored yet.");
      }
      if (ParentR.Key<0) {
        throw new Exception($"Cannot store child SortedListChild '{this}'.ParentR to SortedListParentR '{ParentR}' because parent is not stored yet.");
      }
      if (ParentNR?.Key<0) {
        throw new Exception($"Cannot store child SortedListChild '{this}'.ParentNR to SortedListParentNR '{ParentNR}' because parent is not stored yet.");
      }
      DC.Data._SortedListChidren.Add(this);
      onStored();
#if DEBUG
      DC.Trace?.Invoke($"Stored SortedListChild #{GetHashCode()} @{Key}");
#endif
    }
    partial void onStoring(ref bool isCancelled);
    partial void onStored();


    /// <summary>
    /// Estimated number of UTF8 characters needed to write SortedListChild to CSV file
    /// </summary>
    public const int EstimatedLineLength = 150;


    /// <summary>
    /// Write SortedListChild to CSV file
    /// </summary>
    internal static void Write(SortedListChild sortedListChild, CsvWriter csvWriter) {
      sortedListChild.onCsvWrite();
      csvWriter.Write(sortedListChild.Text);
      if (sortedListChild.Parent.Key<0) throw new Exception($"Cannot write sortedListChild '{sortedListChild}' to CSV File, because Parent is not stored in DC.Data.SortedListParents.");

      csvWriter.Write(sortedListChild.Parent.Key.ToString());
      if (sortedListChild.ParentN is null) {
        csvWriter.WriteNull();
      } else {
        if (sortedListChild.ParentN.Key<0) throw new Exception($"Cannot write sortedListChild '{sortedListChild}' to CSV File, because ParentN is not stored in DC.Data.SortedListParentNs.");

        csvWriter.Write(sortedListChild.ParentN.Key.ToString());
      }
      if (sortedListChild.ParentR.Key<0) throw new Exception($"Cannot write sortedListChild '{sortedListChild}' to CSV File, because ParentR is not stored in DC.Data.SortedListParentRs.");

      csvWriter.Write(sortedListChild.ParentR.Key.ToString());
      if (sortedListChild.ParentNR is null) {
        csvWriter.WriteNull();
      } else {
        if (sortedListChild.ParentNR.Key<0) throw new Exception($"Cannot write sortedListChild '{sortedListChild}' to CSV File, because ParentNR is not stored in DC.Data.SortedListParentNRs.");

        csvWriter.Write(sortedListChild.ParentNR.Key.ToString());
      }
    }
    partial void onCsvWrite();


    /// <summary>
    /// Updates SortedListChild with the provided values
    /// </summary>
    public void Update(string text, SortedListParent parent, SortedListParentN? parentN) {
      if (Key>=0){
        if (parent.Key<0) {
          throw new Exception($"SortedListChild.Update(): It is illegal to add stored SortedListChild '{this}'" + Environment.NewLine + 
            $"to Parent '{parent}', which is not stored.");
        }
        if (parentN?.Key<0) {
          throw new Exception($"SortedListChild.Update(): It is illegal to add stored SortedListChild '{this}'" + Environment.NewLine + 
            $"to ParentN '{parentN}', which is not stored.");
        }
      }
      var clone = new SortedListChild(this);
      var isCancelled = false;
      onUpdating(text, parent, parentN, ref isCancelled);
      if (isCancelled) return;

#if DEBUG
      DC.Trace?.Invoke($"Updating SortedListChild: {ToTraceString()}");
#endif

      //remove not yet updated item from parents which will be removed by update
      var hasParentChanged = Parent!=parent || Text!=text;
      if (hasParentChanged) {
        Parent.RemoveFromSortedListChidren(this);
      }
      var hasParentNChanged = ParentN!=parentN || Text!=text;
      if (ParentN is not null && hasParentNChanged) {
        ParentN.RemoveFromSortedListChidren(this);
      }

      //update properties and detect if any value has changed
      var isChangeDetected = false;
      if (Text!=text) {
        Text = text;
        isChangeDetected = true;
      }
      if (Parent!=parent) {
        Parent = parent;
        isChangeDetected = true;
      }
      if (ParentN!=parentN) {
        ParentN = parentN;
        isChangeDetected = true;
      }

      //add updated item to parents which have been newly added during update
      if (hasParentChanged) {
        Parent.AddToSortedListChidren(this);
      }
      if (ParentN is not null && hasParentNChanged) {
        ParentN.AddToSortedListChidren(this);
      }
      if (isChangeDetected) {
        onUpdated(clone);
        if (Key>=0) {
          DC.Data._SortedListChidren.ItemHasChanged(clone, this);
        } else if (DC.Data.IsTransaction) {
          DC.Data.AddTransaction(new TransactionItem(24, TransactionActivityEnum.Update, Key, this, oldItem: clone));
        }
        HasChanged?.Invoke(clone, this);
      }
#if DEBUG
      DC.Trace?.Invoke($"Updated SortedListChild: {ToTraceString()}");
#endif
    }
    partial void onUpdating(string text, SortedListParent parent, SortedListParentN? parentN, ref bool isCancelled);
    partial void onUpdated(SortedListChild old);


    /// <summary>
    /// Updates this SortedListChild with values from CSV file
    /// </summary>
    internal static void Update(SortedListChild sortedListChild, CsvReader csvReader){
      sortedListChild.Text = csvReader.ReadString();
        var parent = DC.Data._SortedListParents.GetItem(csvReader.ReadInt())??
          SortedListParent.NoSortedListParent;
      if (sortedListChild.Parent!=parent) {
        if (sortedListChild.Parent!=SortedListParent.NoSortedListParent) {
          sortedListChild.Parent.RemoveFromSortedListChidren(sortedListChild);
        }
        sortedListChild.Parent = parent;
        sortedListChild.Parent.AddToSortedListChidren(sortedListChild);
      }
      var parentNKey = csvReader.ReadIntNull();
      SortedListParentN? parentN;
      if (parentNKey is null) {
        parentN = null;
      } else {
        parentN = DC.Data._SortedListParentNs.GetItem(parentNKey.Value)??
          SortedListParentN.NoSortedListParentN;
      }
      if (sortedListChild.ParentN is null) {
        if (parentN is null) {
          //nothing to do
        } else {
          sortedListChild.ParentN = parentN;
          sortedListChild.ParentN.AddToSortedListChidren(sortedListChild);
        }
      } else {
        if (parentN is null) {
          if (sortedListChild.ParentN!=SortedListParentN.NoSortedListParentN) {
            sortedListChild.ParentN.RemoveFromSortedListChidren(sortedListChild);
          }
          sortedListChild.ParentN = null;
        } else {
          if (sortedListChild.ParentN!=SortedListParentN.NoSortedListParentN) {
            sortedListChild.ParentN.RemoveFromSortedListChidren(sortedListChild);
          }
          sortedListChild.ParentN = parentN;
          sortedListChild.ParentN.AddToSortedListChidren(sortedListChild);
        }
      }
        var parentR = DC.Data._SortedListParentRs.GetItem(csvReader.ReadInt())??
          SortedListParentR.NoSortedListParentR;
      if (sortedListChild.ParentR!=parentR) {
        throw new Exception($"SortedListChild.Update(): Property ParentR '{sortedListChild.ParentR}' is " +
          $"readonly, parentR '{parentR}' read from the CSV file should be the same." + Environment.NewLine + 
          sortedListChild.ToString());
      }
      var parentNRKey = csvReader.ReadIntNull();
      SortedListParentNR? parentNR;
      if (parentNRKey is null) {
        parentNR = null;
      } else {
        parentNR = DC.Data._SortedListParentNRs.GetItem(parentNRKey.Value)??
          SortedListParentNR.NoSortedListParentNR;
      }
      if (sortedListChild.ParentNR!=parentNR) {
        throw new Exception($"SortedListChild.Update(): Property ParentNR '{sortedListChild.ParentNR}' is " +
          $"readonly, parentNR '{parentNR}' read from the CSV file should be the same." + Environment.NewLine + 
          sortedListChild.ToString());
      }
      sortedListChild.onCsvUpdate();
    }
    partial void onCsvUpdate();


    /// <summary>
    /// Removes SortedListChild from DC.Data.SortedListChidren.
    /// </summary>
    public void Release() {
      if (Key<0) {
        throw new Exception($"SortedListChild.Release(): SortedListChild '{this}' is not stored in DC.Data, key is {Key}.");
      }
      onReleased();
      DC.Data._SortedListChidren.Remove(Key);
#if DEBUG
      DC.Trace?.Invoke($"Released SortedListChild @{Key} #{GetHashCode()}");
#endif
    }
    partial void onReleased();


    /// <summary>
    /// Removes SortedListChild from parents as part of a transaction rollback of the new() statement.
    /// </summary>
    internal static void RollbackItemNew(IStorageItem item) {
      var sortedListChild = (SortedListChild) item;
#if DEBUG
      DC.Trace?.Invoke($"Rollback new SortedListChild(): {sortedListChild.ToTraceString()}");
#endif
      if (sortedListChild.Parent!=SortedListParent.NoSortedListParent) {
        sortedListChild.Parent.RemoveFromSortedListChidren(sortedListChild);
      }
      if (sortedListChild.ParentN!=null && sortedListChild.ParentN!=SortedListParentN.NoSortedListParentN) {
        sortedListChild.ParentN.RemoveFromSortedListChidren(sortedListChild);
      }
      if (sortedListChild.ParentR!=SortedListParentR.NoSortedListParentR) {
        sortedListChild.ParentR.RemoveFromSortedListChidren(sortedListChild);
      }
      if (sortedListChild.ParentNR!=null && sortedListChild.ParentNR!=SortedListParentNR.NoSortedListParentNR) {
        sortedListChild.ParentNR.RemoveFromSortedListChidren(sortedListChild);
      }
      sortedListChild.onRollbackItemNew();
    }
    partial void onRollbackItemNew();


    /// <summary>
    /// Releases SortedListChild from DC.Data.SortedListChidren as part of a transaction rollback of Store().
    /// </summary>
    internal static void RollbackItemStore(IStorageItem item) {
      var sortedListChild = (SortedListChild) item;
#if DEBUG
      DC.Trace?.Invoke($"Rollback SortedListChild.Store(): {sortedListChild.ToTraceString()}");
#endif
      sortedListChild.onRollbackItemStored();
    }
    partial void onRollbackItemStored();


    /// <summary>
    /// Restores the SortedListChild item data as it was before the last update as part of a transaction rollback.
    /// </summary>
    internal static void RollbackItemUpdate(IStorageItem oldStorageItem, IStorageItem newStorageItem) {
      var oldItem = (SortedListChild) oldStorageItem;//an item clone with the values before item was updated
      var item = (SortedListChild) newStorageItem;//is the instance whose values should be restored
#if DEBUG
      DC.Trace?.Invoke($"Rolling back SortedListChild.Update(): {item.ToTraceString()}");
#endif

      // if possible, throw exceptions before changing anything
      if (item.ParentR!=oldItem.ParentR) {
        throw new Exception($"SortedListChild.Update(): Property ParentR '{item.ParentR}' is " +
          $"readonly, ParentR '{oldItem.ParentR}' should be the same." + Environment.NewLine + 
          item.ToString());
      }
      if (item.ParentNR!=oldItem.ParentNR) {
        throw new Exception($"SortedListChild.Update(): Property ParentNR '{item.ParentNR}' is " +
          $"readonly, ParentNR '{oldItem.ParentNR}' should be the same." + Environment.NewLine + 
          item.ToString());
      }

      // remove updated item from parents
      var hasParentChanged = oldItem.Parent!=item.Parent || oldItem.Text!=item.Text;
      if (hasParentChanged) {
        item.Parent.RemoveFromSortedListChidren(item);
      }
      var hasParentNChanged = oldItem.ParentN!=item.ParentN || oldItem.Text!=item.Text;
      if (hasParentNChanged && item.ParentN is not null) {
        item.ParentN.RemoveFromSortedListChidren(item);
      }

      // updated item: restore old values
      item.Text = oldItem.Text;
      item.Parent = oldItem.Parent;
      item.ParentN = oldItem.ParentN;

      // add item with previous values to parents
      if (hasParentChanged) {
        item.Parent.AddToSortedListChidren(item);
      }
      if (hasParentNChanged && item.ParentN is not null) {
        item.ParentN.AddToSortedListChidren(item);
      }
      item.onRollbackItemUpdated(oldItem);
#if DEBUG
      DC.Trace?.Invoke($"Rolled back SortedListChild.Update(): {item.ToTraceString()}");
#endif
    }
    partial void onRollbackItemUpdated(SortedListChild oldSortedListChild);


    /// <summary>
    /// Adds SortedListChild to DC.Data.SortedListChidren as part of a transaction rollback of Release().
    /// </summary>
    internal static void RollbackItemRelease(IStorageItem item) {
      var sortedListChild = (SortedListChild) item;
#if DEBUG
      DC.Trace?.Invoke($"Rollback SortedListChild.Release(): {sortedListChild.ToTraceString()}");
#endif
      sortedListChild.onRollbackItemRelease();
    }
    partial void onRollbackItemRelease();


    /// <summary>
    /// Returns property values for tracing. Parents are shown with their key instead their content.
    /// </summary>
    public string ToTraceString() {
      var returnString =
        $"{this.GetKeyOrHash()}|" +
        $" {Text}|" +
        $" Parent {Parent.GetKeyOrHash()}|" +
        $" ParentN {ParentN?.GetKeyOrHash()}|" +
        $" ParentR {ParentR.GetKeyOrHash()}|" +
        $" ParentNR {ParentNR?.GetKeyOrHash()}";
      onToTraceString(ref returnString);
      return returnString;
    }
    partial void onToTraceString(ref string returnString);


    /// <summary>
    /// Returns property values
    /// </summary>
    public string ToShortString() {
      var returnString =
        $"{Key.ToKeyString()}," +
        $" {Text}," +
        $" {Parent.ToShortString()}," +
        $" {ParentN?.ToShortString()}," +
        $" {ParentR.ToShortString()}," +
        $" {ParentNR?.ToShortString()}";
      onToShortString(ref returnString);
      return returnString;
    }
    partial void onToShortString(ref string returnString);


    /// <summary>
    /// Returns all property names and values
    /// </summary>
    public override string ToString() {
      var returnString =
        $"Key: {Key.ToKeyString()}," +
        $" Text: {Text}," +
        $" Parent: {Parent.ToShortString()}," +
        $" ParentN: {ParentN?.ToShortString()}," +
        $" ParentR: {ParentR.ToShortString()}," +
        $" ParentNR: {ParentNR?.ToShortString()};";
      onToString(ref returnString);
      return returnString;
    }
    partial void onToString(ref string returnString);
    #endregion
  }
}
