//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by StorageClassGenerator
//
//     Do not change code in this file, it will get lost when the file gets 
//     auto generated again. Write your code into DC.cs.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
using System;
using System.Collections.Generic;
using System.Threading;
using StorageLib;


namespace StorageDataContext  {

  /// <summary>
  /// A part of DC is static, which gives easy access to all stored data (=context) through DC.Data. But most functionality is in the
  /// instantiatable part of DC. Since it is instantiatable, is possible to use different contexts over the lifetime of a program. This 
  /// is helpful for unit testing. Use DC.Init() to create a new context and dispose it with DisposeData() before creating a new one.
  /// </summary>
  public partial class DC: DataContextBase {

    #region static Part
    //      -----------

    /// <summary>
    /// Provides static root access to the data context
    /// </summary>
    public static DC Data {
      get { return data!; }
    }
    private static DC? data; //data is needed for Interlocked.Exchange(ref data, null) in DisposeData()


    /// <summary>
    /// Trace gets called when an item gets created, stored, updated or removed if DEBUG is defined
    /// </summary>
    public static Action<string>? Trace;


    /// <summary>
    /// Flushes all data to permanent storage location if permanent data storage is active. Compacts data storage
    /// by applying all updates and removing all instances marked as deleted.
    /// </summary>
    public static void DisposeData() {
      var dataLocal = Interlocked.Exchange(ref data, null);
      dataLocal?.Dispose();
    }
    #endregion


    #region Properties
    //      ----------

    /// <summary>
    /// Configuration parameters if data gets stored in .csv files
    /// </summary>
    public CsvConfig? CsvConfig { get; }

    /// <summary>
    /// Is all data initialised
    /// </summary>
    public bool IsInitialised { get; private set; }

    /// <summary>
    /// Directory of all DataTypeSamples
    /// </summary>
    public IReadonlyDataStore<DataTypeSample> DataTypeSamples => _DataTypeSamples;
    internal DataStore<DataTypeSample> _DataTypeSamples { get; private set; }

    /// <summary>
    /// Directory of all DictionaryChidren
    /// </summary>
    public IReadonlyDataStore<DictionaryChild> DictionaryChidren => _DictionaryChidren;
    internal DataStore<DictionaryChild> _DictionaryChidren { get; private set; }

    /// <summary>
    /// Directory of all DictionaryParents
    /// </summary>
    public IReadonlyDataStore<DictionaryParent> DictionaryParents => _DictionaryParents;
    internal DataStore<DictionaryParent> _DictionaryParents { get; private set; }

    /// <summary>
    /// Directory of all DictionaryParentNs
    /// </summary>
    public IReadonlyDataStore<DictionaryParentN> DictionaryParentNs => _DictionaryParentNs;
    internal DataStore<DictionaryParentN> _DictionaryParentNs { get; private set; }

    /// <summary>
    /// Directory of all DictionaryParentNRs
    /// </summary>
    public IReadonlyDataStore<DictionaryParentNR> DictionaryParentNRs => _DictionaryParentNRs;
    internal DataStore<DictionaryParentNR> _DictionaryParentNRs { get; private set; }

    /// <summary>
    /// Directory of all DictionaryParentRs
    /// </summary>
    public IReadonlyDataStore<DictionaryParentR> DictionaryParentRs => _DictionaryParentRs;
    internal DataStore<DictionaryParentR> _DictionaryParentRs { get; private set; }

    /// <summary>
    /// Directory of all ListChidren
    /// </summary>
    public IReadonlyDataStore<ListChild> ListChidren => _ListChidren;
    internal DataStore<ListChild> _ListChidren { get; private set; }

    /// <summary>
    /// Directory of all ListParents
    /// </summary>
    public IReadonlyDataStore<ListParent> ListParents => _ListParents;
    internal DataStore<ListParent> _ListParents { get; private set; }

    /// <summary>
    /// Directory of all ListParentNs
    /// </summary>
    public IReadonlyDataStore<ListParentN> ListParentNs => _ListParentNs;
    internal DataStore<ListParentN> _ListParentNs { get; private set; }

    /// <summary>
    /// Directory of all ListParentNRs
    /// </summary>
    public IReadonlyDataStore<ListParentNR> ListParentNRs => _ListParentNRs;
    internal DataStore<ListParentNR> _ListParentNRs { get; private set; }

    /// <summary>
    /// Directory of all ListParentRs
    /// </summary>
    public IReadonlyDataStore<ListParentR> ListParentRs => _ListParentRs;
    internal DataStore<ListParentR> _ListParentRs { get; private set; }

    /// <summary>
    /// Directory of all LookupChildren
    /// </summary>
    public IReadonlyDataStore<LookupChild> LookupChildren => _LookupChildren;
    internal DataStore<LookupChild> _LookupChildren { get; private set; }

    /// <summary>
    /// Directory of all LookupParents
    /// </summary>
    public IReadonlyDataStore<LookupParent> LookupParents => _LookupParents;
    internal DataStore<LookupParent> _LookupParents { get; private set; }

    /// <summary>
    /// Directory of all LookupParentNs
    /// </summary>
    public IReadonlyDataStore<LookupParentN> LookupParentNs => _LookupParentNs;
    internal DataStore<LookupParentN> _LookupParentNs { get; private set; }

    /// <summary>
    /// Directory of all LookupParentNRs
    /// </summary>
    public IReadonlyDataStore<LookupParentNR> LookupParentNRs => _LookupParentNRs;
    internal DataStore<LookupParentNR> _LookupParentNRs { get; private set; }

    /// <summary>
    /// Directory of all LookupParentRs
    /// </summary>
    public IReadonlyDataStore<LookupParentR> LookupParentRs => _LookupParentRs;
    internal DataStore<LookupParentR> _LookupParentRs { get; private set; }

    /// <summary>
    /// Directory of all NotMatchingChildrenListName_Childs
    /// </summary>
    public IReadonlyDataStore<NotMatchingChildrenListName_Child> NotMatchingChildrenListName_Childs => _NotMatchingChildrenListName_Childs;
    internal DataStore<NotMatchingChildrenListName_Child> _NotMatchingChildrenListName_Childs { get; private set; }

    /// <summary>
    /// Directory of all NotMatchingChildrenListName_Parents
    /// </summary>
    public IReadonlyDataStore<NotMatchingChildrenListName_Parent> NotMatchingChildrenListName_Parents => _NotMatchingChildrenListName_Parents;
    internal DataStore<NotMatchingChildrenListName_Parent> _NotMatchingChildrenListName_Parents { get; private set; }

    /// <summary>
    /// Directory of all PrivateConstructors
    /// </summary>
    public IReadonlyDataStore<PrivateConstructor> PrivateConstructors => _PrivateConstructors;
    internal DataStore<PrivateConstructor> _PrivateConstructors { get; private set; }

    /// <summary>
    /// Directory of all PropertyNeedsDictionaryClasses
    /// </summary>
    public IReadonlyDataStore<PropertyNeedsDictionaryClass> PropertyNeedsDictionaryClasses => _PropertyNeedsDictionaryClasses;
    internal DataStore<PropertyNeedsDictionaryClass> _PropertyNeedsDictionaryClasses { get; private set; }

    /// <summary>
    /// Directory of all PropertyNeedsDictionaryClasses by IdInt
    /// </summary>
    public IReadOnlyDictionary<int, PropertyNeedsDictionaryClass> PropertyNeedsDictionaryClassesByIdInt => _PropertyNeedsDictionaryClassesByIdInt;
    internal Dictionary<int, PropertyNeedsDictionaryClass> _PropertyNeedsDictionaryClassesByIdInt { get; private set; }

    /// <summary>
    /// Directory of all PropertyNeedsDictionaryClasses by IdString
    /// </summary>
    public IReadOnlyDictionary<string, PropertyNeedsDictionaryClass> PropertyNeedsDictionaryClassesByIdString => _PropertyNeedsDictionaryClassesByIdString;
    internal Dictionary<string, PropertyNeedsDictionaryClass> _PropertyNeedsDictionaryClassesByIdString { get; private set; }

    /// <summary>
    /// Directory of all PropertyNeedsDictionaryClasses by TextLower
    /// </summary>
    public IReadOnlyDictionary<string, PropertyNeedsDictionaryClass> PropertyNeedsDictionaryClassesByTextLower => _PropertyNeedsDictionaryClassesByTextLower;
    internal Dictionary<string, PropertyNeedsDictionaryClass> _PropertyNeedsDictionaryClassesByTextLower { get; private set; }

    /// <summary>
    /// Directory of all PropertyNeedsDictionaryClasses by TextNullableLower
    /// </summary>
    public IReadOnlyDictionary<string, PropertyNeedsDictionaryClass> PropertyNeedsDictionaryClassesByTextNullableLower => _PropertyNeedsDictionaryClassesByTextNullableLower;
    internal Dictionary<string, PropertyNeedsDictionaryClass> _PropertyNeedsDictionaryClassesByTextNullableLower { get; private set; }

    /// <summary>
    /// Directory of all PropertyNeedsDictionaryClasses by TextReadonlyLower
    /// </summary>
    public IReadOnlyDictionary<string, PropertyNeedsDictionaryClass> PropertyNeedsDictionaryClassesByTextReadonlyLower => _PropertyNeedsDictionaryClassesByTextReadonlyLower;
    internal Dictionary<string, PropertyNeedsDictionaryClass> _PropertyNeedsDictionaryClassesByTextReadonlyLower { get; private set; }

    /// <summary>
    /// Directory of all SampleX
    /// </summary>
    public IReadonlyDataStore<Sample> SampleX => _SampleX;
    internal DataStore<Sample> _SampleX { get; private set; }

    /// <summary>
    /// Directory of all SampleDetails
    /// </summary>
    public IReadonlyDataStore<SampleDetail> SampleDetails => _SampleDetails;
    internal DataStore<SampleDetail> _SampleDetails { get; private set; }

    /// <summary>
    /// Directory of all SampleMasters
    /// </summary>
    public IReadonlyDataStore<SampleMaster> SampleMasters => _SampleMasters;
    internal DataStore<SampleMaster> _SampleMasters { get; private set; }

    /// <summary>
    /// Directory of all SingleChildChildren
    /// </summary>
    public IReadonlyDataStore<SingleChildChild> SingleChildChildren => _SingleChildChildren;
    internal DataStore<SingleChildChild> _SingleChildChildren { get; private set; }

    /// <summary>
    /// Directory of all SingleChildParents
    /// </summary>
    public IReadonlyDataStore<SingleChildParent> SingleChildParents => _SingleChildParents;
    internal DataStore<SingleChildParent> _SingleChildParents { get; private set; }

    /// <summary>
    /// Directory of all SingleChildParentNs
    /// </summary>
    public IReadonlyDataStore<SingleChildParentN> SingleChildParentNs => _SingleChildParentNs;
    internal DataStore<SingleChildParentN> _SingleChildParentNs { get; private set; }

    /// <summary>
    /// Directory of all SingleChildParentNRs
    /// </summary>
    public IReadonlyDataStore<SingleChildParentNR> SingleChildParentNRs => _SingleChildParentNRs;
    internal DataStore<SingleChildParentNR> _SingleChildParentNRs { get; private set; }

    /// <summary>
    /// Directory of all SingleChildParentRs
    /// </summary>
    public IReadonlyDataStore<SingleChildParentR> SingleChildParentRs => _SingleChildParentRs;
    internal DataStore<SingleChildParentR> _SingleChildParentRs { get; private set; }

    /// <summary>
    /// Directory of all SortedListChidren
    /// </summary>
    public IReadonlyDataStore<SortedListChild> SortedListChidren => _SortedListChidren;
    internal DataStore<SortedListChild> _SortedListChidren { get; private set; }

    /// <summary>
    /// Directory of all SortedListParents
    /// </summary>
    public IReadonlyDataStore<SortedListParent> SortedListParents => _SortedListParents;
    internal DataStore<SortedListParent> _SortedListParents { get; private set; }

    /// <summary>
    /// Directory of all SortedListParentNs
    /// </summary>
    public IReadonlyDataStore<SortedListParentN> SortedListParentNs => _SortedListParentNs;
    internal DataStore<SortedListParentN> _SortedListParentNs { get; private set; }

    /// <summary>
    /// Directory of all SortedListParentNRs
    /// </summary>
    public IReadonlyDataStore<SortedListParentNR> SortedListParentNRs => _SortedListParentNRs;
    internal DataStore<SortedListParentNR> _SortedListParentNRs { get; private set; }

    /// <summary>
    /// Directory of all SortedListParentRs
    /// </summary>
    public IReadonlyDataStore<SortedListParentR> SortedListParentRs => _SortedListParentRs;
    internal DataStore<SortedListParentR> _SortedListParentRs { get; private set; }
    #endregion


    #region Events
    //      ------

    #endregion


    #region Constructors
    //      ------------

    /// <summary>
    /// Creates a new DataContext. If csvConfig is null, the data is only stored in RAM and gets lost once the 
    /// program terminates. With csvConfig defined, existing data gets read at startup, changes get immediately
    /// written and Dispose() ensures by flushing that all data is permanently stored.
    /// </summary>
    public DC(CsvConfig? csvConfig): base(DataStoresCount: 33) {
      data = this;
      IsInitialised = false;
#if DEBUG
      Trace?.Invoke($"Context DC initialising");
      var trace = Trace;
      Trace = null;
#endif

      string? backupResult = null;
      if (csvConfig!=null) {
        backupResult = Csv.Backup(csvConfig, DateTime.Now);
#if DEBUG
        if (backupResult.Length>0) {
           Trace?.Invoke("Backup: " + backupResult);
        }
#endif
      }

      CsvConfig = csvConfig;
      onConstructing(backupResult);

      _PropertyNeedsDictionaryClassesByIdInt = new Dictionary<int, PropertyNeedsDictionaryClass>();
      _PropertyNeedsDictionaryClassesByIdString = new Dictionary<string, PropertyNeedsDictionaryClass>();
      _PropertyNeedsDictionaryClassesByTextLower = new Dictionary<string, PropertyNeedsDictionaryClass>();
      _PropertyNeedsDictionaryClassesByTextNullableLower = new Dictionary<string, PropertyNeedsDictionaryClass>();
      _PropertyNeedsDictionaryClassesByTextReadonlyLower = new Dictionary<string, PropertyNeedsDictionaryClass>();
      if (csvConfig==null) {
        _LookupParents = new DataStore<LookupParent>(
          this,
          0,
          LookupParent.SetKey,
          LookupParent.RollbackItemNew,
          LookupParent.RollbackItemStore,
          LookupParent.RollbackItemUpdate,
          null,
          areInstancesUpdatable: true,
          areInstancesReleasable: false);
        DataStores[0] = _LookupParents;
        onLookupParentsFilled();

        _LookupParentNs = new DataStore<LookupParentN>(
          this,
          1,
          LookupParentN.SetKey,
          LookupParentN.RollbackItemNew,
          LookupParentN.RollbackItemStore,
          LookupParentN.RollbackItemUpdate,
          null,
          areInstancesUpdatable: true,
          areInstancesReleasable: false);
        DataStores[1] = _LookupParentNs;
        onLookupParentNsFilled();

        _LookupParentRs = new DataStore<LookupParentR>(
          this,
          2,
          LookupParentR.SetKey,
          LookupParentR.RollbackItemNew,
          LookupParentR.RollbackItemStore,
          LookupParentR.RollbackItemUpdate,
          null,
          areInstancesUpdatable: true,
          areInstancesReleasable: false);
        DataStores[2] = _LookupParentRs;
        onLookupParentRsFilled();

        _LookupParentNRs = new DataStore<LookupParentNR>(
          this,
          3,
          LookupParentNR.SetKey,
          LookupParentNR.RollbackItemNew,
          LookupParentNR.RollbackItemStore,
          LookupParentNR.RollbackItemUpdate,
          null,
          areInstancesUpdatable: true,
          areInstancesReleasable: false);
        DataStores[3] = _LookupParentNRs;
        onLookupParentNRsFilled();

        _LookupChildren = new DataStore<LookupChild>(
          this,
          4,
          LookupChild.SetKey,
          LookupChild.RollbackItemNew,
          LookupChild.RollbackItemStore,
          LookupChild.RollbackItemUpdate,
          LookupChild.RollbackItemRelease,
          areInstancesUpdatable: true,
          areInstancesReleasable: true);
        DataStores[4] = _LookupChildren;
        onLookupChildrenFilled();

        _SingleChildParents = new DataStore<SingleChildParent>(
          this,
          5,
          SingleChildParent.SetKey,
          SingleChildParent.RollbackItemNew,
          SingleChildParent.RollbackItemStore,
          SingleChildParent.RollbackItemUpdate,
          SingleChildParent.RollbackItemRelease,
          areInstancesUpdatable: true,
          areInstancesReleasable: true);
        DataStores[5] = _SingleChildParents;
        onSingleChildParentsFilled();

        _SingleChildParentNs = new DataStore<SingleChildParentN>(
          this,
          6,
          SingleChildParentN.SetKey,
          SingleChildParentN.RollbackItemNew,
          SingleChildParentN.RollbackItemStore,
          SingleChildParentN.RollbackItemUpdate,
          SingleChildParentN.RollbackItemRelease,
          areInstancesUpdatable: true,
          areInstancesReleasable: true);
        DataStores[6] = _SingleChildParentNs;
        onSingleChildParentNsFilled();

        _SingleChildParentRs = new DataStore<SingleChildParentR>(
          this,
          7,
          SingleChildParentR.SetKey,
          SingleChildParentR.RollbackItemNew,
          SingleChildParentR.RollbackItemStore,
          SingleChildParentR.RollbackItemUpdate,
          SingleChildParentR.RollbackItemRelease,
          areInstancesUpdatable: true,
          areInstancesReleasable: true);
        DataStores[7] = _SingleChildParentRs;
        onSingleChildParentRsFilled();

        _SingleChildParentNRs = new DataStore<SingleChildParentNR>(
          this,
          8,
          SingleChildParentNR.SetKey,
          SingleChildParentNR.RollbackItemNew,
          SingleChildParentNR.RollbackItemStore,
          SingleChildParentNR.RollbackItemUpdate,
          SingleChildParentNR.RollbackItemRelease,
          areInstancesUpdatable: true,
          areInstancesReleasable: true);
        DataStores[8] = _SingleChildParentNRs;
        onSingleChildParentNRsFilled();

        _SingleChildChildren = new DataStore<SingleChildChild>(
          this,
          9,
          SingleChildChild.SetKey,
          SingleChildChild.RollbackItemNew,
          SingleChildChild.RollbackItemStore,
          SingleChildChild.RollbackItemUpdate,
          SingleChildChild.RollbackItemRelease,
          areInstancesUpdatable: true,
          areInstancesReleasable: true);
        DataStores[9] = _SingleChildChildren;
        onSingleChildChildrenFilled();

        _ListParents = new DataStore<ListParent>(
          this,
          10,
          ListParent.SetKey,
          ListParent.RollbackItemNew,
          ListParent.RollbackItemStore,
          ListParent.RollbackItemUpdate,
          ListParent.RollbackItemRelease,
          areInstancesUpdatable: true,
          areInstancesReleasable: true);
        DataStores[10] = _ListParents;
        onListParentsFilled();

        _ListParentNs = new DataStore<ListParentN>(
          this,
          11,
          ListParentN.SetKey,
          ListParentN.RollbackItemNew,
          ListParentN.RollbackItemStore,
          ListParentN.RollbackItemUpdate,
          ListParentN.RollbackItemRelease,
          areInstancesUpdatable: true,
          areInstancesReleasable: true);
        DataStores[11] = _ListParentNs;
        onListParentNsFilled();

        _ListParentRs = new DataStore<ListParentR>(
          this,
          12,
          ListParentR.SetKey,
          ListParentR.RollbackItemNew,
          ListParentR.RollbackItemStore,
          ListParentR.RollbackItemUpdate,
          ListParentR.RollbackItemRelease,
          areInstancesUpdatable: true,
          areInstancesReleasable: true);
        DataStores[12] = _ListParentRs;
        onListParentRsFilled();

        _ListParentNRs = new DataStore<ListParentNR>(
          this,
          13,
          ListParentNR.SetKey,
          ListParentNR.RollbackItemNew,
          ListParentNR.RollbackItemStore,
          ListParentNR.RollbackItemUpdate,
          ListParentNR.RollbackItemRelease,
          areInstancesUpdatable: true,
          areInstancesReleasable: true);
        DataStores[13] = _ListParentNRs;
        onListParentNRsFilled();

        _ListChidren = new DataStore<ListChild>(
          this,
          14,
          ListChild.SetKey,
          ListChild.RollbackItemNew,
          ListChild.RollbackItemStore,
          ListChild.RollbackItemUpdate,
          ListChild.RollbackItemRelease,
          areInstancesUpdatable: true,
          areInstancesReleasable: true);
        DataStores[14] = _ListChidren;
        onListChidrenFilled();

        _DictionaryParents = new DataStore<DictionaryParent>(
          this,
          15,
          DictionaryParent.SetKey,
          DictionaryParent.RollbackItemNew,
          DictionaryParent.RollbackItemStore,
          DictionaryParent.RollbackItemUpdate,
          DictionaryParent.RollbackItemRelease,
          areInstancesUpdatable: true,
          areInstancesReleasable: true);
        DataStores[15] = _DictionaryParents;
        onDictionaryParentsFilled();

        _DictionaryParentNs = new DataStore<DictionaryParentN>(
          this,
          16,
          DictionaryParentN.SetKey,
          DictionaryParentN.RollbackItemNew,
          DictionaryParentN.RollbackItemStore,
          DictionaryParentN.RollbackItemUpdate,
          DictionaryParentN.RollbackItemRelease,
          areInstancesUpdatable: true,
          areInstancesReleasable: true);
        DataStores[16] = _DictionaryParentNs;
        onDictionaryParentNsFilled();

        _DictionaryParentRs = new DataStore<DictionaryParentR>(
          this,
          17,
          DictionaryParentR.SetKey,
          DictionaryParentR.RollbackItemNew,
          DictionaryParentR.RollbackItemStore,
          DictionaryParentR.RollbackItemUpdate,
          DictionaryParentR.RollbackItemRelease,
          areInstancesUpdatable: true,
          areInstancesReleasable: true);
        DataStores[17] = _DictionaryParentRs;
        onDictionaryParentRsFilled();

        _DictionaryParentNRs = new DataStore<DictionaryParentNR>(
          this,
          18,
          DictionaryParentNR.SetKey,
          DictionaryParentNR.RollbackItemNew,
          DictionaryParentNR.RollbackItemStore,
          DictionaryParentNR.RollbackItemUpdate,
          DictionaryParentNR.RollbackItemRelease,
          areInstancesUpdatable: true,
          areInstancesReleasable: true);
        DataStores[18] = _DictionaryParentNRs;
        onDictionaryParentNRsFilled();

        _DictionaryChidren = new DataStore<DictionaryChild>(
          this,
          19,
          DictionaryChild.SetKey,
          DictionaryChild.RollbackItemNew,
          DictionaryChild.RollbackItemStore,
          DictionaryChild.RollbackItemUpdate,
          DictionaryChild.RollbackItemRelease,
          areInstancesUpdatable: true,
          areInstancesReleasable: true);
        DataStores[19] = _DictionaryChidren;
        onDictionaryChidrenFilled();

        _SortedListParents = new DataStore<SortedListParent>(
          this,
          20,
          SortedListParent.SetKey,
          SortedListParent.RollbackItemNew,
          SortedListParent.RollbackItemStore,
          SortedListParent.RollbackItemUpdate,
          SortedListParent.RollbackItemRelease,
          areInstancesUpdatable: true,
          areInstancesReleasable: true);
        DataStores[20] = _SortedListParents;
        onSortedListParentsFilled();

        _SortedListParentNs = new DataStore<SortedListParentN>(
          this,
          21,
          SortedListParentN.SetKey,
          SortedListParentN.RollbackItemNew,
          SortedListParentN.RollbackItemStore,
          SortedListParentN.RollbackItemUpdate,
          SortedListParentN.RollbackItemRelease,
          areInstancesUpdatable: true,
          areInstancesReleasable: true);
        DataStores[21] = _SortedListParentNs;
        onSortedListParentNsFilled();

        _SortedListParentRs = new DataStore<SortedListParentR>(
          this,
          22,
          SortedListParentR.SetKey,
          SortedListParentR.RollbackItemNew,
          SortedListParentR.RollbackItemStore,
          SortedListParentR.RollbackItemUpdate,
          SortedListParentR.RollbackItemRelease,
          areInstancesUpdatable: true,
          areInstancesReleasable: true);
        DataStores[22] = _SortedListParentRs;
        onSortedListParentRsFilled();

        _SortedListParentNRs = new DataStore<SortedListParentNR>(
          this,
          23,
          SortedListParentNR.SetKey,
          SortedListParentNR.RollbackItemNew,
          SortedListParentNR.RollbackItemStore,
          SortedListParentNR.RollbackItemUpdate,
          SortedListParentNR.RollbackItemRelease,
          areInstancesUpdatable: true,
          areInstancesReleasable: true);
        DataStores[23] = _SortedListParentNRs;
        onSortedListParentNRsFilled();

        _SortedListChidren = new DataStore<SortedListChild>(
          this,
          24,
          SortedListChild.SetKey,
          SortedListChild.RollbackItemNew,
          SortedListChild.RollbackItemStore,
          SortedListChild.RollbackItemUpdate,
          SortedListChild.RollbackItemRelease,
          areInstancesUpdatable: true,
          areInstancesReleasable: true);
        DataStores[24] = _SortedListChidren;
        onSortedListChidrenFilled();

        _DataTypeSamples = new DataStore<DataTypeSample>(
          this,
          25,
          DataTypeSample.SetKey,
          DataTypeSample.RollbackItemNew,
          DataTypeSample.RollbackItemStore,
          DataTypeSample.RollbackItemUpdate,
          DataTypeSample.RollbackItemRelease,
          areInstancesUpdatable: true,
          areInstancesReleasable: true);
        DataStores[25] = _DataTypeSamples;
        onDataTypeSamplesFilled();

        _PrivateConstructors = new DataStore<PrivateConstructor>(
          this,
          26,
          PrivateConstructor.SetKey,
          PrivateConstructor.RollbackItemNew,
          PrivateConstructor.RollbackItemStore,
          PrivateConstructor.RollbackItemUpdate,
          PrivateConstructor.RollbackItemRelease,
          areInstancesUpdatable: true,
          areInstancesReleasable: true);
        DataStores[26] = _PrivateConstructors;
        onPrivateConstructorsFilled();

        _PropertyNeedsDictionaryClasses = new DataStore<PropertyNeedsDictionaryClass>(
          this,
          27,
          PropertyNeedsDictionaryClass.SetKey,
          PropertyNeedsDictionaryClass.RollbackItemNew,
          PropertyNeedsDictionaryClass.RollbackItemStore,
          PropertyNeedsDictionaryClass.RollbackItemUpdate,
          PropertyNeedsDictionaryClass.RollbackItemRelease,
          areInstancesUpdatable: true,
          areInstancesReleasable: true);
        DataStores[27] = _PropertyNeedsDictionaryClasses;
        onPropertyNeedsDictionaryClassesFilled();

        _SampleMasters = new DataStore<SampleMaster>(
          this,
          28,
          SampleMaster.SetKey,
          SampleMaster.RollbackItemNew,
          SampleMaster.RollbackItemStore,
          SampleMaster.RollbackItemUpdate,
          null,
          areInstancesUpdatable: true,
          areInstancesReleasable: false);
        DataStores[28] = _SampleMasters;
        onSampleMastersFilled();

        _SampleX = new DataStore<Sample>(
          this,
          29,
          Sample.SetKey,
          Sample.RollbackItemNew,
          Sample.RollbackItemStore,
          Sample.RollbackItemUpdate,
          Sample.RollbackItemRelease,
          areInstancesUpdatable: true,
          areInstancesReleasable: true);
        DataStores[29] = _SampleX;
        onSampleXFilled();

        _SampleDetails = new DataStore<SampleDetail>(
          this,
          30,
          SampleDetail.SetKey,
          SampleDetail.RollbackItemNew,
          SampleDetail.RollbackItemStore,
          SampleDetail.RollbackItemUpdate,
          SampleDetail.RollbackItemRelease,
          areInstancesUpdatable: true,
          areInstancesReleasable: true);
        DataStores[30] = _SampleDetails;
        onSampleDetailsFilled();

        _NotMatchingChildrenListName_Parents = new DataStore<NotMatchingChildrenListName_Parent>(
          this,
          31,
          NotMatchingChildrenListName_Parent.SetKey,
          NotMatchingChildrenListName_Parent.RollbackItemNew,
          NotMatchingChildrenListName_Parent.RollbackItemStore,
          NotMatchingChildrenListName_Parent.RollbackItemUpdate,
          NotMatchingChildrenListName_Parent.RollbackItemRelease,
          areInstancesUpdatable: true,
          areInstancesReleasable: true);
        DataStores[31] = _NotMatchingChildrenListName_Parents;
        onNotMatchingChildrenListName_ParentsFilled();

        _NotMatchingChildrenListName_Childs = new DataStore<NotMatchingChildrenListName_Child>(
          this,
          32,
          NotMatchingChildrenListName_Child.SetKey,
          NotMatchingChildrenListName_Child.RollbackItemNew,
          NotMatchingChildrenListName_Child.RollbackItemStore,
          NotMatchingChildrenListName_Child.RollbackItemUpdate,
          NotMatchingChildrenListName_Child.RollbackItemRelease,
          areInstancesUpdatable: true,
          areInstancesReleasable: true);
        DataStores[32] = _NotMatchingChildrenListName_Childs;
        onNotMatchingChildrenListName_ChildsFilled();

      } else {
        _LookupParents = new DataStoreCSV<LookupParent>(
          this,
          0,
          csvConfig!,
          LookupParent.EstimatedLineLength,
          LookupParent.Headers,
          LookupParent.SetKey,
          LookupParent.Create,
          null,
          LookupParent.Update,
          LookupParent.Write,
          LookupParent.RollbackItemNew,
          LookupParent.RollbackItemStore,
          LookupParent.RollbackItemUpdate,
          null,
          areInstancesUpdatable: true,
          areInstancesReleasable: false);
        DataStores[0] = _LookupParents;
        onLookupParentsFilled();

        _LookupParentNs = new DataStoreCSV<LookupParentN>(
          this,
          1,
          csvConfig!,
          LookupParentN.EstimatedLineLength,
          LookupParentN.Headers,
          LookupParentN.SetKey,
          LookupParentN.Create,
          null,
          LookupParentN.Update,
          LookupParentN.Write,
          LookupParentN.RollbackItemNew,
          LookupParentN.RollbackItemStore,
          LookupParentN.RollbackItemUpdate,
          null,
          areInstancesUpdatable: true,
          areInstancesReleasable: false);
        DataStores[1] = _LookupParentNs;
        onLookupParentNsFilled();

        _LookupParentRs = new DataStoreCSV<LookupParentR>(
          this,
          2,
          csvConfig!,
          LookupParentR.EstimatedLineLength,
          LookupParentR.Headers,
          LookupParentR.SetKey,
          LookupParentR.Create,
          null,
          LookupParentR.Update,
          LookupParentR.Write,
          LookupParentR.RollbackItemNew,
          LookupParentR.RollbackItemStore,
          LookupParentR.RollbackItemUpdate,
          null,
          areInstancesUpdatable: true,
          areInstancesReleasable: false);
        DataStores[2] = _LookupParentRs;
        onLookupParentRsFilled();

        _LookupParentNRs = new DataStoreCSV<LookupParentNR>(
          this,
          3,
          csvConfig!,
          LookupParentNR.EstimatedLineLength,
          LookupParentNR.Headers,
          LookupParentNR.SetKey,
          LookupParentNR.Create,
          null,
          LookupParentNR.Update,
          LookupParentNR.Write,
          LookupParentNR.RollbackItemNew,
          LookupParentNR.RollbackItemStore,
          LookupParentNR.RollbackItemUpdate,
          null,
          areInstancesUpdatable: true,
          areInstancesReleasable: false);
        DataStores[3] = _LookupParentNRs;
        onLookupParentNRsFilled();

        _LookupChildren = new DataStoreCSV<LookupChild>(
          this,
          4,
          csvConfig!,
          LookupChild.EstimatedLineLength,
          LookupChild.Headers,
          LookupChild.SetKey,
          LookupChild.Create,
          null,
          LookupChild.Update,
          LookupChild.Write,
          LookupChild.RollbackItemNew,
          LookupChild.RollbackItemStore,
          LookupChild.RollbackItemUpdate,
          LookupChild.RollbackItemRelease,
          areInstancesUpdatable: true,
          areInstancesReleasable: true);
        DataStores[4] = _LookupChildren;
        onLookupChildrenFilled();

        _SingleChildParents = new DataStoreCSV<SingleChildParent>(
          this,
          5,
          csvConfig!,
          SingleChildParent.EstimatedLineLength,
          SingleChildParent.Headers,
          SingleChildParent.SetKey,
          SingleChildParent.Create,
          null,
          SingleChildParent.Update,
          SingleChildParent.Write,
          SingleChildParent.RollbackItemNew,
          SingleChildParent.RollbackItemStore,
          SingleChildParent.RollbackItemUpdate,
          SingleChildParent.RollbackItemRelease,
          areInstancesUpdatable: true,
          areInstancesReleasable: true);
        DataStores[5] = _SingleChildParents;
        onSingleChildParentsFilled();

        _SingleChildParentNs = new DataStoreCSV<SingleChildParentN>(
          this,
          6,
          csvConfig!,
          SingleChildParentN.EstimatedLineLength,
          SingleChildParentN.Headers,
          SingleChildParentN.SetKey,
          SingleChildParentN.Create,
          null,
          SingleChildParentN.Update,
          SingleChildParentN.Write,
          SingleChildParentN.RollbackItemNew,
          SingleChildParentN.RollbackItemStore,
          SingleChildParentN.RollbackItemUpdate,
          SingleChildParentN.RollbackItemRelease,
          areInstancesUpdatable: true,
          areInstancesReleasable: true);
        DataStores[6] = _SingleChildParentNs;
        onSingleChildParentNsFilled();

        _SingleChildParentRs = new DataStoreCSV<SingleChildParentR>(
          this,
          7,
          csvConfig!,
          SingleChildParentR.EstimatedLineLength,
          SingleChildParentR.Headers,
          SingleChildParentR.SetKey,
          SingleChildParentR.Create,
          null,
          SingleChildParentR.Update,
          SingleChildParentR.Write,
          SingleChildParentR.RollbackItemNew,
          SingleChildParentR.RollbackItemStore,
          SingleChildParentR.RollbackItemUpdate,
          SingleChildParentR.RollbackItemRelease,
          areInstancesUpdatable: true,
          areInstancesReleasable: true);
        DataStores[7] = _SingleChildParentRs;
        onSingleChildParentRsFilled();

        _SingleChildParentNRs = new DataStoreCSV<SingleChildParentNR>(
          this,
          8,
          csvConfig!,
          SingleChildParentNR.EstimatedLineLength,
          SingleChildParentNR.Headers,
          SingleChildParentNR.SetKey,
          SingleChildParentNR.Create,
          null,
          SingleChildParentNR.Update,
          SingleChildParentNR.Write,
          SingleChildParentNR.RollbackItemNew,
          SingleChildParentNR.RollbackItemStore,
          SingleChildParentNR.RollbackItemUpdate,
          SingleChildParentNR.RollbackItemRelease,
          areInstancesUpdatable: true,
          areInstancesReleasable: true);
        DataStores[8] = _SingleChildParentNRs;
        onSingleChildParentNRsFilled();

        _SingleChildChildren = new DataStoreCSV<SingleChildChild>(
          this,
          9,
          csvConfig!,
          SingleChildChild.EstimatedLineLength,
          SingleChildChild.Headers,
          SingleChildChild.SetKey,
          SingleChildChild.Create,
          SingleChildChild.Verify,
          SingleChildChild.Update,
          SingleChildChild.Write,
          SingleChildChild.RollbackItemNew,
          SingleChildChild.RollbackItemStore,
          SingleChildChild.RollbackItemUpdate,
          SingleChildChild.RollbackItemRelease,
          areInstancesUpdatable: true,
          areInstancesReleasable: true);
        DataStores[9] = _SingleChildChildren;
        onSingleChildChildrenFilled();

        _ListParents = new DataStoreCSV<ListParent>(
          this,
          10,
          csvConfig!,
          ListParent.EstimatedLineLength,
          ListParent.Headers,
          ListParent.SetKey,
          ListParent.Create,
          null,
          ListParent.Update,
          ListParent.Write,
          ListParent.RollbackItemNew,
          ListParent.RollbackItemStore,
          ListParent.RollbackItemUpdate,
          ListParent.RollbackItemRelease,
          areInstancesUpdatable: true,
          areInstancesReleasable: true);
        DataStores[10] = _ListParents;
        onListParentsFilled();

        _ListParentNs = new DataStoreCSV<ListParentN>(
          this,
          11,
          csvConfig!,
          ListParentN.EstimatedLineLength,
          ListParentN.Headers,
          ListParentN.SetKey,
          ListParentN.Create,
          null,
          ListParentN.Update,
          ListParentN.Write,
          ListParentN.RollbackItemNew,
          ListParentN.RollbackItemStore,
          ListParentN.RollbackItemUpdate,
          ListParentN.RollbackItemRelease,
          areInstancesUpdatable: true,
          areInstancesReleasable: true);
        DataStores[11] = _ListParentNs;
        onListParentNsFilled();

        _ListParentRs = new DataStoreCSV<ListParentR>(
          this,
          12,
          csvConfig!,
          ListParentR.EstimatedLineLength,
          ListParentR.Headers,
          ListParentR.SetKey,
          ListParentR.Create,
          null,
          ListParentR.Update,
          ListParentR.Write,
          ListParentR.RollbackItemNew,
          ListParentR.RollbackItemStore,
          ListParentR.RollbackItemUpdate,
          ListParentR.RollbackItemRelease,
          areInstancesUpdatable: true,
          areInstancesReleasable: true);
        DataStores[12] = _ListParentRs;
        onListParentRsFilled();

        _ListParentNRs = new DataStoreCSV<ListParentNR>(
          this,
          13,
          csvConfig!,
          ListParentNR.EstimatedLineLength,
          ListParentNR.Headers,
          ListParentNR.SetKey,
          ListParentNR.Create,
          null,
          ListParentNR.Update,
          ListParentNR.Write,
          ListParentNR.RollbackItemNew,
          ListParentNR.RollbackItemStore,
          ListParentNR.RollbackItemUpdate,
          ListParentNR.RollbackItemRelease,
          areInstancesUpdatable: true,
          areInstancesReleasable: true);
        DataStores[13] = _ListParentNRs;
        onListParentNRsFilled();

        _ListChidren = new DataStoreCSV<ListChild>(
          this,
          14,
          csvConfig!,
          ListChild.EstimatedLineLength,
          ListChild.Headers,
          ListChild.SetKey,
          ListChild.Create,
          ListChild.Verify,
          ListChild.Update,
          ListChild.Write,
          ListChild.RollbackItemNew,
          ListChild.RollbackItemStore,
          ListChild.RollbackItemUpdate,
          ListChild.RollbackItemRelease,
          areInstancesUpdatable: true,
          areInstancesReleasable: true);
        DataStores[14] = _ListChidren;
        onListChidrenFilled();

        _DictionaryParents = new DataStoreCSV<DictionaryParent>(
          this,
          15,
          csvConfig!,
          DictionaryParent.EstimatedLineLength,
          DictionaryParent.Headers,
          DictionaryParent.SetKey,
          DictionaryParent.Create,
          null,
          DictionaryParent.Update,
          DictionaryParent.Write,
          DictionaryParent.RollbackItemNew,
          DictionaryParent.RollbackItemStore,
          DictionaryParent.RollbackItemUpdate,
          DictionaryParent.RollbackItemRelease,
          areInstancesUpdatable: true,
          areInstancesReleasable: true);
        DataStores[15] = _DictionaryParents;
        onDictionaryParentsFilled();

        _DictionaryParentNs = new DataStoreCSV<DictionaryParentN>(
          this,
          16,
          csvConfig!,
          DictionaryParentN.EstimatedLineLength,
          DictionaryParentN.Headers,
          DictionaryParentN.SetKey,
          DictionaryParentN.Create,
          null,
          DictionaryParentN.Update,
          DictionaryParentN.Write,
          DictionaryParentN.RollbackItemNew,
          DictionaryParentN.RollbackItemStore,
          DictionaryParentN.RollbackItemUpdate,
          DictionaryParentN.RollbackItemRelease,
          areInstancesUpdatable: true,
          areInstancesReleasable: true);
        DataStores[16] = _DictionaryParentNs;
        onDictionaryParentNsFilled();

        _DictionaryParentRs = new DataStoreCSV<DictionaryParentR>(
          this,
          17,
          csvConfig!,
          DictionaryParentR.EstimatedLineLength,
          DictionaryParentR.Headers,
          DictionaryParentR.SetKey,
          DictionaryParentR.Create,
          null,
          DictionaryParentR.Update,
          DictionaryParentR.Write,
          DictionaryParentR.RollbackItemNew,
          DictionaryParentR.RollbackItemStore,
          DictionaryParentR.RollbackItemUpdate,
          DictionaryParentR.RollbackItemRelease,
          areInstancesUpdatable: true,
          areInstancesReleasable: true);
        DataStores[17] = _DictionaryParentRs;
        onDictionaryParentRsFilled();

        _DictionaryParentNRs = new DataStoreCSV<DictionaryParentNR>(
          this,
          18,
          csvConfig!,
          DictionaryParentNR.EstimatedLineLength,
          DictionaryParentNR.Headers,
          DictionaryParentNR.SetKey,
          DictionaryParentNR.Create,
          null,
          DictionaryParentNR.Update,
          DictionaryParentNR.Write,
          DictionaryParentNR.RollbackItemNew,
          DictionaryParentNR.RollbackItemStore,
          DictionaryParentNR.RollbackItemUpdate,
          DictionaryParentNR.RollbackItemRelease,
          areInstancesUpdatable: true,
          areInstancesReleasable: true);
        DataStores[18] = _DictionaryParentNRs;
        onDictionaryParentNRsFilled();

        _DictionaryChidren = new DataStoreCSV<DictionaryChild>(
          this,
          19,
          csvConfig!,
          DictionaryChild.EstimatedLineLength,
          DictionaryChild.Headers,
          DictionaryChild.SetKey,
          DictionaryChild.Create,
          DictionaryChild.Verify,
          DictionaryChild.Update,
          DictionaryChild.Write,
          DictionaryChild.RollbackItemNew,
          DictionaryChild.RollbackItemStore,
          DictionaryChild.RollbackItemUpdate,
          DictionaryChild.RollbackItemRelease,
          areInstancesUpdatable: true,
          areInstancesReleasable: true);
        DataStores[19] = _DictionaryChidren;
        onDictionaryChidrenFilled();

        _SortedListParents = new DataStoreCSV<SortedListParent>(
          this,
          20,
          csvConfig!,
          SortedListParent.EstimatedLineLength,
          SortedListParent.Headers,
          SortedListParent.SetKey,
          SortedListParent.Create,
          null,
          SortedListParent.Update,
          SortedListParent.Write,
          SortedListParent.RollbackItemNew,
          SortedListParent.RollbackItemStore,
          SortedListParent.RollbackItemUpdate,
          SortedListParent.RollbackItemRelease,
          areInstancesUpdatable: true,
          areInstancesReleasable: true);
        DataStores[20] = _SortedListParents;
        onSortedListParentsFilled();

        _SortedListParentNs = new DataStoreCSV<SortedListParentN>(
          this,
          21,
          csvConfig!,
          SortedListParentN.EstimatedLineLength,
          SortedListParentN.Headers,
          SortedListParentN.SetKey,
          SortedListParentN.Create,
          null,
          SortedListParentN.Update,
          SortedListParentN.Write,
          SortedListParentN.RollbackItemNew,
          SortedListParentN.RollbackItemStore,
          SortedListParentN.RollbackItemUpdate,
          SortedListParentN.RollbackItemRelease,
          areInstancesUpdatable: true,
          areInstancesReleasable: true);
        DataStores[21] = _SortedListParentNs;
        onSortedListParentNsFilled();

        _SortedListParentRs = new DataStoreCSV<SortedListParentR>(
          this,
          22,
          csvConfig!,
          SortedListParentR.EstimatedLineLength,
          SortedListParentR.Headers,
          SortedListParentR.SetKey,
          SortedListParentR.Create,
          null,
          SortedListParentR.Update,
          SortedListParentR.Write,
          SortedListParentR.RollbackItemNew,
          SortedListParentR.RollbackItemStore,
          SortedListParentR.RollbackItemUpdate,
          SortedListParentR.RollbackItemRelease,
          areInstancesUpdatable: true,
          areInstancesReleasable: true);
        DataStores[22] = _SortedListParentRs;
        onSortedListParentRsFilled();

        _SortedListParentNRs = new DataStoreCSV<SortedListParentNR>(
          this,
          23,
          csvConfig!,
          SortedListParentNR.EstimatedLineLength,
          SortedListParentNR.Headers,
          SortedListParentNR.SetKey,
          SortedListParentNR.Create,
          null,
          SortedListParentNR.Update,
          SortedListParentNR.Write,
          SortedListParentNR.RollbackItemNew,
          SortedListParentNR.RollbackItemStore,
          SortedListParentNR.RollbackItemUpdate,
          SortedListParentNR.RollbackItemRelease,
          areInstancesUpdatable: true,
          areInstancesReleasable: true);
        DataStores[23] = _SortedListParentNRs;
        onSortedListParentNRsFilled();

        _SortedListChidren = new DataStoreCSV<SortedListChild>(
          this,
          24,
          csvConfig!,
          SortedListChild.EstimatedLineLength,
          SortedListChild.Headers,
          SortedListChild.SetKey,
          SortedListChild.Create,
          SortedListChild.Verify,
          SortedListChild.Update,
          SortedListChild.Write,
          SortedListChild.RollbackItemNew,
          SortedListChild.RollbackItemStore,
          SortedListChild.RollbackItemUpdate,
          SortedListChild.RollbackItemRelease,
          areInstancesUpdatable: true,
          areInstancesReleasable: true);
        DataStores[24] = _SortedListChidren;
        onSortedListChidrenFilled();

        _DataTypeSamples = new DataStoreCSV<DataTypeSample>(
          this,
          25,
          csvConfig!,
          DataTypeSample.EstimatedLineLength,
          DataTypeSample.Headers,
          DataTypeSample.SetKey,
          DataTypeSample.Create,
          null,
          DataTypeSample.Update,
          DataTypeSample.Write,
          DataTypeSample.RollbackItemNew,
          DataTypeSample.RollbackItemStore,
          DataTypeSample.RollbackItemUpdate,
          DataTypeSample.RollbackItemRelease,
          areInstancesUpdatable: true,
          areInstancesReleasable: true);
        DataStores[25] = _DataTypeSamples;
        onDataTypeSamplesFilled();

        _PrivateConstructors = new DataStoreCSV<PrivateConstructor>(
          this,
          26,
          csvConfig!,
          PrivateConstructor.EstimatedLineLength,
          PrivateConstructor.Headers,
          PrivateConstructor.SetKey,
          PrivateConstructor.Create,
          null,
          PrivateConstructor.Update,
          PrivateConstructor.Write,
          PrivateConstructor.RollbackItemNew,
          PrivateConstructor.RollbackItemStore,
          PrivateConstructor.RollbackItemUpdate,
          PrivateConstructor.RollbackItemRelease,
          areInstancesUpdatable: true,
          areInstancesReleasable: true);
        DataStores[26] = _PrivateConstructors;
        onPrivateConstructorsFilled();

        _PropertyNeedsDictionaryClasses = new DataStoreCSV<PropertyNeedsDictionaryClass>(
          this,
          27,
          csvConfig!,
          PropertyNeedsDictionaryClass.EstimatedLineLength,
          PropertyNeedsDictionaryClass.Headers,
          PropertyNeedsDictionaryClass.SetKey,
          PropertyNeedsDictionaryClass.Create,
          null,
          PropertyNeedsDictionaryClass.Update,
          PropertyNeedsDictionaryClass.Write,
          PropertyNeedsDictionaryClass.RollbackItemNew,
          PropertyNeedsDictionaryClass.RollbackItemStore,
          PropertyNeedsDictionaryClass.RollbackItemUpdate,
          PropertyNeedsDictionaryClass.RollbackItemRelease,
          areInstancesUpdatable: true,
          areInstancesReleasable: true);
        DataStores[27] = _PropertyNeedsDictionaryClasses;
        onPropertyNeedsDictionaryClassesFilled();

        _SampleMasters = new DataStoreCSV<SampleMaster>(
          this,
          28,
          csvConfig!,
          SampleMaster.EstimatedLineLength,
          SampleMaster.Headers,
          SampleMaster.SetKey,
          SampleMaster.Create,
          null,
          SampleMaster.Update,
          SampleMaster.Write,
          SampleMaster.RollbackItemNew,
          SampleMaster.RollbackItemStore,
          SampleMaster.RollbackItemUpdate,
          null,
          areInstancesUpdatable: true,
          areInstancesReleasable: false);
        DataStores[28] = _SampleMasters;
        onSampleMastersFilled();

        _SampleX = new DataStoreCSV<Sample>(
          this,
          29,
          csvConfig!,
          Sample.EstimatedLineLength,
          Sample.Headers,
          Sample.SetKey,
          Sample.Create,
          Sample.Verify,
          Sample.Update,
          Sample.Write,
          Sample.RollbackItemNew,
          Sample.RollbackItemStore,
          Sample.RollbackItemUpdate,
          Sample.RollbackItemRelease,
          areInstancesUpdatable: true,
          areInstancesReleasable: true);
        DataStores[29] = _SampleX;
        onSampleXFilled();

        _SampleDetails = new DataStoreCSV<SampleDetail>(
          this,
          30,
          csvConfig!,
          SampleDetail.EstimatedLineLength,
          SampleDetail.Headers,
          SampleDetail.SetKey,
          SampleDetail.Create,
          SampleDetail.Verify,
          SampleDetail.Update,
          SampleDetail.Write,
          SampleDetail.RollbackItemNew,
          SampleDetail.RollbackItemStore,
          SampleDetail.RollbackItemUpdate,
          SampleDetail.RollbackItemRelease,
          areInstancesUpdatable: true,
          areInstancesReleasable: true);
        DataStores[30] = _SampleDetails;
        onSampleDetailsFilled();

        _NotMatchingChildrenListName_Parents = new DataStoreCSV<NotMatchingChildrenListName_Parent>(
          this,
          31,
          csvConfig!,
          NotMatchingChildrenListName_Parent.EstimatedLineLength,
          NotMatchingChildrenListName_Parent.Headers,
          NotMatchingChildrenListName_Parent.SetKey,
          NotMatchingChildrenListName_Parent.Create,
          null,
          NotMatchingChildrenListName_Parent.Update,
          NotMatchingChildrenListName_Parent.Write,
          NotMatchingChildrenListName_Parent.RollbackItemNew,
          NotMatchingChildrenListName_Parent.RollbackItemStore,
          NotMatchingChildrenListName_Parent.RollbackItemUpdate,
          NotMatchingChildrenListName_Parent.RollbackItemRelease,
          areInstancesUpdatable: true,
          areInstancesReleasable: true);
        DataStores[31] = _NotMatchingChildrenListName_Parents;
        onNotMatchingChildrenListName_ParentsFilled();

        _NotMatchingChildrenListName_Childs = new DataStoreCSV<NotMatchingChildrenListName_Child>(
          this,
          32,
          csvConfig!,
          NotMatchingChildrenListName_Child.EstimatedLineLength,
          NotMatchingChildrenListName_Child.Headers,
          NotMatchingChildrenListName_Child.SetKey,
          NotMatchingChildrenListName_Child.Create,
          NotMatchingChildrenListName_Child.Verify,
          NotMatchingChildrenListName_Child.Update,
          NotMatchingChildrenListName_Child.Write,
          NotMatchingChildrenListName_Child.RollbackItemNew,
          NotMatchingChildrenListName_Child.RollbackItemStore,
          NotMatchingChildrenListName_Child.RollbackItemUpdate,
          NotMatchingChildrenListName_Child.RollbackItemRelease,
          areInstancesUpdatable: true,
          areInstancesReleasable: true);
        DataStores[32] = _NotMatchingChildrenListName_Childs;
        onNotMatchingChildrenListName_ChildsFilled();

      }
      onConstructed();
      IsInitialised = true;
#if DEBUG
      Trace = trace;
      Trace?.Invoke($"Context DC initialised");
#endif
    }

    /// <summary>}
    /// Called at beginning of constructor
    /// </summary>}
    partial void onConstructing(string? backupResult);

    /// <summary>}
    /// Called at end of constructor
    /// </summary>}
    partial void onConstructed();

    /// <summary>}
    /// Called once the data for LookupParents is read.
    /// </summary>}
    partial void onLookupParentsFilled();

    /// <summary>}
    /// Called once the data for LookupParentNs is read.
    /// </summary>}
    partial void onLookupParentNsFilled();

    /// <summary>}
    /// Called once the data for LookupParentRs is read.
    /// </summary>}
    partial void onLookupParentRsFilled();

    /// <summary>}
    /// Called once the data for LookupParentNRs is read.
    /// </summary>}
    partial void onLookupParentNRsFilled();

    /// <summary>}
    /// Called once the data for LookupChildren is read.
    /// </summary>}
    partial void onLookupChildrenFilled();

    /// <summary>}
    /// Called once the data for SingleChildParents is read.
    /// </summary>}
    partial void onSingleChildParentsFilled();

    /// <summary>}
    /// Called once the data for SingleChildParentNs is read.
    /// </summary>}
    partial void onSingleChildParentNsFilled();

    /// <summary>}
    /// Called once the data for SingleChildParentRs is read.
    /// </summary>}
    partial void onSingleChildParentRsFilled();

    /// <summary>}
    /// Called once the data for SingleChildParentNRs is read.
    /// </summary>}
    partial void onSingleChildParentNRsFilled();

    /// <summary>}
    /// Called once the data for SingleChildChildren is read.
    /// </summary>}
    partial void onSingleChildChildrenFilled();

    /// <summary>}
    /// Called once the data for ListParents is read.
    /// </summary>}
    partial void onListParentsFilled();

    /// <summary>}
    /// Called once the data for ListParentNs is read.
    /// </summary>}
    partial void onListParentNsFilled();

    /// <summary>}
    /// Called once the data for ListParentRs is read.
    /// </summary>}
    partial void onListParentRsFilled();

    /// <summary>}
    /// Called once the data for ListParentNRs is read.
    /// </summary>}
    partial void onListParentNRsFilled();

    /// <summary>}
    /// Called once the data for ListChidren is read.
    /// </summary>}
    partial void onListChidrenFilled();

    /// <summary>}
    /// Called once the data for DictionaryParents is read.
    /// </summary>}
    partial void onDictionaryParentsFilled();

    /// <summary>}
    /// Called once the data for DictionaryParentNs is read.
    /// </summary>}
    partial void onDictionaryParentNsFilled();

    /// <summary>}
    /// Called once the data for DictionaryParentRs is read.
    /// </summary>}
    partial void onDictionaryParentRsFilled();

    /// <summary>}
    /// Called once the data for DictionaryParentNRs is read.
    /// </summary>}
    partial void onDictionaryParentNRsFilled();

    /// <summary>}
    /// Called once the data for DictionaryChidren is read.
    /// </summary>}
    partial void onDictionaryChidrenFilled();

    /// <summary>}
    /// Called once the data for SortedListParents is read.
    /// </summary>}
    partial void onSortedListParentsFilled();

    /// <summary>}
    /// Called once the data for SortedListParentNs is read.
    /// </summary>}
    partial void onSortedListParentNsFilled();

    /// <summary>}
    /// Called once the data for SortedListParentRs is read.
    /// </summary>}
    partial void onSortedListParentRsFilled();

    /// <summary>}
    /// Called once the data for SortedListParentNRs is read.
    /// </summary>}
    partial void onSortedListParentNRsFilled();

    /// <summary>}
    /// Called once the data for SortedListChidren is read.
    /// </summary>}
    partial void onSortedListChidrenFilled();

    /// <summary>}
    /// Called once the data for DataTypeSamples is read.
    /// </summary>}
    partial void onDataTypeSamplesFilled();

    /// <summary>}
    /// Called once the data for PrivateConstructors is read.
    /// </summary>}
    partial void onPrivateConstructorsFilled();

    /// <summary>}
    /// Called once the data for PropertyNeedsDictionaryClasses is read.
    /// </summary>}
    partial void onPropertyNeedsDictionaryClassesFilled();

    /// <summary>}
    /// Called once the data for SampleMasters is read.
    /// </summary>}
    partial void onSampleMastersFilled();

    /// <summary>}
    /// Called once the data for SampleX is read.
    /// </summary>}
    partial void onSampleXFilled();

    /// <summary>}
    /// Called once the data for SampleDetails is read.
    /// </summary>}
    partial void onSampleDetailsFilled();

    /// <summary>}
    /// Called once the data for NotMatchingChildrenListName_Parents is read.
    /// </summary>}
    partial void onNotMatchingChildrenListName_ParentsFilled();

    /// <summary>}
    /// Called once the data for NotMatchingChildrenListName_Childs is read.
    /// </summary>}
    partial void onNotMatchingChildrenListName_ChildsFilled();
    #endregion


    #region Overrides
    //      ---------

#if DEBUG
    protected override void TraceFromBase(TraceMessageEnum traceMessageEnum) {
      string message;
      switch (traceMessageEnum) {
      case TraceMessageEnum.none: return;
      case TraceMessageEnum.StartTransaction: message = "Start transaction"; break;
      case TraceMessageEnum.CommitTransaction: message = "Commit transaction"; break;
      case TraceMessageEnum.RollingbackTransaction: message = "Rolling back transaction"; break;
      case TraceMessageEnum.RolledbackTransaction: message = "Rolled back transaction"; break;
      default:
        throw new NotSupportedException();
      }
      Trace?.Invoke(message);
    }
#endif


    internal new void AddTransaction(TransactionItem transactionItem) {
      base.AddTransaction(transactionItem);
    }


    protected override void Dispose(bool disposing) {
      if (disposing) {
        onDispose();
        _NotMatchingChildrenListName_Childs?.Dispose();
        _NotMatchingChildrenListName_Childs = null!;
        _NotMatchingChildrenListName_Parents?.Dispose();
        _NotMatchingChildrenListName_Parents = null!;
        _SampleDetails?.Dispose();
        _SampleDetails = null!;
        _SampleX?.Dispose();
        _SampleX = null!;
        _SampleMasters?.Dispose();
        _SampleMasters = null!;
        _PropertyNeedsDictionaryClasses?.Dispose();
        _PropertyNeedsDictionaryClasses = null!;
        _PropertyNeedsDictionaryClassesByIdInt = null!;
        _PropertyNeedsDictionaryClassesByIdString = null!;
        _PropertyNeedsDictionaryClassesByTextLower = null!;
        _PropertyNeedsDictionaryClassesByTextNullableLower = null!;
        _PropertyNeedsDictionaryClassesByTextReadonlyLower = null!;
        _PrivateConstructors?.Dispose();
        _PrivateConstructors = null!;
        _DataTypeSamples?.Dispose();
        _DataTypeSamples = null!;
        _SortedListChidren?.Dispose();
        _SortedListChidren = null!;
        _SortedListParentNRs?.Dispose();
        _SortedListParentNRs = null!;
        _SortedListParentRs?.Dispose();
        _SortedListParentRs = null!;
        _SortedListParentNs?.Dispose();
        _SortedListParentNs = null!;
        _SortedListParents?.Dispose();
        _SortedListParents = null!;
        _DictionaryChidren?.Dispose();
        _DictionaryChidren = null!;
        _DictionaryParentNRs?.Dispose();
        _DictionaryParentNRs = null!;
        _DictionaryParentRs?.Dispose();
        _DictionaryParentRs = null!;
        _DictionaryParentNs?.Dispose();
        _DictionaryParentNs = null!;
        _DictionaryParents?.Dispose();
        _DictionaryParents = null!;
        _ListChidren?.Dispose();
        _ListChidren = null!;
        _ListParentNRs?.Dispose();
        _ListParentNRs = null!;
        _ListParentRs?.Dispose();
        _ListParentRs = null!;
        _ListParentNs?.Dispose();
        _ListParentNs = null!;
        _ListParents?.Dispose();
        _ListParents = null!;
        _SingleChildChildren?.Dispose();
        _SingleChildChildren = null!;
        _SingleChildParentNRs?.Dispose();
        _SingleChildParentNRs = null!;
        _SingleChildParentRs?.Dispose();
        _SingleChildParentRs = null!;
        _SingleChildParentNs?.Dispose();
        _SingleChildParentNs = null!;
        _SingleChildParents?.Dispose();
        _SingleChildParents = null!;
        _LookupChildren?.Dispose();
        _LookupChildren = null!;
        _LookupParentNRs?.Dispose();
        _LookupParentNRs = null!;
        _LookupParentRs?.Dispose();
        _LookupParentRs = null!;
        _LookupParentNs?.Dispose();
        _LookupParentNs = null!;
        _LookupParents?.Dispose();
        _LookupParents = null!;
        data = null;
      }
      base.Dispose(disposing);
    }

    /// <summary>}
    /// Called before storageDirectories get disposed.
    /// </summary>}
    partial void onDispose();
    #endregion


    #region Methods
    //      -------

    #endregion

  }
}

