//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by StorageClassGenerator
//
//     Do not change code in this file, it will get lost when the file gets 
//     auto generated again. Write your code into TestChild.cs.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
using System;
using System.Collections.Generic;
using System.Threading;
using StorageLib;


namespace TestContext  {


  public partial class TestChild: IStorageItem<TestChild> {

    #region Properties
    //      ----------

    /// <summary>
    /// Unique identifier for TestChild. Gets set once TestChild gets added to DC.Data.
    /// </summary>
    public int Key { get; private set; }
    internal static void SetKey(IStorageItem testChild, int key, bool isRollback) {
#if DEBUG
      if (isRollback) {
        if (key==StorageExtensions.NoKey) {
          DC.Trace?.Invoke($"Release TestChild key @{testChild.Key} #{testChild.GetHashCode()}");
        } else {
          DC.Trace?.Invoke($"Store TestChild key @{key} #{testChild.GetHashCode()}");
        }
      }
#endif
      ((TestChild)testChild).Key = key;
    }


    public string Text { get; private set; }


    public TestParent Parent { get; private set; }


    /// <summary>
    /// Headers written to first line in CSV file
    /// </summary>
    internal static readonly string[] Headers = {"Key", "Text", "Parent"};


    /// <summary>
    /// None existing TestChild, used as a temporary place holder when reading a CSV file
    /// which was not compacted. It might create first a later deleted item linking to a 
    /// deleted parent. In this case, the parent property gets set to NoTestChild. Once the CSV
    /// file is completely read, that child will actually be deleted (released) and Verify()
    /// ensures that there are no stored children with links to NoTestChild.
    /// </summary>
    internal static TestChild NoTestChild = new TestChild("NoText", TestParent.NoTestParent, isStoring: false);
    #endregion


    #region Events
    //      ------

    /// <summary>
    /// Content of TestChild has changed. Gets only raised for changes occurring after loading DC.Data with previously stored data.
    /// </summary>
    public event Action</*old*/TestChild, /*new*/TestChild>? HasChanged;
    #endregion


    #region Constructors
    //      ------------

    /// <summary>
    /// TestChild Constructor. If isStoring is true, adds TestChild to DC.Data.TestChildren.
    /// </summary>
    public TestChild(string text, TestParent parent, bool isStoring = true) {
      Key = StorageExtensions.NoKey;
      Text = text;
      Parent = parent;
#if DEBUG
      DC.Trace?.Invoke($"new TestChild: {ToTraceString()}");
#endif
      Parent.AddToChildren(this);
      onConstruct();
      if (DC.Data.IsTransaction) {
        DC.Data.AddTransaction(new TransactionItem(34,TransactionActivityEnum.New, Key, this));
      }

      if (isStoring) {
        Store();
      }
    }
    partial void onConstruct();


    /// <summary>
    /// Cloning constructor. It will copy all data from original except any collection (children).
    /// </summary>
    #pragma warning disable CS8618 // Children collections are uninitialized.
    public TestChild(TestChild original) {
    #pragma warning restore CS8618 //
      Key = StorageExtensions.NoKey;
      Text = original.Text;
      Parent = original.Parent;
      onCloned(this);
    }
    partial void onCloned(TestChild clone);


    /// <summary>
    /// Constructor for TestChild read from CSV file
    /// </summary>
    private TestChild(int key, CsvReader csvReader){
      Key = key;
      Text = csvReader.ReadString();
      var testParentKey = csvReader.ReadInt();
      Parent = DC.Data._TestParents.GetItem(testParentKey)?? TestParent.NoTestParent;
      if (Parent!=TestParent.NoTestParent) {
        Parent.AddToChildren(this);
      }
      onCsvConstruct();
    }
    partial void onCsvConstruct();


    /// <summary>
    /// New TestChild read from CSV file
    /// </summary>
    internal static TestChild Create(int key, CsvReader csvReader) {
      return new TestChild(key, csvReader);
    }


    /// <summary>
    /// Verify that testChild.Parent exists.
    /// </summary>
    internal static bool Verify(TestChild testChild) {
      if (testChild.Parent==TestParent.NoTestParent) return false;
      return true;
    }
    #endregion


    #region Methods
    //      -------

    /// <summary>
    /// Adds TestChild to DC.Data.TestChildren.<br/>
    /// Throws an Exception when TestChild is already stored.
    /// </summary>
    public void Store() {
      if (Key>=0) {
        throw new Exception($"TestChild cannot be stored again in DC.Data, key {Key} is greater equal 0." + Environment.NewLine + ToString());
      }

      var isCancelled = false;
      onStoring(ref isCancelled);
      if (isCancelled) return;

      if (Parent.Key<0) {
        throw new Exception($"Cannot store child TestChild '{this}'.Parent to TestParent '{Parent}' because parent is not stored yet.");
      }
      DC.Data._TestChildren.Add(this);
      onStored();
#if DEBUG
      DC.Trace?.Invoke($"Stored TestChild #{GetHashCode()} @{Key}");
#endif
    }
    partial void onStoring(ref bool isCancelled);
    partial void onStored();


    /// <summary>
    /// Estimated number of UTF8 characters needed to write TestChild to CSV file
    /// </summary>
    public const int EstimatedLineLength = 150;


    /// <summary>
    /// Write TestChild to CSV file
    /// </summary>
    internal static void Write(TestChild testChild, CsvWriter csvWriter) {
      testChild.onCsvWrite();
      csvWriter.Write(testChild.Text);
      if (testChild.Parent.Key<0) throw new Exception($"Cannot write testChild '{testChild}' to CSV File, because Parent is not stored in DC.Data.TestParents.");

      csvWriter.Write(testChild.Parent.Key.ToString());
    }
    partial void onCsvWrite();


    /// <summary>
    /// Updates TestChild with the provided values
    /// </summary>
    public void Update(string text, TestParent parent) {
      if (Key>=0){
        if (parent.Key<0) {
          throw new Exception($"TestChild.Update(): It is illegal to add stored TestChild '{this}'" + Environment.NewLine + 
            $"to Parent '{parent}', which is not stored.");
        }
      }
      var clone = new TestChild(this);
      var isCancelled = false;
      onUpdating(text, parent, ref isCancelled);
      if (isCancelled) return;

#if DEBUG
      DC.Trace?.Invoke($"Updating TestChild: {ToTraceString()}");
#endif

      //remove not yet updated item from parents which will be removed by update
      var hasParentChanged = Parent!=parent;
      if (hasParentChanged) {
        Parent.RemoveFromChildren(this);
      }

      //update properties and detect if any value has changed
      var isChangeDetected = false;
      if (Text!=text) {
        Text = text;
        isChangeDetected = true;
      }
      if (Parent!=parent) {
        Parent = parent;
        isChangeDetected = true;
      }

      //add updated item to parents which have been newly added during update
      if (hasParentChanged) {
        Parent.AddToChildren(this);
      }
      if (isChangeDetected) {
        onUpdated(clone);
        if (Key>=0) {
          DC.Data._TestChildren.ItemHasChanged(clone, this);
        } else if (DC.Data.IsTransaction) {
          DC.Data.AddTransaction(new TransactionItem(34, TransactionActivityEnum.Update, Key, this, oldItem: clone));
        }
        HasChanged?.Invoke(clone, this);
      }
#if DEBUG
      DC.Trace?.Invoke($"Updated TestChild: {ToTraceString()}");
#endif
    }
    partial void onUpdating(string text, TestParent parent, ref bool isCancelled);
    partial void onUpdated(TestChild old);


    /// <summary>
    /// Updates this TestChild with values from CSV file
    /// </summary>
    internal static void Update(TestChild testChild, CsvReader csvReader){
      testChild.Text = csvReader.ReadString();
        var parent = DC.Data._TestParents.GetItem(csvReader.ReadInt())??
          TestParent.NoTestParent;
      if (testChild.Parent!=parent) {
        if (testChild.Parent!=TestParent.NoTestParent) {
          testChild.Parent.RemoveFromChildren(testChild);
        }
        testChild.Parent = parent;
        testChild.Parent.AddToChildren(testChild);
      }
      testChild.onCsvUpdate();
    }
    partial void onCsvUpdate();


    /// <summary>
    /// Removes TestChild from DC.Data.TestChildren.
    /// </summary>
    public void Release() {
      if (Key<0) {
        throw new Exception($"TestChild.Release(): TestChild '{this}' is not stored in DC.Data, key is {Key}.");
      }
      onReleasing();
      DC.Data._TestChildren.Remove(Key);
      onReleased();
#if DEBUG
      DC.Trace?.Invoke($"Released TestChild @{Key} #{GetHashCode()}");
#endif
    }
    partial void onReleasing();
    partial void onReleased();


    /// <summary>
    /// Removes TestChild from parents as part of a transaction rollback of the new() statement.
    /// </summary>
    internal static void RollbackItemNew(IStorageItem item) {
      var testChild = (TestChild) item;
#if DEBUG
      DC.Trace?.Invoke($"Rollback new TestChild(): {testChild.ToTraceString()}");
#endif
      if (testChild.Parent!=TestParent.NoTestParent) {
        testChild.Parent.RemoveFromChildren(testChild);
      }
      testChild.onRollbackItemNew();
    }
    partial void onRollbackItemNew();


    /// <summary>
    /// Releases TestChild from DC.Data.TestChildren as part of a transaction rollback of Store().
    /// </summary>
    internal static void RollbackItemStore(IStorageItem item) {
      var testChild = (TestChild) item;
#if DEBUG
      DC.Trace?.Invoke($"Rollback TestChild.Store(): {testChild.ToTraceString()}");
#endif
      testChild.onRollbackItemStored();
    }
    partial void onRollbackItemStored();


    /// <summary>
    /// Restores the TestChild item data as it was before the last update as part of a transaction rollback.
    /// </summary>
    internal static void RollbackItemUpdate(IStorageItem oldStorageItem, IStorageItem newStorageItem) {
      var oldItem = (TestChild) oldStorageItem;//an item clone with the values before item was updated
      var item = (TestChild) newStorageItem;//is the instance whose values should be restored
#if DEBUG
      DC.Trace?.Invoke($"Rolling back TestChild.Update(): {item.ToTraceString()}");
#endif

      // remove updated item from parents
      var hasParentChanged = oldItem.Parent!=item.Parent;
      if (hasParentChanged) {
        item.Parent.RemoveFromChildren(item);
      }

      // updated item: restore old values
      item.Text = oldItem.Text;
      item.Parent = oldItem.Parent;

      // add item with previous values to parents
      if (hasParentChanged) {
        item.Parent.AddToChildren(item);
      }
      item.onRollbackItemUpdated(oldItem);
#if DEBUG
      DC.Trace?.Invoke($"Rolled back TestChild.Update(): {item.ToTraceString()}");
#endif
    }
    partial void onRollbackItemUpdated(TestChild oldTestChild);


    /// <summary>
    /// Adds TestChild to DC.Data.TestChildren as part of a transaction rollback of Release().
    /// </summary>
    internal static void RollbackItemRelease(IStorageItem item) {
      var testChild = (TestChild) item;
#if DEBUG
      DC.Trace?.Invoke($"Rollback TestChild.Release(): {testChild.ToTraceString()}");
#endif
      testChild.onRollbackItemRelease();
    }
    partial void onRollbackItemRelease();


    /// <summary>
    /// Returns property values for tracing. Parents are shown with their key instead their content.
    /// </summary>
    public string ToTraceString() {
      var returnString =
        $"{this.GetKeyOrHash()}|" +
        $" {Text}|" +
        $" Parent {Parent.GetKeyOrHash()}";
      onToTraceString(ref returnString);
      return returnString;
    }
    partial void onToTraceString(ref string returnString);


    /// <summary>
    /// Returns property values
    /// </summary>
    public string ToShortString() {
      var returnString =
        $"{Key.ToKeyString()}," +
        $" {Text}," +
        $" {Parent.ToShortString()}";
      onToShortString(ref returnString);
      return returnString;
    }
    partial void onToShortString(ref string returnString);


    /// <summary>
    /// Returns all property names and values
    /// </summary>
    public override string ToString() {
      var returnString =
        $"Key: {Key.ToKeyString()}," +
        $" Text: {Text}," +
        $" Parent: {Parent.ToShortString()};";
      onToString(ref returnString);
      return returnString;
    }
    partial void onToString(ref string returnString);
    #endregion
  }
}
