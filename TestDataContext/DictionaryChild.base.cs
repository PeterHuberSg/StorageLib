//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by StorageClassGenerator
//
//     Do not change code in this file, it will get lost when the file gets 
//     auto generated again. Write your code into DictionaryChild.cs.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
using System;
using System.Collections.Generic;
using System.Threading;
using StorageLib;


namespace StorageDataContext  {


  public partial class DictionaryChild: IStorageItemGeneric<DictionaryChild> {

    #region Properties
    //      ----------

    /// <summary>
    /// Unique identifier for DictionaryChild. Gets set once DictionaryChild gets added to DC.Data.
    /// </summary>
    public int Key { get; private set; }
    internal static void SetKey(IStorageItem dictionaryChild, int key, bool isRollback) {
#if DEBUG
      if (isRollback) {
        if (key==StorageExtensions.NoKey) {
          DC.Trace?.Invoke($"Release DictionaryChild key @{dictionaryChild.Key} #{dictionaryChild.GetHashCode()}");
        } else {
          DC.Trace?.Invoke($"Store DictionaryChild key @{key} #{dictionaryChild.GetHashCode()}");
        }
      }
#endif
      ((DictionaryChild)dictionaryChild).Key = key;
    }


    public string Text { get; private set; }


    public DictionaryParent Parent { get; private set; }


    public DictionaryParentN? ParentN { get; private set; }


    public DictionaryParentR ParentR { get; }


    public DictionaryParentNR? ParentNR { get; }


    /// <summary>
    /// Headers written to first line in CSV file
    /// </summary>
    internal static readonly string[] Headers = {
      "Key", 
      "Text", 
      "Parent", 
      "ParentN", 
      "ParentR", 
      "ParentNR"
    };


    /// <summary>
    /// None existing DictionaryChild
    /// </summary>
    internal static DictionaryChild NoDictionaryChild = new DictionaryChild("NoText", DictionaryParent.NoDictionaryParent, null, DictionaryParentR.NoDictionaryParentR, null, isStoring: false);
    #endregion


    #region Events
    //      ------

    /// <summary>
    /// Content of DictionaryChild has changed. Gets only raised for changes occurring after loading DC.Data with previously stored data.
    /// </summary>
    public event Action</*old*/DictionaryChild, /*new*/DictionaryChild>? HasChanged;
    #endregion


    #region Constructors
    //      ------------

    /// <summary>
    /// DictionaryChild Constructor. If isStoring is true, adds DictionaryChild to DC.Data.DictionaryChidren.
    /// </summary>
    public DictionaryChild(
      string text, 
      DictionaryParent parent, 
      DictionaryParentN? parentN, 
      DictionaryParentR parentR, 
      DictionaryParentNR? parentNR, 
      bool isStoring = true)
    {
      Key = StorageExtensions.NoKey;
      Text = text;
      Parent = parent;
      ParentN = parentN;
      ParentR = parentR;
      ParentNR = parentNR;
#if DEBUG
      DC.Trace?.Invoke($"new DictionaryChild: {ToTraceString()}");
#endif
      Parent.AddToDictionaryChidren(this);
      if (ParentN!=null) {
        ParentN.AddToDictionaryChidren(this);
      }
      ParentR.AddToDictionaryChidren(this);
      if (ParentNR!=null) {
        ParentNR.AddToDictionaryChidren(this);
      }
      onConstruct();
      if (DC.Data.IsTransaction) {
        DC.Data.AddTransaction(new TransactionItem(19,TransactionActivityEnum.New, Key, this));
      }

      if (isStoring) {
        Store();
      }
    }
    partial void onConstruct();


    /// <summary>
    /// Cloning constructor. It will copy all data from original except any collection (children).
    /// </summary>
    #pragma warning disable CS8618 // Children collections are uninitialized.
    public DictionaryChild(DictionaryChild original) {
    #pragma warning restore CS8618 //
      Key = StorageExtensions.NoKey;
      Text = original.Text;
      Parent = original.Parent;
      ParentN = original.ParentN;
      ParentR = original.ParentR;
      ParentNR = original.ParentNR;
      onCloned(this);
    }
    partial void onCloned(DictionaryChild clone);


    /// <summary>
    /// Constructor for DictionaryChild read from CSV file
    /// </summary>
    private DictionaryChild(int key, CsvReader csvReader){
      Key = key;
      Text = csvReader.ReadString();
      var dictionaryParentKey = csvReader.ReadInt();
      Parent = DC.Data._DictionaryParents.GetItem(dictionaryParentKey)??
        throw new Exception($"Read DictionaryChild from CSV file: Cannot find Parent with key {dictionaryParentKey}." + Environment.NewLine + 
          csvReader.PresentContent);
      var parentNKey = csvReader.ReadIntNull();
      if (parentNKey.HasValue) {
        ParentN = DC.Data._DictionaryParentNs.GetItem(parentNKey.Value)?? DictionaryParentN.NoDictionaryParentN;
      }
      var dictionaryParentRKey = csvReader.ReadInt();
      ParentR = DC.Data._DictionaryParentRs.GetItem(dictionaryParentRKey)??
        throw new Exception($"Read DictionaryChild from CSV file: Cannot find ParentR with key {dictionaryParentRKey}." + Environment.NewLine + 
          csvReader.PresentContent);
      var parentNRKey = csvReader.ReadIntNull();
      if (parentNRKey.HasValue) {
        ParentNR = DC.Data._DictionaryParentNRs.GetItem(parentNRKey.Value)?? DictionaryParentNR.NoDictionaryParentNR;
      }
      if (Parent!=DictionaryParent.NoDictionaryParent) {
        Parent.AddToDictionaryChidren(this);
      }
      if (parentNKey.HasValue && ParentN!=DictionaryParentN.NoDictionaryParentN) {
        ParentN!.AddToDictionaryChidren(this);
      }
      if (ParentR!=DictionaryParentR.NoDictionaryParentR) {
        ParentR.AddToDictionaryChidren(this);
      }
      if (parentNRKey.HasValue && ParentNR!=DictionaryParentNR.NoDictionaryParentNR) {
        ParentNR!.AddToDictionaryChidren(this);
      }
      onCsvConstruct();
    }
    partial void onCsvConstruct();


    /// <summary>
    /// New DictionaryChild read from CSV file
    /// </summary>
    internal static DictionaryChild Create(int key, CsvReader csvReader) {
      return new DictionaryChild(key, csvReader);
    }


    /// <summary>
    /// Verify that dictionaryChild.Parent exists.
    /// Verify that dictionaryChild.ParentN exists.
    /// Verify that dictionaryChild.ParentR exists.
    /// Verify that dictionaryChild.ParentNR exists.
    /// </summary>
    internal static bool Verify(DictionaryChild dictionaryChild) {
      if (dictionaryChild.Parent==DictionaryParent.NoDictionaryParent) return false;
      if (dictionaryChild.ParentN==DictionaryParentN.NoDictionaryParentN) return false;
      if (dictionaryChild.ParentR==DictionaryParentR.NoDictionaryParentR) return false;
      if (dictionaryChild.ParentNR==DictionaryParentNR.NoDictionaryParentNR) return false;
      return true;
    }
    #endregion


    #region Methods
    //      -------

    /// <summary>
    /// Adds DictionaryChild to DC.Data.DictionaryChidren.<br/>
    /// Throws an Exception when DictionaryChild is already stored.
    /// </summary>
    public void Store() {
      if (Key>=0) {
        throw new Exception($"DictionaryChild cannot be stored again in DC.Data, key {Key} is greater equal 0." + Environment.NewLine + ToString());
      }

      var isCancelled = false;
      onStoring(ref isCancelled);
      if (isCancelled) return;

      if (Parent.Key<0) {
        throw new Exception($"Cannot store child DictionaryChild '{this}'.Parent to DictionaryParent '{Parent}' because parent is not stored yet.");
      }
      if (ParentN?.Key<0) {
        throw new Exception($"Cannot store child DictionaryChild '{this}'.ParentN to DictionaryParentN '{ParentN}' because parent is not stored yet.");
      }
      if (ParentR.Key<0) {
        throw new Exception($"Cannot store child DictionaryChild '{this}'.ParentR to DictionaryParentR '{ParentR}' because parent is not stored yet.");
      }
      if (ParentNR?.Key<0) {
        throw new Exception($"Cannot store child DictionaryChild '{this}'.ParentNR to DictionaryParentNR '{ParentNR}' because parent is not stored yet.");
      }
      DC.Data._DictionaryChidren.Add(this);
      onStored();
#if DEBUG
      DC.Trace?.Invoke($"Stored DictionaryChild #{GetHashCode()} @{Key}");
#endif
    }
    partial void onStoring(ref bool isCancelled);
    partial void onStored();


    /// <summary>
    /// Estimated number of UTF8 characters needed to write DictionaryChild to CSV file
    /// </summary>
    public const int EstimatedLineLength = 150;


    /// <summary>
    /// Write DictionaryChild to CSV file
    /// </summary>
    internal static void Write(DictionaryChild dictionaryChild, CsvWriter csvWriter) {
      dictionaryChild.onCsvWrite();
      csvWriter.Write(dictionaryChild.Text);
      if (dictionaryChild.Parent.Key<0) throw new Exception($"Cannot write dictionaryChild '{dictionaryChild}' to CSV File, because Parent is not stored in DC.Data.DictionaryParents.");

      csvWriter.Write(dictionaryChild.Parent.Key.ToString());
      if (dictionaryChild.ParentN is null) {
        csvWriter.WriteNull();
      } else {
        if (dictionaryChild.ParentN.Key<0) throw new Exception($"Cannot write dictionaryChild '{dictionaryChild}' to CSV File, because ParentN is not stored in DC.Data.DictionaryParentNs.");

        csvWriter.Write(dictionaryChild.ParentN.Key.ToString());
      }
      if (dictionaryChild.ParentR.Key<0) throw new Exception($"Cannot write dictionaryChild '{dictionaryChild}' to CSV File, because ParentR is not stored in DC.Data.DictionaryParentRs.");

      csvWriter.Write(dictionaryChild.ParentR.Key.ToString());
      if (dictionaryChild.ParentNR is null) {
        csvWriter.WriteNull();
      } else {
        if (dictionaryChild.ParentNR.Key<0) throw new Exception($"Cannot write dictionaryChild '{dictionaryChild}' to CSV File, because ParentNR is not stored in DC.Data.DictionaryParentNRs.");

        csvWriter.Write(dictionaryChild.ParentNR.Key.ToString());
      }
    }
    partial void onCsvWrite();


    /// <summary>
    /// Updates DictionaryChild with the provided values
    /// </summary>
    public void Update(string text, DictionaryParent parent, DictionaryParentN? parentN) {
      if (Key>=0){
        if (parent.Key<0) {
          throw new Exception($"DictionaryChild.Update(): It is illegal to add stored DictionaryChild '{this}'" + Environment.NewLine + 
            $"to Parent '{parent}', which is not stored.");
        }
        if (parentN?.Key<0) {
          throw new Exception($"DictionaryChild.Update(): It is illegal to add stored DictionaryChild '{this}'" + Environment.NewLine + 
            $"to ParentN '{parentN}', which is not stored.");
        }
      }
      var clone = new DictionaryChild(this);
      var isCancelled = false;
      onUpdating(text, parent, parentN, ref isCancelled);
      if (isCancelled) return;

#if DEBUG
      DC.Trace?.Invoke($"Updating DictionaryChild: {ToTraceString()}");
#endif

      //remove not yet updated item from parents which will be removed by update
      var hasParentChanged = Parent!=parent || Text!=text;
      if (hasParentChanged) {
        Parent.RemoveFromDictionaryChidren(this);
      }
      var hasParentNChanged = ParentN!=parentN || Text!=text;
      if (ParentN is not null && hasParentNChanged) {
        ParentN.RemoveFromDictionaryChidren(this);
      }

      //update properties and detect if any value has changed
      var isChangeDetected = false;
      if (Text!=text) {
        Text = text;
        isChangeDetected = true;
      }
      if (Parent!=parent) {
        Parent = parent;
        isChangeDetected = true;
      }
      if (ParentN!=parentN) {
        ParentN = parentN;
        isChangeDetected = true;
      }

      //add updated item to parents which have been newly added during update
      if (hasParentChanged) {
        Parent.AddToDictionaryChidren(this);
      }
      if (ParentN is not null && hasParentNChanged) {
        ParentN.AddToDictionaryChidren(this);
      }
      if (isChangeDetected) {
        onUpdated(clone);
        if (Key>=0) {
          DC.Data._DictionaryChidren.ItemHasChanged(clone, this);
        } else if (DC.Data.IsTransaction) {
          DC.Data.AddTransaction(new TransactionItem(19, TransactionActivityEnum.Update, Key, this, oldItem: clone));
        }
        HasChanged?.Invoke(clone, this);
      }
#if DEBUG
      DC.Trace?.Invoke($"Updated DictionaryChild: {ToTraceString()}");
#endif
    }
    partial void onUpdating(string text, DictionaryParent parent, DictionaryParentN? parentN, ref bool isCancelled);
    partial void onUpdated(DictionaryChild old);


    /// <summary>
    /// Updates this DictionaryChild with values from CSV file
    /// </summary>
    internal static void Update(DictionaryChild dictionaryChild, CsvReader csvReader){
      dictionaryChild.Text = csvReader.ReadString();
        var parent = DC.Data._DictionaryParents.GetItem(csvReader.ReadInt())??
          DictionaryParent.NoDictionaryParent;
      if (dictionaryChild.Parent!=parent) {
        if (dictionaryChild.Parent!=DictionaryParent.NoDictionaryParent) {
          dictionaryChild.Parent.RemoveFromDictionaryChidren(dictionaryChild);
        }
        dictionaryChild.Parent = parent;
        dictionaryChild.Parent.AddToDictionaryChidren(dictionaryChild);
      }
      var parentNKey = csvReader.ReadIntNull();
      DictionaryParentN? parentN;
      if (parentNKey is null) {
        parentN = null;
      } else {
        parentN = DC.Data._DictionaryParentNs.GetItem(parentNKey.Value)??
          DictionaryParentN.NoDictionaryParentN;
      }
      if (dictionaryChild.ParentN is null) {
        if (parentN is null) {
          //nothing to do
        } else {
          dictionaryChild.ParentN = parentN;
          dictionaryChild.ParentN.AddToDictionaryChidren(dictionaryChild);
        }
      } else {
        if (parentN is null) {
          if (dictionaryChild.ParentN!=DictionaryParentN.NoDictionaryParentN) {
            dictionaryChild.ParentN.RemoveFromDictionaryChidren(dictionaryChild);
          }
          dictionaryChild.ParentN = null;
        } else {
          if (dictionaryChild.ParentN!=DictionaryParentN.NoDictionaryParentN) {
            dictionaryChild.ParentN.RemoveFromDictionaryChidren(dictionaryChild);
          }
          dictionaryChild.ParentN = parentN;
          dictionaryChild.ParentN.AddToDictionaryChidren(dictionaryChild);
        }
      }
        var parentR = DC.Data._DictionaryParentRs.GetItem(csvReader.ReadInt())??
          DictionaryParentR.NoDictionaryParentR;
      if (dictionaryChild.ParentR!=parentR) {
        throw new Exception($"DictionaryChild.Update(): Property ParentR '{dictionaryChild.ParentR}' is " +
          $"readonly, parentR '{parentR}' read from the CSV file should be the same." + Environment.NewLine + 
          dictionaryChild.ToString());
      }
      var parentNRKey = csvReader.ReadIntNull();
      DictionaryParentNR? parentNR;
      if (parentNRKey is null) {
        parentNR = null;
      } else {
        parentNR = DC.Data._DictionaryParentNRs.GetItem(parentNRKey.Value)??
          DictionaryParentNR.NoDictionaryParentNR;
      }
      if (dictionaryChild.ParentNR!=parentNR) {
        throw new Exception($"DictionaryChild.Update(): Property ParentNR '{dictionaryChild.ParentNR}' is " +
          $"readonly, parentNR '{parentNR}' read from the CSV file should be the same." + Environment.NewLine + 
          dictionaryChild.ToString());
      }
      dictionaryChild.onCsvUpdate();
    }
    partial void onCsvUpdate();


    /// <summary>
    /// Removes DictionaryChild from DC.Data.DictionaryChidren.
    /// </summary>
    public void Release() {
      if (Key<0) {
        throw new Exception($"DictionaryChild.Release(): DictionaryChild '{this}' is not stored in DC.Data, key is {Key}.");
      }
      onReleased();
      DC.Data._DictionaryChidren.Remove(Key);
#if DEBUG
      DC.Trace?.Invoke($"Released DictionaryChild @{Key} #{GetHashCode()}");
#endif
    }
    partial void onReleased();


    /// <summary>
    /// Removes DictionaryChild from parents as part of a transaction rollback of the new() statement.
    /// </summary>
    internal static void RollbackItemNew(IStorageItem item) {
      var dictionaryChild = (DictionaryChild) item;
#if DEBUG
      DC.Trace?.Invoke($"Rollback new DictionaryChild(): {dictionaryChild.ToTraceString()}");
#endif
      if (dictionaryChild.Parent!=DictionaryParent.NoDictionaryParent) {
        dictionaryChild.Parent.RemoveFromDictionaryChidren(dictionaryChild);
      }
      if (dictionaryChild.ParentN!=null && dictionaryChild.ParentN!=DictionaryParentN.NoDictionaryParentN) {
        dictionaryChild.ParentN.RemoveFromDictionaryChidren(dictionaryChild);
      }
      if (dictionaryChild.ParentR!=DictionaryParentR.NoDictionaryParentR) {
        dictionaryChild.ParentR.RemoveFromDictionaryChidren(dictionaryChild);
      }
      if (dictionaryChild.ParentNR!=null && dictionaryChild.ParentNR!=DictionaryParentNR.NoDictionaryParentNR) {
        dictionaryChild.ParentNR.RemoveFromDictionaryChidren(dictionaryChild);
      }
      dictionaryChild.onRollbackItemNew();
    }
    partial void onRollbackItemNew();


    /// <summary>
    /// Releases DictionaryChild from DC.Data.DictionaryChidren as part of a transaction rollback of Store().
    /// </summary>
    internal static void RollbackItemStore(IStorageItem item) {
      var dictionaryChild = (DictionaryChild) item;
#if DEBUG
      DC.Trace?.Invoke($"Rollback DictionaryChild.Store(): {dictionaryChild.ToTraceString()}");
#endif
      dictionaryChild.onRollbackItemStored();
    }
    partial void onRollbackItemStored();


    /// <summary>
    /// Restores the DictionaryChild item data as it was before the last update as part of a transaction rollback.
    /// </summary>
    internal static void RollbackItemUpdate(IStorageItem oldStorageItem, IStorageItem newStorageItem) {
      var oldItem = (DictionaryChild) oldStorageItem;//an item clone with the values before item was updated
      var item = (DictionaryChild) newStorageItem;//is the instance whose values should be restored
#if DEBUG
      DC.Trace?.Invoke($"Rolling back DictionaryChild.Update(): {item.ToTraceString()}");
#endif

      // if possible, throw exceptions before changing anything
      if (item.ParentR!=oldItem.ParentR) {
        throw new Exception($"DictionaryChild.Update(): Property ParentR '{item.ParentR}' is " +
          $"readonly, ParentR '{oldItem.ParentR}' should be the same." + Environment.NewLine + 
          item.ToString());
      }
      if (item.ParentNR!=oldItem.ParentNR) {
        throw new Exception($"DictionaryChild.Update(): Property ParentNR '{item.ParentNR}' is " +
          $"readonly, ParentNR '{oldItem.ParentNR}' should be the same." + Environment.NewLine + 
          item.ToString());
      }

      // remove updated item from parents
      var hasParentChanged = oldItem.Parent!=item.Parent || oldItem.Text!=item.Text;
      if (hasParentChanged) {
        item.Parent.RemoveFromDictionaryChidren(item);
      }
      var hasParentNChanged = oldItem.ParentN!=item.ParentN || oldItem.Text!=item.Text;
      if (hasParentNChanged && item.ParentN is not null) {
        item.ParentN.RemoveFromDictionaryChidren(item);
      }

      // updated item: restore old values
      item.Text = oldItem.Text;
      item.Parent = oldItem.Parent;
      item.ParentN = oldItem.ParentN;

      // add item with previous values to parents
      if (hasParentChanged) {
        item.Parent.AddToDictionaryChidren(item);
      }
      if (hasParentNChanged && item.ParentN is not null) {
        item.ParentN.AddToDictionaryChidren(item);
      }
      item.onRollbackItemUpdated(oldItem);
#if DEBUG
      DC.Trace?.Invoke($"Rolled back DictionaryChild.Update(): {item.ToTraceString()}");
#endif
    }
    partial void onRollbackItemUpdated(DictionaryChild oldDictionaryChild);


    /// <summary>
    /// Adds DictionaryChild to DC.Data.DictionaryChidren as part of a transaction rollback of Release().
    /// </summary>
    internal static void RollbackItemRelease(IStorageItem item) {
      var dictionaryChild = (DictionaryChild) item;
#if DEBUG
      DC.Trace?.Invoke($"Rollback DictionaryChild.Release(): {dictionaryChild.ToTraceString()}");
#endif
      dictionaryChild.onRollbackItemRelease();
    }
    partial void onRollbackItemRelease();


    /// <summary>
    /// Returns property values for tracing. Parents are shown with their key instead their content.
    /// </summary>
    public string ToTraceString() {
      var returnString =
        $"{this.GetKeyOrHash()}|" +
        $" {Text}|" +
        $" Parent {Parent.GetKeyOrHash()}|" +
        $" ParentN {ParentN?.GetKeyOrHash()}|" +
        $" ParentR {ParentR.GetKeyOrHash()}|" +
        $" ParentNR {ParentNR?.GetKeyOrHash()}";
      onToTraceString(ref returnString);
      return returnString;
    }
    partial void onToTraceString(ref string returnString);


    /// <summary>
    /// Returns property values
    /// </summary>
    public string ToShortString() {
      var returnString =
        $"{Key.ToKeyString()}," +
        $" {Text}," +
        $" {Parent.ToShortString()}," +
        $" {ParentN?.ToShortString()}," +
        $" {ParentR.ToShortString()}," +
        $" {ParentNR?.ToShortString()}";
      onToShortString(ref returnString);
      return returnString;
    }
    partial void onToShortString(ref string returnString);


    /// <summary>
    /// Returns all property names and values
    /// </summary>
    public override string ToString() {
      var returnString =
        $"Key: {Key.ToKeyString()}," +
        $" Text: {Text}," +
        $" Parent: {Parent.ToShortString()}," +
        $" ParentN: {ParentN?.ToShortString()}," +
        $" ParentR: {ParentR.ToShortString()}," +
        $" ParentNR: {ParentNR?.ToShortString()};";
      onToString(ref returnString);
      return returnString;
    }
    partial void onToString(ref string returnString);
    #endregion
  }
}
